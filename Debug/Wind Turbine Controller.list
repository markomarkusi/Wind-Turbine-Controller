
Wind Turbine Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b80  08008ca8  08008ca8  00018ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b830  0800b830  0001b830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c0  20000000  0800b838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000069c  200006c0  0800bef8  000206c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d5c  0800bef8  00020d5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000321f5  00000000  00000000  000206ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000572d  00000000  00000000  000528e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013035  00000000  00000000  00058010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001650  00000000  00000000  0006b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c58  00000000  00000000  0006c698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ea5f  00000000  00000000  0006e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008b37  00000000  00000000  0007cd4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00085886  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ac0  00000000  00000000  00085904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c0 	.word	0x200006c0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008c8c 	.word	0x08008c8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006c4 	.word	0x200006c4
 800023c:	08008c8c 	.word	0x08008c8c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8000600:	2000      	movs	r0, #0
 8000602:	4770      	bx	lr

08000604 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8000604:	4770      	bx	lr

08000606 <ft6x06_ReadID>:
{
 8000606:	b510      	push	{r4, lr}
 8000608:	4604      	mov	r4, r0
  TS_IO_Init();
 800060a:	f000 fbbd 	bl	8000d88 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800060e:	21a8      	movs	r1, #168	; 0xa8
 8000610:	b2e0      	uxtb	r0, r4
 8000612:	f000 fbe1 	bl	8000dd8 <TS_IO_Read>
}
 8000616:	bd10      	pop	{r4, pc}

08000618 <ft6x06_TS_DetectTouch>:
{
 8000618:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800061a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800061c:	2102      	movs	r1, #2
 800061e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8000620:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000624:	f000 fbd8 	bl	8000dd8 <TS_IO_Read>
 8000628:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 800062c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8000638:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d901      	bls.n	8000644 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8000640:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000644:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 800064a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800064e:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8000650:	2200      	movs	r2, #0
 8000652:	709a      	strb	r2, [r3, #2]
}
 8000654:	b002      	add	sp, #8
 8000656:	bd10      	pop	{r4, pc}
 8000658:	200006de 	.word	0x200006de

0800065c <ft6x06_TS_GetXY>:
{
 800065c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800065e:	4c15      	ldr	r4, [pc, #84]	; (80006b4 <ft6x06_TS_GetXY+0x58>)
{
 8000660:	4615      	mov	r5, r2
 8000662:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000664:	78a3      	ldrb	r3, [r4, #2]
 8000666:	7862      	ldrb	r2, [r4, #1]
 8000668:	429a      	cmp	r2, r3
 800066a:	d91f      	bls.n	80006ac <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 800066c:	b303      	cbz	r3, 80006b0 <ft6x06_TS_GetXY+0x54>
  uint8_t regAddress = 0;
 800066e:	2b01      	cmp	r3, #1
 8000670:	bf0c      	ite	eq
 8000672:	2109      	moveq	r1, #9
 8000674:	2100      	movne	r1, #0
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000676:	2304      	movs	r3, #4
 8000678:	b2c0      	uxtb	r0, r0
 800067a:	eb0d 0203 	add.w	r2, sp, r3
 800067e:	f000 fb6d 	bl	8000d5c <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000682:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000686:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000690:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000692:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000696:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000698:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006a2:	4313      	orrs	r3, r2
 80006a4:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80006a6:	78a3      	ldrb	r3, [r4, #2]
 80006a8:	3301      	adds	r3, #1
 80006aa:	70a3      	strb	r3, [r4, #2]
}
 80006ac:	b002      	add	sp, #8
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
      regAddress = FT6206_P1_XH_REG; 
 80006b0:	2103      	movs	r1, #3
 80006b2:	e7e0      	b.n	8000676 <ft6x06_TS_GetXY+0x1a>
 80006b4:	200006de 	.word	0x200006de

080006b8 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80006b8:	2201      	movs	r2, #1
 80006ba:	21a4      	movs	r1, #164	; 0xa4
 80006bc:	b2c0      	uxtb	r0, r0
 80006be:	f000 bb75 	b.w	8000dac <TS_IO_Write>

080006c2 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80006c2:	2200      	movs	r2, #0
 80006c4:	21a4      	movs	r1, #164	; 0xa4
 80006c6:	b2c0      	uxtb	r0, r0
 80006c8:	f000 bb70 	b.w	8000dac <TS_IO_Write>

080006cc <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 80006cc:	f7ff bff9 	b.w	80006c2 <ft6x06_TS_DisableIT>

080006d0 <ft6x06_Reset>:
 80006d0:	4770      	bx	lr
	...

080006d4 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <ft6x06_Init+0x24>)
 80006d6:	7813      	ldrb	r3, [r2, #0]
 80006d8:	4298      	cmp	r0, r3
 80006da:	d00b      	beq.n	80006f4 <ft6x06_Init+0x20>
 80006dc:	7851      	ldrb	r1, [r2, #1]
 80006de:	4288      	cmp	r0, r1
 80006e0:	d103      	bne.n	80006ea <ft6x06_Init+0x16>
 80006e2:	4770      	bx	lr
 80006e4:	b931      	cbnz	r1, 80006f4 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80006e6:	2301      	movs	r3, #1
 80006e8:	e001      	b.n	80006ee <ft6x06_Init+0x1a>
    if(ft6x06[idx] == DeviceAddr)
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1fa      	bne.n	80006e4 <ft6x06_Init+0x10>
      ft6x06[empty] = DeviceAddr;
 80006ee:	54d0      	strb	r0, [r2, r3]
      TS_IO_Init(); 
 80006f0:	f000 bb4a 	b.w	8000d88 <TS_IO_Init>
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200006dc 	.word	0x200006dc

080006fc <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80006fc:	b538      	push	{r3, r4, r5, lr}
 80006fe:	4604      	mov	r4, r0
 8000700:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000702:	2000      	movs	r0, #0
 8000704:	49cb      	ldr	r1, [pc, #812]	; (8000a34 <OTM8009A_Init+0x338>)
 8000706:	f000 fc75 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800070a:	49cb      	ldr	r1, [pc, #812]	; (8000a38 <OTM8009A_Init+0x33c>)
 800070c:	2003      	movs	r0, #3
 800070e:	f000 fc71 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000712:	49ca      	ldr	r1, [pc, #808]	; (8000a3c <OTM8009A_Init+0x340>)
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fc6d 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800071a:	49c9      	ldr	r1, [pc, #804]	; (8000a40 <OTM8009A_Init+0x344>)
 800071c:	2002      	movs	r0, #2
 800071e:	f000 fc69 	bl	8000ff4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000722:	49c6      	ldr	r1, [pc, #792]	; (8000a3c <OTM8009A_Init+0x340>)
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fc65 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800072a:	49c6      	ldr	r1, [pc, #792]	; (8000a44 <OTM8009A_Init+0x348>)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fc61 	bl	8000ff4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000732:	200a      	movs	r0, #10
 8000734:	f000 fb20 	bl	8000d78 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000738:	49c3      	ldr	r1, [pc, #780]	; (8000a48 <OTM8009A_Init+0x34c>)
 800073a:	2000      	movs	r0, #0
 800073c:	f000 fc5a 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000740:	49c2      	ldr	r1, [pc, #776]	; (8000a4c <OTM8009A_Init+0x350>)
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fc56 	bl	8000ff4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fb15 	bl	8000d78 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800074e:	49c0      	ldr	r1, [pc, #768]	; (8000a50 <OTM8009A_Init+0x354>)
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fc4f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000756:	49bf      	ldr	r1, [pc, #764]	; (8000a54 <OTM8009A_Init+0x358>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fc4b 	bl	8000ff4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800075e:	49be      	ldr	r1, [pc, #760]	; (8000a58 <OTM8009A_Init+0x35c>)
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fc47 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000766:	49bd      	ldr	r1, [pc, #756]	; (8000a5c <OTM8009A_Init+0x360>)
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fc43 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800076e:	49bc      	ldr	r1, [pc, #752]	; (8000a60 <OTM8009A_Init+0x364>)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fc3f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000776:	49bb      	ldr	r1, [pc, #748]	; (8000a64 <OTM8009A_Init+0x368>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fc3b 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800077e:	49ad      	ldr	r1, [pc, #692]	; (8000a34 <OTM8009A_Init+0x338>)
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fc37 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000786:	49b8      	ldr	r1, [pc, #736]	; (8000a68 <OTM8009A_Init+0x36c>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fc33 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800078e:	49b7      	ldr	r1, [pc, #732]	; (8000a6c <OTM8009A_Init+0x370>)
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fc2f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000796:	49b6      	ldr	r1, [pc, #728]	; (8000a70 <OTM8009A_Init+0x374>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fc2b 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800079e:	49b5      	ldr	r1, [pc, #724]	; (8000a74 <OTM8009A_Init+0x378>)
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fc27 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80007a6:	49b4      	ldr	r1, [pc, #720]	; (8000a78 <OTM8009A_Init+0x37c>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fc23 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80007ae:	49b3      	ldr	r1, [pc, #716]	; (8000a7c <OTM8009A_Init+0x380>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 fc1f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80007b6:	49b2      	ldr	r1, [pc, #712]	; (8000a80 <OTM8009A_Init+0x384>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fc1b 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80007be:	49b1      	ldr	r1, [pc, #708]	; (8000a84 <OTM8009A_Init+0x388>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fc17 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80007c6:	49a5      	ldr	r1, [pc, #660]	; (8000a5c <OTM8009A_Init+0x360>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fc13 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007ce:	4999      	ldr	r1, [pc, #612]	; (8000a34 <OTM8009A_Init+0x338>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fc0f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80007d6:	49ac      	ldr	r1, [pc, #688]	; (8000a88 <OTM8009A_Init+0x38c>)
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fc0b 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80007de:	49ab      	ldr	r1, [pc, #684]	; (8000a8c <OTM8009A_Init+0x390>)
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fc07 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80007e6:	49aa      	ldr	r1, [pc, #680]	; (8000a90 <OTM8009A_Init+0x394>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fc03 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80007ee:	49a9      	ldr	r1, [pc, #676]	; (8000a94 <OTM8009A_Init+0x398>)
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fbff 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80007f6:	49a8      	ldr	r1, [pc, #672]	; (8000a98 <OTM8009A_Init+0x39c>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fbfb 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80007fe:	49a7      	ldr	r1, [pc, #668]	; (8000a9c <OTM8009A_Init+0x3a0>)
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fbf7 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000806:	49a6      	ldr	r1, [pc, #664]	; (8000aa0 <OTM8009A_Init+0x3a4>)
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fbf3 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800080e:	4997      	ldr	r1, [pc, #604]	; (8000a6c <OTM8009A_Init+0x370>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fbef 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000816:	49a3      	ldr	r1, [pc, #652]	; (8000aa4 <OTM8009A_Init+0x3a8>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fbeb 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800081e:	4995      	ldr	r1, [pc, #596]	; (8000a74 <OTM8009A_Init+0x378>)
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fbe7 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000826:	49a0      	ldr	r1, [pc, #640]	; (8000aa8 <OTM8009A_Init+0x3ac>)
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fbe3 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800082e:	499f      	ldr	r1, [pc, #636]	; (8000aac <OTM8009A_Init+0x3b0>)
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fbdf 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8000836:	499e      	ldr	r1, [pc, #632]	; (8000ab0 <OTM8009A_Init+0x3b4>)
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fbdb 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800083e:	497f      	ldr	r1, [pc, #508]	; (8000a3c <OTM8009A_Init+0x340>)
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fbd7 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8000846:	499b      	ldr	r1, [pc, #620]	; (8000ab4 <OTM8009A_Init+0x3b8>)
 8000848:	2006      	movs	r0, #6
 800084a:	f000 fbd3 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800084e:	499a      	ldr	r1, [pc, #616]	; (8000ab8 <OTM8009A_Init+0x3bc>)
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fbcf 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000856:	4999      	ldr	r1, [pc, #612]	; (8000abc <OTM8009A_Init+0x3c0>)
 8000858:	200e      	movs	r0, #14
 800085a:	f000 fbcb 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800085e:	4998      	ldr	r1, [pc, #608]	; (8000ac0 <OTM8009A_Init+0x3c4>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fbc7 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000866:	4997      	ldr	r1, [pc, #604]	; (8000ac4 <OTM8009A_Init+0x3c8>)
 8000868:	200e      	movs	r0, #14
 800086a:	f000 fbc3 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800086e:	4996      	ldr	r1, [pc, #600]	; (8000ac8 <OTM8009A_Init+0x3cc>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fbbf 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000876:	4995      	ldr	r1, [pc, #596]	; (8000acc <OTM8009A_Init+0x3d0>)
 8000878:	200a      	movs	r0, #10
 800087a:	f000 fbbb 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800087e:	4994      	ldr	r1, [pc, #592]	; (8000ad0 <OTM8009A_Init+0x3d4>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fbb7 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000886:	4993      	ldr	r1, [pc, #588]	; (8000ad4 <OTM8009A_Init+0x3d8>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fbb3 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088e:	496b      	ldr	r1, [pc, #428]	; (8000a3c <OTM8009A_Init+0x340>)
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fbaf 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000896:	4990      	ldr	r1, [pc, #576]	; (8000ad8 <OTM8009A_Init+0x3dc>)
 8000898:	200a      	movs	r0, #10
 800089a:	f000 fbab 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800089e:	498f      	ldr	r1, [pc, #572]	; (8000adc <OTM8009A_Init+0x3e0>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fba7 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80008a6:	498e      	ldr	r1, [pc, #568]	; (8000ae0 <OTM8009A_Init+0x3e4>)
 80008a8:	200f      	movs	r0, #15
 80008aa:	f000 fba3 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80008ae:	4982      	ldr	r1, [pc, #520]	; (8000ab8 <OTM8009A_Init+0x3bc>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fb9f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80008b6:	498b      	ldr	r1, [pc, #556]	; (8000ae4 <OTM8009A_Init+0x3e8>)
 80008b8:	200f      	movs	r0, #15
 80008ba:	f000 fb9b 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80008be:	4980      	ldr	r1, [pc, #512]	; (8000ac0 <OTM8009A_Init+0x3c4>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fb97 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80008c6:	4988      	ldr	r1, [pc, #544]	; (8000ae8 <OTM8009A_Init+0x3ec>)
 80008c8:	200a      	movs	r0, #10
 80008ca:	f000 fb93 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80008ce:	497e      	ldr	r1, [pc, #504]	; (8000ac8 <OTM8009A_Init+0x3cc>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fb8f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80008d6:	4985      	ldr	r1, [pc, #532]	; (8000aec <OTM8009A_Init+0x3f0>)
 80008d8:	200f      	movs	r0, #15
 80008da:	f000 fb8b 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80008de:	497c      	ldr	r1, [pc, #496]	; (8000ad0 <OTM8009A_Init+0x3d4>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 fb87 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80008e6:	4982      	ldr	r1, [pc, #520]	; (8000af0 <OTM8009A_Init+0x3f4>)
 80008e8:	200f      	movs	r0, #15
 80008ea:	f000 fb83 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80008ee:	4981      	ldr	r1, [pc, #516]	; (8000af4 <OTM8009A_Init+0x3f8>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fb7f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80008f6:	4980      	ldr	r1, [pc, #512]	; (8000af8 <OTM8009A_Init+0x3fc>)
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fb7b 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80008fe:	497f      	ldr	r1, [pc, #508]	; (8000afc <OTM8009A_Init+0x400>)
 8000900:	2000      	movs	r0, #0
 8000902:	f000 fb77 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000906:	497e      	ldr	r1, [pc, #504]	; (8000b00 <OTM8009A_Init+0x404>)
 8000908:	200a      	movs	r0, #10
 800090a:	f000 fb73 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800090e:	494b      	ldr	r1, [pc, #300]	; (8000a3c <OTM8009A_Init+0x340>)
 8000910:	2000      	movs	r0, #0
 8000912:	f000 fb6f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000916:	497b      	ldr	r1, [pc, #492]	; (8000b04 <OTM8009A_Init+0x408>)
 8000918:	200a      	movs	r0, #10
 800091a:	f000 fb6b 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800091e:	496f      	ldr	r1, [pc, #444]	; (8000adc <OTM8009A_Init+0x3e0>)
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fb67 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000926:	4978      	ldr	r1, [pc, #480]	; (8000b08 <OTM8009A_Init+0x40c>)
 8000928:	200f      	movs	r0, #15
 800092a:	f000 fb63 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800092e:	4962      	ldr	r1, [pc, #392]	; (8000ab8 <OTM8009A_Init+0x3bc>)
 8000930:	2000      	movs	r0, #0
 8000932:	f000 fb5f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000936:	4975      	ldr	r1, [pc, #468]	; (8000b0c <OTM8009A_Init+0x410>)
 8000938:	200f      	movs	r0, #15
 800093a:	f000 fb5b 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800093e:	4960      	ldr	r1, [pc, #384]	; (8000ac0 <OTM8009A_Init+0x3c4>)
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fb57 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000946:	4972      	ldr	r1, [pc, #456]	; (8000b10 <OTM8009A_Init+0x414>)
 8000948:	200a      	movs	r0, #10
 800094a:	f000 fb53 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800094e:	495e      	ldr	r1, [pc, #376]	; (8000ac8 <OTM8009A_Init+0x3cc>)
 8000950:	2000      	movs	r0, #0
 8000952:	f000 fb4f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000956:	496f      	ldr	r1, [pc, #444]	; (8000b14 <OTM8009A_Init+0x418>)
 8000958:	200f      	movs	r0, #15
 800095a:	f000 fb4b 	bl	8000ff4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800095e:	495c      	ldr	r1, [pc, #368]	; (8000ad0 <OTM8009A_Init+0x3d4>)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 fb47 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000966:	496c      	ldr	r1, [pc, #432]	; (8000b18 <OTM8009A_Init+0x41c>)
 8000968:	200f      	movs	r0, #15
 800096a:	f000 fb43 	bl	8000ff4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800096e:	493f      	ldr	r1, [pc, #252]	; (8000a6c <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fb3f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000976:	4969      	ldr	r1, [pc, #420]	; (8000b1c <OTM8009A_Init+0x420>)
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fb3b 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800097e:	4968      	ldr	r1, [pc, #416]	; (8000b20 <OTM8009A_Init+0x424>)
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fb37 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000986:	4967      	ldr	r1, [pc, #412]	; (8000b24 <OTM8009A_Init+0x428>)
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fb33 	bl	8000ff4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800098e:	4966      	ldr	r1, [pc, #408]	; (8000b28 <OTM8009A_Init+0x42c>)
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fb2f 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000996:	4965      	ldr	r1, [pc, #404]	; (8000b2c <OTM8009A_Init+0x430>)
 8000998:	2000      	movs	r0, #0
 800099a:	f000 fb2b 	bl	8000ff4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800099e:	4925      	ldr	r1, [pc, #148]	; (8000a34 <OTM8009A_Init+0x338>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fb27 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80009a6:	4962      	ldr	r1, [pc, #392]	; (8000b30 <OTM8009A_Init+0x434>)
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 fb23 	bl	8000ff4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80009ae:	4921      	ldr	r1, [pc, #132]	; (8000a34 <OTM8009A_Init+0x338>)
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 fb1f 	bl	8000ff4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80009b6:	491f      	ldr	r1, [pc, #124]	; (8000a34 <OTM8009A_Init+0x338>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fb1b 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80009be:	495d      	ldr	r1, [pc, #372]	; (8000b34 <OTM8009A_Init+0x438>)
 80009c0:	2010      	movs	r0, #16
 80009c2:	f000 fb17 	bl	8000ff4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80009c6:	491b      	ldr	r1, [pc, #108]	; (8000a34 <OTM8009A_Init+0x338>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fb13 	bl	8000ff4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80009ce:	495a      	ldr	r1, [pc, #360]	; (8000b38 <OTM8009A_Init+0x43c>)
 80009d0:	2010      	movs	r0, #16
 80009d2:	f000 fb0f 	bl	8000ff4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80009d6:	2000      	movs	r0, #0
 80009d8:	4958      	ldr	r1, [pc, #352]	; (8000b3c <OTM8009A_Init+0x440>)
 80009da:	f000 fb0b 	bl	8000ff4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80009de:	2078      	movs	r0, #120	; 0x78
 80009e0:	f000 f9ca 	bl	8000d78 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	f000 80c9 	beq.w	8000b7c <OTM8009A_Init+0x480>
 80009ea:	2c02      	cmp	r4, #2
 80009ec:	d103      	bne.n	80009f6 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80009ee:	4954      	ldr	r1, [pc, #336]	; (8000b40 <OTM8009A_Init+0x444>)
 80009f0:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80009f2:	f000 faff 	bl	8000ff4 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80009f6:	2d01      	cmp	r5, #1
 80009f8:	d10b      	bne.n	8000a12 <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80009fa:	4952      	ldr	r1, [pc, #328]	; (8000b44 <OTM8009A_Init+0x448>)
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 faf9 	bl	8000ff4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000a02:	4951      	ldr	r1, [pc, #324]	; (8000b48 <OTM8009A_Init+0x44c>)
 8000a04:	2004      	movs	r0, #4
 8000a06:	f000 faf5 	bl	8000ff4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000a0a:	4950      	ldr	r1, [pc, #320]	; (8000b4c <OTM8009A_Init+0x450>)
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f000 faf1 	bl	8000ff4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000a12:	494f      	ldr	r1, [pc, #316]	; (8000b50 <OTM8009A_Init+0x454>)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 faed 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000a1a:	494e      	ldr	r1, [pc, #312]	; (8000b54 <OTM8009A_Init+0x458>)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 fae9 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000a22:	494d      	ldr	r1, [pc, #308]	; (8000b58 <OTM8009A_Init+0x45c>)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fae5 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000a2a:	494c      	ldr	r1, [pc, #304]	; (8000b5c <OTM8009A_Init+0x460>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fae1 	bl	8000ff4 <DSI_IO_WriteCmd>
 8000a32:	e095      	b.n	8000b60 <OTM8009A_Init+0x464>
 8000a34:	08008ca8 	.word	0x08008ca8
 8000a38:	08008d0e 	.word	0x08008d0e
 8000a3c:	08008cbe 	.word	0x08008cbe
 8000a40:	08008d94 	.word	0x08008d94
 8000a44:	08008cd4 	.word	0x08008cd4
 8000a48:	08008cea 	.word	0x08008cea
 8000a4c:	08008d00 	.word	0x08008d00
 8000a50:	08008d06 	.word	0x08008d06
 8000a54:	08008d08 	.word	0x08008d08
 8000a58:	08008d0a 	.word	0x08008d0a
 8000a5c:	08008d0c 	.word	0x08008d0c
 8000a60:	08008caa 	.word	0x08008caa
 8000a64:	08008cac 	.word	0x08008cac
 8000a68:	08008cae 	.word	0x08008cae
 8000a6c:	08008cb0 	.word	0x08008cb0
 8000a70:	08008cb2 	.word	0x08008cb2
 8000a74:	08008cb4 	.word	0x08008cb4
 8000a78:	08008cb6 	.word	0x08008cb6
 8000a7c:	08008cb8 	.word	0x08008cb8
 8000a80:	08008cba 	.word	0x08008cba
 8000a84:	08008cbc 	.word	0x08008cbc
 8000a88:	08008e12 	.word	0x08008e12
 8000a8c:	08008cc0 	.word	0x08008cc0
 8000a90:	08008cc2 	.word	0x08008cc2
 8000a94:	08008cc4 	.word	0x08008cc4
 8000a98:	08008cc6 	.word	0x08008cc6
 8000a9c:	08008cc8 	.word	0x08008cc8
 8000aa0:	08008cca 	.word	0x08008cca
 8000aa4:	08008ccc 	.word	0x08008ccc
 8000aa8:	08008cce 	.word	0x08008cce
 8000aac:	08008cd0 	.word	0x08008cd0
 8000ab0:	08008e15 	.word	0x08008e15
 8000ab4:	08008e18 	.word	0x08008e18
 8000ab8:	08008cd2 	.word	0x08008cd2
 8000abc:	08008e1f 	.word	0x08008e1f
 8000ac0:	08008cd6 	.word	0x08008cd6
 8000ac4:	08008e2e 	.word	0x08008e2e
 8000ac8:	08008cd8 	.word	0x08008cd8
 8000acc:	08008d12 	.word	0x08008d12
 8000ad0:	08008cda 	.word	0x08008cda
 8000ad4:	08008cf8 	.word	0x08008cf8
 8000ad8:	08008d1d 	.word	0x08008d1d
 8000adc:	08008cdc 	.word	0x08008cdc
 8000ae0:	08008d28 	.word	0x08008d28
 8000ae4:	08008d38 	.word	0x08008d38
 8000ae8:	08008d48 	.word	0x08008d48
 8000aec:	08008d53 	.word	0x08008d53
 8000af0:	08008d63 	.word	0x08008d63
 8000af4:	08008cde 	.word	0x08008cde
 8000af8:	08008d73 	.word	0x08008d73
 8000afc:	08008ce0 	.word	0x08008ce0
 8000b00:	08008d7e 	.word	0x08008d7e
 8000b04:	08008d89 	.word	0x08008d89
 8000b08:	08008d97 	.word	0x08008d97
 8000b0c:	08008da7 	.word	0x08008da7
 8000b10:	08008db7 	.word	0x08008db7
 8000b14:	08008dc2 	.word	0x08008dc2
 8000b18:	08008dd2 	.word	0x08008dd2
 8000b1c:	08008cfa 	.word	0x08008cfa
 8000b20:	08008cfc 	.word	0x08008cfc
 8000b24:	08008cfe 	.word	0x08008cfe
 8000b28:	08008d02 	.word	0x08008d02
 8000b2c:	08008d04 	.word	0x08008d04
 8000b30:	08008de2 	.word	0x08008de2
 8000b34:	08008df0 	.word	0x08008df0
 8000b38:	08008e01 	.word	0x08008e01
 8000b3c:	08008ce2 	.word	0x08008ce2
 8000b40:	08008ce4 	.word	0x08008ce4
 8000b44:	08008ce8 	.word	0x08008ce8
 8000b48:	08008de6 	.word	0x08008de6
 8000b4c:	08008deb 	.word	0x08008deb
 8000b50:	08008cec 	.word	0x08008cec
 8000b54:	08008cee 	.word	0x08008cee
 8000b58:	08008cf0 	.word	0x08008cf0
 8000b5c:	08008cf2 	.word	0x08008cf2

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000b60:	4908      	ldr	r1, [pc, #32]	; (8000b84 <OTM8009A_Init+0x488>)
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 fa46 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <OTM8009A_Init+0x48c>)
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fa42 	bl	8000ff4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000b70:	4906      	ldr	r1, [pc, #24]	; (8000b8c <OTM8009A_Init+0x490>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 fa3e 	bl	8000ff4 <DSI_IO_WriteCmd>

  return 0;
}
 8000b78:	2000      	movs	r0, #0
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000b7c:	4904      	ldr	r1, [pc, #16]	; (8000b90 <OTM8009A_Init+0x494>)
 8000b7e:	4620      	mov	r0, r4
 8000b80:	e737      	b.n	80009f2 <OTM8009A_Init+0x2f6>
 8000b82:	bf00      	nop
 8000b84:	08008cf4 	.word	0x08008cf4
 8000b88:	08008ca8 	.word	0x08008ca8
 8000b8c:	08008cf6 	.word	0x08008cf6
 8000b90:	08008ce6 	.word	0x08008ce6

08000b94 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000b9a:	f002 faf5 	bl	8003188 <HAL_I2C_GetState>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d15f      	bne.n	8000c62 <I2Cx_Init+0xce>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000ba2:	4b4f      	ldr	r3, [pc, #316]	; (8000ce0 <I2Cx_Init+0x14c>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	4c4f      	ldr	r4, [pc, #316]	; (8000ce4 <I2Cx_Init+0x150>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000ba8:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress1      = 0;
 8000baa:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000bac:	612e      	str	r6, [r5, #16]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000bae:	bf0c      	ite	eq
 8000bb0:	4a4d      	ldreq	r2, [pc, #308]	; (8000ce8 <I2Cx_Init+0x154>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000bb2:	4a4e      	ldrne	r2, [pc, #312]	; (8000cec <I2Cx_Init+0x158>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000bb4:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress2      = 0;
 8000bb6:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000bb8:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000bba:	4a4d      	ldr	r2, [pc, #308]	; (8000cf0 <I2Cx_Init+0x15c>)
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000bbc:	61ee      	str	r6, [r5, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000bbe:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000bc0:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000bc4:	622e      	str	r6, [r5, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000bc6:	60ea      	str	r2, [r5, #12]
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000bc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000bca:	d14c      	bne.n	8000c66 <I2Cx_Init+0xd2>
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000bd0:	a905      	add	r1, sp, #20
 8000bd2:	4848      	ldr	r0, [pc, #288]	; (8000cf4 <I2Cx_Init+0x160>)
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000bd4:	6323      	str	r3, [r4, #48]	; 0x30
 8000bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	6323      	str	r3, [r4, #48]	; 0x30
 8000be8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000bea:	9607      	str	r6, [sp, #28]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000c02:	2304      	movs	r3, #4
 8000c04:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000c06:	f001 feaf 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000c0a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000c0c:	a905      	add	r1, sp, #20
 8000c0e:	483a      	ldr	r0, [pc, #232]	; (8000cf8 <I2Cx_Init+0x164>)
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000c10:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000c12:	230b      	movs	r3, #11
 8000c14:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000c16:	f001 fea7 	bl	8002968 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c1c:	4632      	mov	r2, r6
 8000c1e:	210f      	movs	r1, #15
 8000c20:	205f      	movs	r0, #95	; 0x5f
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c26:	6423      	str	r3, [r4, #64]	; 0x40
 8000c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000c32:	6a23      	ldr	r3, [r4, #32]
 8000c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c38:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000c3a:	6a23      	ldr	r3, [r4, #32]
 8000c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c40:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c42:	f001 f857 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000c46:	205f      	movs	r0, #95	; 0x5f
 8000c48:	f001 f88c 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c4c:	2060      	movs	r0, #96	; 0x60
 8000c4e:	4632      	mov	r2, r6
 8000c50:	210f      	movs	r1, #15
 8000c52:	f001 f84f 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000c56:	2060      	movs	r0, #96	; 0x60
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000c58:	f001 f884 	bl	8001d64 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f002 f8b3 	bl	8002dc8 <HAL_I2C_Init>
  }
}
 8000c62:	b00a      	add	sp, #40	; 0x28
 8000c64:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000c66:	f043 0302 	orr.w	r3, r3, #2
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000c6a:	a905      	add	r1, sp, #20
 8000c6c:	4822      	ldr	r0, [pc, #136]	; (8000cf8 <I2Cx_Init+0x164>)
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8000c70:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000c72:	9607      	str	r6, [sp, #28]
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	9303      	str	r3, [sp, #12]
 8000c7a:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000c86:	2302      	movs	r3, #2
 8000c88:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000c8e:	f001 fe6b 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000c92:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000c96:	a905      	add	r1, sp, #20
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <I2Cx_Init+0x164>)
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000c9a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000c9c:	f001 fe64 	bl	8002968 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000ca2:	4632      	mov	r2, r6
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	201f      	movs	r0, #31
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cac:	6423      	str	r3, [r4, #64]	; 0x40
 8000cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	9304      	str	r3, [sp, #16]
 8000cb6:	9b04      	ldr	r3, [sp, #16]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000cb8:	6a23      	ldr	r3, [r4, #32]
 8000cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cbe:	6223      	str	r3, [r4, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000cc0:	6a23      	ldr	r3, [r4, #32]
 8000cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cc6:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000cc8:	f001 f814 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000ccc:	201f      	movs	r0, #31
 8000cce:	f001 f849 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000cd2:	2020      	movs	r0, #32
 8000cd4:	4632      	mov	r2, r6
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f001 f80c 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000cdc:	2020      	movs	r0, #32
 8000cde:	e7bb      	b.n	8000c58 <I2Cx_Init+0xc4>
 8000ce0:	200006e4 	.word	0x200006e4
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40006000 	.word	0x40006000
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40912732 	.word	0x40912732
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	40020400 	.word	0x40020400

08000cfc <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000cfc:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000cfe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8000d02:	b085      	sub	sp, #20
 8000d04:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000d06:	9402      	str	r4, [sp, #8]
 8000d08:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000d0c:	9401      	str	r4, [sp, #4]
 8000d0e:	9c08      	ldr	r4, [sp, #32]
 8000d10:	9400      	str	r4, [sp, #0]
 8000d12:	f002 f8c4 	bl	8002e9e <HAL_I2C_Mem_Write>

  /* Check the communication status */
  if(status != HAL_OK)
 8000d16:	4604      	mov	r4, r0
 8000d18:	b128      	cbz	r0, 8000d26 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f002 f8a6 	bl	8002e6c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000d20:	4628      	mov	r0, r5
 8000d22:	f7ff ff37 	bl	8000b94 <I2Cx_Init>
}
 8000d26:	4620      	mov	r0, r4
 8000d28:	b005      	add	sp, #20
 8000d2a:	bd30      	pop	{r4, r5, pc}

08000d2c <I2Cx_ReadMultiple>:
{
 8000d2c:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000d2e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8000d32:	b085      	sub	sp, #20
 8000d34:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000d36:	9402      	str	r4, [sp, #8]
 8000d38:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000d3c:	9401      	str	r4, [sp, #4]
 8000d3e:	9c08      	ldr	r4, [sp, #32]
 8000d40:	9400      	str	r4, [sp, #0]
 8000d42:	f002 f963 	bl	800300c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000d46:	4604      	mov	r4, r0
 8000d48:	b128      	cbz	r0, 8000d56 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f002 f88e 	bl	8002e6c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000d50:	4628      	mov	r0, r5
 8000d52:	f7ff ff1f 	bl	8000b94 <I2Cx_Init>
}
 8000d56:	4620      	mov	r0, r4
 8000d58:	b005      	add	sp, #20
 8000d5a:	bd30      	pop	{r4, r5, pc}

08000d5c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000d5c:	b507      	push	{r0, r1, r2, lr}
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000d5e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000d62:	460a      	mov	r2, r1
 8000d64:	2301      	movs	r3, #1
 8000d66:	4601      	mov	r1, r0
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TS_IO_ReadMultiple+0x18>)
 8000d6a:	f7ff ffdf 	bl	8000d2c <I2Cx_ReadMultiple>
}
 8000d6e:	b003      	add	sp, #12
 8000d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d74:	200006e4 	.word	0x200006e4

08000d78 <OTM8009A_IO_Delay>:
 8000d78:	f000 bd7a 	b.w	8001870 <HAL_Delay>

08000d7c <HDMI_IO_Init>:
  * @brief  Initializes HDMI IO low level.
  * @retval None
  */
void HDMI_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <HDMI_IO_Init+0x8>)
 8000d7e:	f7ff bf09 	b.w	8000b94 <I2Cx_Init>
 8000d82:	bf00      	nop
 8000d84:	200006e4 	.word	0x200006e4

08000d88 <TS_IO_Init>:
 8000d88:	f7ff bff8 	b.w	8000d7c <HDMI_IO_Init>

08000d8c <HDMI_IO_Write>:
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  * @retval None
  */
void HDMI_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d8e:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);  
 8000d90:	2301      	movs	r3, #1
{
 8000d92:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);  
 8000d96:	460a      	mov	r2, r1
 8000d98:	4601      	mov	r1, r0
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9400      	str	r4, [sp, #0]
 8000d9e:	4802      	ldr	r0, [pc, #8]	; (8000da8 <HDMI_IO_Write+0x1c>)
 8000da0:	f7ff ffac 	bl	8000cfc <I2Cx_WriteMultiple>
}
 8000da4:	b004      	add	sp, #16
 8000da6:	bd10      	pop	{r4, pc}
 8000da8:	200006e4 	.word	0x200006e4

08000dac <TS_IO_Write>:
 8000dac:	f7ff bfee 	b.w	8000d8c <HDMI_IO_Write>

08000db0 <HDMI_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t HDMI_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t value = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	aa04      	add	r2, sp, #16
 8000db6:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <HDMI_IO_Read+0x24>)
 8000dc6:	f7ff ffb1 	bl	8000d2c <I2Cx_ReadMultiple>

  return value;   
}
 8000dca:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000dce:	b005      	add	sp, #20
 8000dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd4:	200006e4 	.word	0x200006e4

08000dd8 <TS_IO_Read>:
 8000dd8:	f7ff bfea 	b.w	8000db0 <HDMI_IO_Read>

08000ddc <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8000de0:	4c15      	ldr	r4, [pc, #84]	; (8000e38 <LL_FillBuffer+0x5c>)
{
 8000de2:	4698      	mov	r8, r3
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8000de4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8000de8:	4681      	mov	r9, r0
  hdma2d_discovery.Init.OutputOffset = OffLine;

  hdma2d_discovery.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000dea:	4620      	mov	r0, r4
{
 8000dec:	460e      	mov	r6, r1
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8000dee:	6063      	str	r3, [r4, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000df0:	2300      	movs	r3, #0
{
 8000df2:	4617      	mov	r7, r2
 8000df4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000df6:	60a3      	str	r3, [r4, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8000df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000dfa:	60e3      	str	r3, [r4, #12]
  hdma2d_discovery.Instance = DMA2D;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <LL_FillBuffer+0x60>)
 8000dfe:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000e00:	f001 f9cd 	bl	800219e <HAL_DMA2D_Init>
 8000e04:	b9a0      	cbnz	r0, 8000e30 <LL_FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000e06:	4649      	mov	r1, r9
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f001 fa9b 	bl	8002344 <HAL_DMA2D_ConfigLayer>
 8000e0e:	b978      	cbnz	r0, 8000e30 <LL_FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000e10:	f8cd 8000 	str.w	r8, [sp]
 8000e14:	463b      	mov	r3, r7
 8000e16:	4632      	mov	r2, r6
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f001 f9f6 	bl	800220c <HAL_DMA2D_Start>
 8000e20:	b930      	cbnz	r0, 8000e30 <LL_FillBuffer+0x54>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000e22:	210a      	movs	r1, #10
 8000e24:	4620      	mov	r0, r4
      }
    }
  }
}
 8000e26:	b003      	add	sp, #12
 8000e28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000e2c:	f001 ba08 	b.w	8002240 <HAL_DMA2D_PollForTransfer>
}
 8000e30:	b003      	add	sp, #12
 8000e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e36:	bf00      	nop
 8000e38:	2000096c 	.word	0x2000096c
 8000e3c:	4002b000 	.word	0x4002b000

08000e40 <BSP_LCD_Reset>:
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <BSP_LCD_Reset+0x58>)
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000e4c:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000e50:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000e54:	4c11      	ldr	r4, [pc, #68]	; (8000e9c <BSP_LCD_Reset+0x5c>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e56:	2601      	movs	r6, #1
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000e5c:	a901      	add	r1, sp, #4
 8000e5e:	4620      	mov	r0, r4
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000e60:	9501      	str	r5, [sp, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000e66:	2303      	movs	r3, #3
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e68:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000e6a:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000e6c:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000e6e:	f001 fd7b 	bl	8002968 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e72:	4629      	mov	r1, r5
 8000e74:	2200      	movs	r2, #0
 8000e76:	4620      	mov	r0, r4
 8000e78:	f001 fe60 	bl	8002b3c <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000e7c:	2014      	movs	r0, #20
 8000e7e:	f000 fcf7 	bl	8001870 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000e82:	4632      	mov	r2, r6
 8000e84:	4629      	mov	r1, r5
 8000e86:	4620      	mov	r0, r4
 8000e88:	f001 fe58 	bl	8002b3c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f000 fcef 	bl	8001870 <HAL_Delay>
}
 8000e92:	b006      	add	sp, #24
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40022400 	.word	0x40022400

08000ea0 <BSP_LCD_GetXSize>:
}
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <BSP_LCD_GetXSize+0x8>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000038 	.word	0x20000038

08000eac <BSP_LCD_GetYSize>:
}
 8000eac:	4b01      	ldr	r3, [pc, #4]	; (8000eb4 <BSP_LCD_GetYSize+0x8>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000003c 	.word	0x2000003c

08000eb8 <BSP_LCD_LayerDefaultInit>:
  return (lcd_x_size);
 8000eb8:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <BSP_LCD_LayerDefaultInit+0x64>)
  Layercfg.WindowX0 = 0;
 8000eba:	2300      	movs	r3, #0
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	4604      	mov	r4, r0
  return (lcd_x_size);
 8000ec2:	6810      	ldr	r0, [r2, #0]
  return (lcd_y_size);
 8000ec4:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <BSP_LCD_LayerDefaultInit+0x68>)
  Layercfg.WindowX0 = 0;
 8000ec6:	9301      	str	r3, [sp, #4]
  Layercfg.WindowY0 = 0;
 8000ec8:	9303      	str	r3, [sp, #12]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000eca:	9305      	str	r3, [sp, #20]
  Layercfg.Alpha0 = 0;
 8000ecc:	9307      	str	r3, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8000ece:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8000ed2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8000ed6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000eda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  return (lcd_y_size);
 8000ede:	6812      	ldr	r2, [r2, #0]
  Layercfg.FBStartAdress = FB_Address;
 8000ee0:	910a      	str	r1, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 8000ee2:	21ff      	movs	r1, #255	; 0xff
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ee4:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ee6:	2307      	movs	r3, #7
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000ee8:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000eea:	9204      	str	r2, [sp, #16]
  Layercfg.Alpha = 255;
 8000eec:	9106      	str	r1, [sp, #24]
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000eee:	a901      	add	r1, sp, #4
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000ef0:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000ef2:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <BSP_LCD_LayerDefaultInit+0x6c>)
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ef8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000efa:	f002 fa3b 	bl	8003374 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000efe:	200c      	movs	r0, #12
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <BSP_LCD_LayerDefaultInit+0x70>)
 8000f02:	f04f 31ff 	mov.w	r1, #4294967295
 8000f06:	4360      	muls	r0, r4
 8000f08:	181a      	adds	r2, r3, r0
 8000f0a:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <BSP_LCD_LayerDefaultInit+0x74>)
 8000f0e:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000f10:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f14:	501a      	str	r2, [r3, r0]
}
 8000f16:	b00e      	add	sp, #56	; 0x38
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000038 	.word	0x20000038
 8000f20:	2000003c 	.word	0x2000003c
 8000f24:	200009c4 	.word	0x200009c4
 8000f28:	20000734 	.word	0x20000734
 8000f2c:	20000030 	.word	0x20000030

08000f30 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <BSP_LCD_SetTextColor+0x10>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	230c      	movs	r3, #12
 8000f36:	4353      	muls	r3, r2
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <BSP_LCD_SetTextColor+0x14>)
 8000f3a:	50d0      	str	r0, [r2, r3]
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000730 	.word	0x20000730
 8000f44:	20000734 	.word	0x20000734

08000f48 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <BSP_LCD_SetBackColor+0x10>)
 8000f4a:	210c      	movs	r1, #12
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <BSP_LCD_SetBackColor+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	fb01 2303 	mla	r3, r1, r3, r2
 8000f54:	6058      	str	r0, [r3, #4]
 8000f56:	4770      	bx	lr
 8000f58:	20000730 	.word	0x20000730
 8000f5c:	20000734 	.word	0x20000734

08000f60 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <BSP_LCD_SetFont+0x10>)
 8000f62:	210c      	movs	r1, #12
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <BSP_LCD_SetFont+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	fb01 2303 	mla	r3, r1, r3, r2
 8000f6c:	6098      	str	r0, [r3, #8]
 8000f6e:	4770      	bx	lr
 8000f70:	20000730 	.word	0x20000730
 8000f74:	20000734 	.word	0x20000734

08000f78 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <BSP_LCD_Clear+0x28>)
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <BSP_LCD_Clear+0x2c>)
{
 8000f7c:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f7e:	681c      	ldr	r4, [r3, #0]
 8000f80:	2134      	movs	r1, #52	; 0x34
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <BSP_LCD_Clear+0x30>)
 8000f84:	9001      	str	r0, [sp, #4]
 8000f86:	4620      	mov	r0, r4
 8000f88:	fb01 3104 	mla	r1, r1, r4, r3
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <BSP_LCD_Clear+0x34>)
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8000f98:	f7ff ff20 	bl	8000ddc <LL_FillBuffer>
}
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	20000730 	.word	0x20000730
 8000fa4:	20000038 	.word	0x20000038
 8000fa8:	200009c4 	.word	0x200009c4
 8000fac:	2000003c 	.word	0x2000003c

08000fb0 <BSP_LCD_FillRect>:
{
 8000fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000fb2:	4c0c      	ldr	r4, [pc, #48]	; (8000fe4 <BSP_LCD_FillRect+0x34>)
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000fb4:	2634      	movs	r6, #52	; 0x34
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000fb6:	6825      	ldr	r5, [r4, #0]
  return (lcd_x_size);
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <BSP_LCD_FillRect+0x38>)
 8000fba:	6824      	ldr	r4, [r4, #0]
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000fbc:	fb04 0101 	mla	r1, r4, r1, r0
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <BSP_LCD_FillRect+0x3c>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000fc2:	1aa4      	subs	r4, r4, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000fc4:	fb06 0605 	mla	r6, r6, r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <BSP_LCD_FillRect+0x40>)
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000fca:	6df7      	ldr	r7, [r6, #92]	; 0x5c
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000fcc:	260c      	movs	r6, #12
 8000fce:	436e      	muls	r6, r5
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000fd0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8000fd4:	5980      	ldr	r0, [r0, r6]
 8000fd6:	9400      	str	r4, [sp, #0]
 8000fd8:	9001      	str	r0, [sp, #4]
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fefe 	bl	8000ddc <LL_FillBuffer>
}
 8000fe0:	b003      	add	sp, #12
 8000fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe4:	20000730 	.word	0x20000730
 8000fe8:	20000038 	.word	0x20000038
 8000fec:	200009c4 	.word	0x200009c4
 8000ff0:	20000734 	.word	0x20000734

08000ff4 <DSI_IO_WriteCmd>:
  if(NbrParams <= 1)
 8000ff4:	2801      	cmp	r0, #1
{
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b507      	push	{r0, r1, r2, lr}
  if(NbrParams <= 1)
 8000ffa:	d80a      	bhi.n	8001012 <DSI_IO_WriteCmd+0x1e>
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000ffc:	784a      	ldrb	r2, [r1, #1]
 8000ffe:	780b      	ldrb	r3, [r1, #0]
 8001000:	2100      	movs	r1, #0
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	2215      	movs	r2, #21
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <DSI_IO_WriteCmd+0x30>)
 8001008:	f001 fc39 	bl	800287e <HAL_DSI_ShortWrite>
}
 800100c:	b003      	add	sp, #12
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001012:	9101      	str	r1, [sp, #4]
 8001014:	5c0a      	ldrb	r2, [r1, r0]
 8001016:	2100      	movs	r1, #0
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DSI_IO_WriteCmd+0x30>)
 800101a:	9200      	str	r2, [sp, #0]
 800101c:	2239      	movs	r2, #57	; 0x39
 800101e:	f001 fc3f 	bl	80028a0 <HAL_DSI_LongWrite>
}
 8001022:	e7f3      	b.n	800100c <DSI_IO_WriteCmd+0x18>
 8001024:	20000a6c 	.word	0x20000a6c

08001028 <BSP_LCD_MspInit>:
{
 8001028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <BSP_LCD_MspInit+0xa0>)
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800102c:	2103      	movs	r1, #3
 800102e:	2058      	movs	r0, #88	; 0x58
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001032:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
 8001038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800103a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800103e:	9201      	str	r2, [sp, #4]
 8001040:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8001042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001044:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800104a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800104c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001054:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001058:	631a      	str	r2, [r3, #48]	; 0x30
 800105a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001060:	9202      	str	r2, [sp, #8]
 8001062:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800106a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001072:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8001074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001076:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
 800107c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800107e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001082:	9203      	str	r2, [sp, #12]
 8001084:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8001086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001088:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800108e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001090:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	f000 fe2c 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800109c:	2058      	movs	r0, #88	; 0x58
 800109e:	f000 fe61 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2103      	movs	r1, #3
 80010a6:	205a      	movs	r0, #90	; 0x5a
 80010a8:	f000 fe24 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010ac:	205a      	movs	r0, #90	; 0x5a
 80010ae:	f000 fe59 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2103      	movs	r1, #3
 80010b6:	2062      	movs	r0, #98	; 0x62
 80010b8:	f000 fe1c 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80010bc:	2062      	movs	r0, #98	; 0x62
 80010be:	f000 fe51 	bl	8001d64 <HAL_NVIC_EnableIRQ>
}
 80010c2:	b005      	add	sp, #20
 80010c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c8:	40023800 	.word	0x40023800

080010cc <BSP_LCD_InitEx>:
{
 80010cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi_discovery.Instance = DSI;
 80010d0:	4c5a      	ldr	r4, [pc, #360]	; (800123c <BSP_LCD_InitEx+0x170>)
{
 80010d2:	4607      	mov	r7, r0
  BSP_LCD_Reset();
 80010d4:	f7ff feb4 	bl	8000e40 <BSP_LCD_Reset>
 80010d8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001260 <BSP_LCD_InitEx+0x194>
  BSP_LCD_MspInit();
 80010dc:	f7ff ffa4 	bl	8001028 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 80010e0:	4b57      	ldr	r3, [pc, #348]	; (8001240 <BSP_LCD_InitEx+0x174>)
  HAL_DSI_DeInit(&(hdsi_discovery));
 80010e2:	4620      	mov	r0, r4
 80010e4:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001264 <BSP_LCD_InitEx+0x198>
  hdsi_discovery.Instance = DSI;
 80010e8:	6023      	str	r3, [r4, #0]
  HAL_DSI_DeInit(&(hdsi_discovery));
 80010ea:	f001 fa54 	bl	8002596 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 80010ee:	2364      	movs	r3, #100	; 0x64
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80010f0:	4620      	mov	r0, r4
  dsiPllInit.PLLNDIV  = 100;
 80010f2:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80010f4:	2305      	movs	r3, #5
 80010f6:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60e3      	str	r3, [r4, #12]
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001100:	2304      	movs	r3, #4
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001102:	eb0d 0103 	add.w	r1, sp, r3
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001106:	60a3      	str	r3, [r4, #8]
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001108:	f001 f994 	bl	8002434 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800110c:	2f00      	cmp	r7, #0
 800110e:	f040 808e 	bne.w	800122e <BSP_LCD_InitEx+0x162>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001112:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001116:	f8c9 3000 	str.w	r3, [r9]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800111a:	f44f 7348 	mov.w	r3, #800	; 0x320
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800111e:	4c49      	ldr	r4, [pc, #292]	; (8001244 <BSP_LCD_InitEx+0x178>)
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001120:	2105      	movs	r1, #5
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001122:	f8c8 3000 	str.w	r3, [r8]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001126:	2500      	movs	r5, #0
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001128:	6061      	str	r1, [r4, #4]
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800112a:	2102      	movs	r1, #2
  HACT = lcd_x_size;
 800112c:	f8d9 3000 	ldr.w	r3, [r9]
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001130:	f04f 0a01 	mov.w	sl, #1
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001134:	60e1      	str	r1, [r4, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001136:	f640 71ff 	movw	r1, #4095	; 0xfff
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800113a:	6123      	str	r3, [r4, #16]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800113c:	61a1      	str	r1, [r4, #24]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800113e:	2104      	movs	r1, #4
  VACT = lcd_y_size;
 8001140:	f8d8 2000 	ldr.w	r2, [r8]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001144:	62a1      	str	r1, [r4, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001146:	214d      	movs	r1, #77	; 0x4d
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001148:	6422      	str	r2, [r4, #64]	; 0x40
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800114a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 800114e:	62e1      	str	r1, [r4, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001150:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8001154:	f24f 4324 	movw	r3, #62500	; 0xf424
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001158:	4838      	ldr	r0, [pc, #224]	; (800123c <BSP_LCD_InitEx+0x170>)
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 800115a:	4e3b      	ldr	r6, [pc, #236]	; (8001248 <BSP_LCD_InitEx+0x17c>)
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800115c:	434b      	muls	r3, r1
 800115e:	f646 3125 	movw	r1, #27429	; 0x6b25
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001162:	6462      	str	r2, [r4, #68]	; 0x44
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001164:	6025      	str	r5, [r4, #0]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001166:	6225      	str	r5, [r4, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001168:	61e5      	str	r5, [r4, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800116a:	6265      	str	r5, [r4, #36]	; 0x24
  hdsivideo_handle.NumberOfChunks = 0;
 800116c:	6165      	str	r5, [r4, #20]
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800116e:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001172:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001174:	fbb3 f3f1 	udiv	r3, r3, r1
 8001178:	6323      	str	r3, [r4, #48]	; 0x30
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800117a:	230f      	movs	r3, #15
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 800117c:	4621      	mov	r1, r4
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800117e:	63a3      	str	r3, [r4, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001180:	2310      	movs	r3, #16
 8001182:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001184:	64a3      	str	r3, [r4, #72]	; 0x48
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	6523      	str	r3, [r4, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	6563      	str	r3, [r4, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001196:	65a3      	str	r3, [r4, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800119e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a2:	6623      	str	r3, [r4, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80011a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a8:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80011aa:	f001 fa3f 	bl	800262c <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80011ae:	2323      	movs	r3, #35	; 0x23
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <BSP_LCD_InitEx+0x180>)
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80011b2:	f8c6 a014 	str.w	sl, [r6, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80011b6:	61f3      	str	r3, [r6, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80011b8:	f8d9 3000 	ldr.w	r3, [r9]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011bc:	62c5      	str	r5, [r0, #44]	; 0x2c
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80011be:	f103 0223 	add.w	r2, r3, #35	; 0x23
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80011c2:	6633      	str	r3, [r6, #96]	; 0x60
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80011c4:	6272      	str	r2, [r6, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80011c6:	f103 0245 	add.w	r2, r3, #69	; 0x45
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80011ca:	f8d8 3000 	ldr.w	r3, [r8]
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80011ce:	62f2      	str	r2, [r6, #44]	; 0x2c
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80011d0:	6673      	str	r3, [r6, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011d2:	2308      	movs	r3, #8
 80011d4:	6003      	str	r3, [r0, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80011d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011da:	6143      	str	r3, [r0, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80011dc:	2307      	movs	r3, #7
 80011de:	61c3      	str	r3, [r0, #28]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80011e0:	f002 fbb0 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Instance = LTDC;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <BSP_LCD_InitEx+0x184>)
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80011e6:	4621      	mov	r1, r4
 80011e8:	4630      	mov	r0, r6
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80011ea:	f886 5034 	strb.w	r5, [r6, #52]	; 0x34
  hltdc_discovery.Instance = LTDC;
 80011ee:	6033      	str	r3, [r6, #0]
  hltdc_discovery.Init.Backcolor.Green = 0;
 80011f0:	f886 5035 	strb.w	r5, [r6, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80011f4:	f886 5036 	strb.w	r5, [r6, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011f8:	6135      	str	r5, [r6, #16]
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80011fa:	f002 f8e4 	bl	80033c6 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 80011fe:	4630      	mov	r0, r6
 8001200:	f002 f84c 	bl	800329c <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <BSP_LCD_InitEx+0x170>)
 8001206:	f001 fb17 	bl	8002838 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 800120a:	f000 fa01 	bl	8001610 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <BSP_LCD_InitEx+0x188>)
 8001210:	210c      	movs	r1, #12
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <BSP_LCD_InitEx+0x18c>)
 8001214:	681b      	ldr	r3, [r3, #0]
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001216:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].pFont = fonts;
 8001218:	fb01 2303 	mla	r3, r1, r3, r2
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <BSP_LCD_InitEx+0x190>)
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800121e:	4639      	mov	r1, r7
  DrawProp[ActiveLayer].pFont = fonts;
 8001220:	609a      	str	r2, [r3, #8]
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001222:	f7ff fa6b 	bl	80006fc <OTM8009A_Init>
}
 8001226:	4628      	mov	r0, r5
 8001228:	b004      	add	sp, #16
 800122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800122e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001232:	f8c9 3000 	str.w	r3, [r9]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001236:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800123a:	e770      	b.n	800111e <BSP_LCD_InitEx+0x52>
 800123c:	20000a6c 	.word	0x20000a6c
 8001240:	40016c00 	.word	0x40016c00
 8001244:	200007dc 	.word	0x200007dc
 8001248:	200009c4 	.word	0x200009c4
 800124c:	2000074c 	.word	0x2000074c
 8001250:	40016800 	.word	0x40016800
 8001254:	20000730 	.word	0x20000730
 8001258:	20000734 	.word	0x20000734
 800125c:	20000030 	.word	0x20000030
 8001260:	20000038 	.word	0x20000038
 8001264:	2000003c 	.word	0x2000003c

08001268 <BSP_LCD_DrawPixel>:
  return (lcd_x_size);
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <BSP_LCD_DrawPixel+0x20>)
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fb03 0101 	mla	r1, r3, r1, r0
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <BSP_LCD_DrawPixel+0x24>)
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <BSP_LCD_DrawPixel+0x28>)
 8001274:	681b      	ldr	r3, [r3, #0]
{
 8001276:	b510      	push	{r4, lr}
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001278:	2434      	movs	r4, #52	; 0x34
 800127a:	fb04 0303 	mla	r3, r4, r3, r0
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	20000038 	.word	0x20000038
 800128c:	20000730 	.word	0x20000730
 8001290:	200009c4 	.word	0x200009c4

08001294 <BSP_LCD_DisplayChar>:
{
 8001294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <BSP_LCD_DisplayChar+0xc4>)
{
 800129a:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800129c:	f1a2 0420 	sub.w	r4, r2, #32
  for(i = 0; i < height; i++)
 80012a0:	f04f 0800 	mov.w	r8, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012a4:	f8d3 a000 	ldr.w	sl, [r3]
{
 80012a8:	9001      	str	r0, [sp, #4]
 80012aa:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012ac:	210c      	movs	r1, #12
 80012ae:	482b      	ldr	r0, [pc, #172]	; (800135c <BSP_LCD_DisplayChar+0xc8>)
 80012b0:	fb01 010a 	mla	r1, r1, sl, r0
 80012b4:	6889      	ldr	r1, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012b6:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80012ba:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 80012be:	f109 0607 	add.w	r6, r9, #7
 80012c2:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012c4:	fb0b f404 	mul.w	r4, fp, r4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012c8:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 80012ca:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
 80012ce:	fb06 2404 	mla	r4, r6, r4, r2
      if(line & (1 << (width- j + offset- 1)))
 80012d2:	f109 32ff 	add.w	r2, r9, #4294967295
 80012d6:	fa52 f380 	uxtab	r3, r2, r0
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 80012de:	45d8      	cmp	r8, fp
 80012e0:	eb03 0208 	add.w	r2, r3, r8
 80012e4:	b293      	uxth	r3, r2
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	d302      	bcc.n	80012f0 <BSP_LCD_DisplayChar+0x5c>
}
 80012ea:	b005      	add	sp, #20
 80012ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80012f0:	2e01      	cmp	r6, #1
 80012f2:	d009      	beq.n	8001308 <BSP_LCD_DisplayChar+0x74>
 80012f4:	2e02      	cmp	r6, #2
 80012f6:	d00f      	beq.n	8001318 <BSP_LCD_DisplayChar+0x84>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80012f8:	7865      	ldrb	r5, [r4, #1]
 80012fa:	7822      	ldrb	r2, [r4, #0]
 80012fc:	022d      	lsls	r5, r5, #8
 80012fe:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8001302:	78a2      	ldrb	r2, [r4, #2]
 8001304:	4315      	orrs	r5, r2
 8001306:	e000      	b.n	800130a <BSP_LCD_DisplayChar+0x76>
      line =  pchar[0];
 8001308:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 800130a:	2700      	movs	r7, #0
 800130c:	45b9      	cmp	r9, r7
 800130e:	d808      	bhi.n	8001322 <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 8001310:	f108 0801 	add.w	r8, r8, #1
 8001314:	4434      	add	r4, r6
 8001316:	e7e1      	b.n	80012dc <BSP_LCD_DisplayChar+0x48>
      line =  (pchar[0]<< 8) | pchar[1];
 8001318:	7822      	ldrb	r2, [r4, #0]
 800131a:	7865      	ldrb	r5, [r4, #1]
 800131c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8001320:	e7f3      	b.n	800130a <BSP_LCD_DisplayChar+0x76>
      if(line & (1 << (width- j + offset- 1)))
 8001322:	9b03      	ldr	r3, [sp, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	1bd9      	subs	r1, r3, r7
 8001328:	408a      	lsls	r2, r1
 800132a:	422a      	tst	r2, r5
 800132c:	f04f 020c 	mov.w	r2, #12
 8001330:	d00b      	beq.n	800134a <BSP_LCD_DisplayChar+0xb6>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	fb02 f20a 	mul.w	r2, r2, sl
 8001338:	19d8      	adds	r0, r3, r7
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <BSP_LCD_DisplayChar+0xc8>)
 800133c:	589a      	ldr	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800133e:	9900      	ldr	r1, [sp, #0]
 8001340:	b280      	uxth	r0, r0
 8001342:	f7ff ff91 	bl	8001268 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001346:	3701      	adds	r7, #1
 8001348:	e7e0      	b.n	800130c <BSP_LCD_DisplayChar+0x78>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <BSP_LCD_DisplayChar+0xc8>)
 800134c:	fb02 320a 	mla	r2, r2, sl, r3
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	6852      	ldr	r2, [r2, #4]
 8001354:	19d8      	adds	r0, r3, r7
 8001356:	e7f2      	b.n	800133e <BSP_LCD_DisplayChar+0xaa>
 8001358:	20000730 	.word	0x20000730
 800135c:	20000734 	.word	0x20000734

08001360 <BSP_LCD_DisplayStringAt>:
{
 8001360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001364:	460e      	mov	r6, r1
 8001366:	4604      	mov	r4, r0
 8001368:	4615      	mov	r5, r2
  uint8_t  *ptr = Text;
 800136a:	4611      	mov	r1, r2
 800136c:	1b48      	subs	r0, r1, r5
  while (*ptr++) size ++ ;
 800136e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001372:	2a00      	cmp	r2, #0
 8001374:	d1fa      	bne.n	800136c <BSP_LCD_DisplayStringAt+0xc>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001376:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <BSP_LCD_DisplayStringAt+0x8c>)
 8001378:	270c      	movs	r7, #12
  return (lcd_x_size);
 800137a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80013f4 <BSP_LCD_DisplayStringAt+0x94>
  switch (Mode)
 800137e:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001380:	6811      	ldr	r1, [r2, #0]
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <BSP_LCD_DisplayStringAt+0x90>)
 8001384:	fb07 2101 	mla	r1, r7, r1, r2
 8001388:	f8d8 2000 	ldr.w	r2, [r8]
 800138c:	688f      	ldr	r7, [r1, #8]
 800138e:	88b9      	ldrh	r1, [r7, #4]
 8001390:	fbb2 f2f1 	udiv	r2, r2, r1
  switch (Mode)
 8001394:	d016      	beq.n	80013c4 <BSP_LCD_DisplayStringAt+0x64>
 8001396:	2b02      	cmp	r3, #2
 8001398:	d01b      	beq.n	80013d2 <BSP_LCD_DisplayStringAt+0x72>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800139a:	b223      	sxth	r3, r4
    refcolumn = 1;
 800139c:	46a9      	mov	r9, r5
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bfd8      	it	le
 80013a2:	2401      	movle	r4, #1
 80013a4:	eba9 0305 	sub.w	r3, r9, r5
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013a8:	88b8      	ldrh	r0, [r7, #4]
 80013aa:	f8d8 1000 	ldr.w	r1, [r8]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f819 2b01 	ldrb.w	r2, [r9], #1
 80013b4:	fb00 1313 	mls	r3, r0, r3, r1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4283      	cmp	r3, r0
 80013bc:	d300      	bcc.n	80013c0 <BSP_LCD_DisplayStringAt+0x60>
 80013be:	b96a      	cbnz	r2, 80013dc <BSP_LCD_DisplayStringAt+0x7c>
 80013c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80013c4:	1a12      	subs	r2, r2, r0
 80013c6:	fb01 f002 	mul.w	r0, r1, r2
 80013ca:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80013ce:	b284      	uxth	r4, r0
      break;
 80013d0:	e7e3      	b.n	800139a <BSP_LCD_DisplayStringAt+0x3a>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80013d2:	1a10      	subs	r0, r2, r0
 80013d4:	fb10 f001 	smulbb	r0, r0, r1
 80013d8:	1b00      	subs	r0, r0, r4
 80013da:	e7f8      	b.n	80013ce <BSP_LCD_DisplayStringAt+0x6e>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80013dc:	4620      	mov	r0, r4
 80013de:	4631      	mov	r1, r6
 80013e0:	f7ff ff58 	bl	8001294 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80013e4:	88b8      	ldrh	r0, [r7, #4]
 80013e6:	4420      	add	r0, r4
 80013e8:	b284      	uxth	r4, r0
 80013ea:	e7db      	b.n	80013a4 <BSP_LCD_DisplayStringAt+0x44>
 80013ec:	20000730 	.word	0x20000730
 80013f0:	20000734 	.word	0x20000734
 80013f4:	20000038 	.word	0x20000038

080013f8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80013f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80013fc:	4c22      	ldr	r4, [pc, #136]	; (8001488 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80013fe:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001400:	4d22      	ldr	r5, [pc, #136]	; (800148c <BSP_SDRAM_Initialization_sequence+0x94>)
  __IO uint32_t tmpmrd = 0;
 8001402:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001406:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001408:	4621      	mov	r1, r4
{
 800140a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800140c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001410:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001412:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8001416:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8001418:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800141c:	e884 00c0 	stmia.w	r4, {r6, r7}
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001420:	f002 fd5f 	bl	8003ee2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001424:	4630      	mov	r0, r6
 8001426:	f000 fa23 	bl	8001870 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800142a:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800142c:	4621      	mov	r1, r4
 800142e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001432:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001434:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8001436:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800143a:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800143e:	f002 fd50 	bl	8003ee2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001442:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001444:	4621      	mov	r1, r4
 8001446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144a:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 800144c:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001450:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8001454:	2308      	movs	r3, #8
 8001456:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001458:	f002 fd43 	bl	8003ee2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800145c:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001464:	4621      	mov	r1, r4
 8001466:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001468:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800146a:	2304      	movs	r3, #4
  Command.AutoRefreshNumber      = 1;
 800146c:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800146e:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.ModeRegisterDefinition = tmpmrd;
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001476:	f002 fd34 	bl	8003ee2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800147a:	4649      	mov	r1, r9
 800147c:	4628      	mov	r0, r5
 800147e:	f002 fd47 	bl	8003f10 <HAL_SDRAM_ProgramRefreshRate>
}
 8001482:	b003      	add	sp, #12
 8001484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001488:	20000848 	.word	0x20000848
 800148c:	20000a88 	.word	0x20000a88

08001490 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <BSP_SDRAM_MspInit+0x15c>)
 8001492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001494:	f042 0201 	orr.w	r2, r2, #1
{  
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
{  
 800149c:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 800149e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  __HAL_RCC_GPIOI_CLK_ENABLE();
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80014a0:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80014a2:	ac0e      	add	r4, sp, #56	; 0x38
{  
 80014a4:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 80014a6:	f002 0201 	and.w	r2, r2, #1
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80014aa:	4851      	ldr	r0, [pc, #324]	; (80015f0 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80014ac:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80014b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
 80014ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014bc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80014c0:	9202      	str	r2, [sp, #8]
 80014c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c6:	f042 0208 	orr.w	r2, r2, #8
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
 80014cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ce:	f002 0208 	and.w	r2, r2, #8
 80014d2:	9203      	str	r2, [sp, #12]
 80014d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d8:	f042 0210 	orr.w	r2, r2, #16
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
 80014de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e0:	f002 0210 	and.w	r2, r2, #16
 80014e4:	9204      	str	r2, [sp, #16]
 80014e6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
 80014f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f2:	f002 0220 	and.w	r2, r2, #32
 80014f6:	9205      	str	r2, [sp, #20]
 80014f8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001504:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001508:	9206      	str	r2, [sp, #24]
 800150a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
 8001514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001516:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800151a:	9207      	str	r2, [sp, #28]
 800151c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001528:	970c      	str	r7, [sp, #48]	; 0x30
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	9308      	str	r3, [sp, #32]
 8001530:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001536:	2301      	movs	r3, #1
 8001538:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800153a:	230c      	movs	r3, #12
 800153c:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800153e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001542:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001546:	4621      	mov	r1, r4
 8001548:	f001 fa0e 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800154c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001550:	4621      	mov	r1, r4
 8001552:	4828      	ldr	r0, [pc, #160]	; (80015f4 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001554:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001556:	f001 fa07 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800155a:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800155e:	4621      	mov	r1, r4
 8001560:	4825      	ldr	r0, [pc, #148]	; (80015f8 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001562:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001564:	f001 fa00 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001568:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800156c:	4621      	mov	r1, r4
 800156e:	4823      	ldr	r0, [pc, #140]	; (80015fc <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001570:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001572:	f001 f9f9 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001576:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800157a:	4621      	mov	r1, r4
 800157c:	4820      	ldr	r0, [pc, #128]	; (8001600 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800157e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001580:	f001 f9f2 	bl	8002968 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001584:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001588:	4621      	mov	r1, r4
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800158c:	4c1e      	ldr	r4, [pc, #120]	; (8001608 <BSP_SDRAM_MspInit+0x178>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800158e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001590:	f001 f9ea 	bl	8002968 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001594:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001596:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001598:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800159a:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800159c:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800159e:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80015a2:	6065      	str	r5, [r4, #4]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80015a4:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.Mode                = DMA_NORMAL;
 80015aa:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015ac:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80015b2:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b4:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80015ba:	62a7      	str	r7, [r4, #40]	; 0x28
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015bc:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80015be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80015c2:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80015c4:	6223      	str	r3, [r4, #32]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <BSP_SDRAM_MspInit+0x17c>)
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80015c8:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80015ca:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80015cc:	f000 fc82 	bl	8001ed4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80015d0:	4620      	mov	r0, r4
 80015d2:	f000 fc01 	bl	8001dd8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80015d6:	462a      	mov	r2, r5
 80015d8:	210f      	movs	r1, #15
 80015da:	2038      	movs	r0, #56	; 0x38
 80015dc:	f000 fb8a 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80015e0:	2038      	movs	r0, #56	; 0x38
 80015e2:	f000 fbbf 	bl	8001d64 <HAL_NVIC_EnableIRQ>
}
 80015e6:	b00f      	add	sp, #60	; 0x3c
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40021400 	.word	0x40021400
 80015fc:	40021800 	.word	0x40021800
 8001600:	40021c00 	.word	0x40021c00
 8001604:	40022000 	.word	0x40022000
 8001608:	20000874 	.word	0x20000874
 800160c:	40026410 	.word	0x40026410

08001610 <BSP_SDRAM_Init>:
{ 
 8001610:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001612:	4c1a      	ldr	r4, [pc, #104]	; (800167c <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 8001614:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 8001618:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 800161a:	4d1a      	ldr	r5, [pc, #104]	; (8001684 <BSP_SDRAM_Init+0x74>)
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800161c:	4620      	mov	r0, r4
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800161e:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8001620:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 8001622:	6069      	str	r1, [r5, #4]
  Timing.LoadToActiveDelay    = 2;
 8001624:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 8001626:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8001628:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800162a:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800162c:	2320      	movs	r3, #32
  Timing.RowCycleDelay        = 7;
 800162e:	60e9      	str	r1, [r5, #12]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001630:	2100      	movs	r1, #0
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001632:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001634:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001636:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001638:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800163a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800163e:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001640:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001642:	f44f 6300 	mov.w	r3, #2048	; 0x800
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001646:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001648:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800164e:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001650:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001652:	62a1      	str	r1, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 8001654:	60aa      	str	r2, [r5, #8]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001656:	f7ff ff1b 	bl	8001490 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f002 fc20 	bl	8003ea2 <HAL_SDRAM_Init>
 8001662:	4c09      	ldr	r4, [pc, #36]	; (8001688 <BSP_SDRAM_Init+0x78>)
 8001664:	b138      	cbz	r0, 8001676 <BSP_SDRAM_Init+0x66>
    sdramstatus = SDRAM_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800166a:	f240 6003 	movw	r0, #1539	; 0x603
 800166e:	f7ff fec3 	bl	80013f8 <BSP_SDRAM_Initialization_sequence>
}
 8001672:	7820      	ldrb	r0, [r4, #0]
 8001674:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8001676:	7020      	strb	r0, [r4, #0]
 8001678:	e7f7      	b.n	800166a <BSP_SDRAM_Init+0x5a>
 800167a:	bf00      	nop
 800167c:	20000a88 	.word	0x20000a88
 8001680:	a0000140 	.word	0xa0000140
 8001684:	20000858 	.word	0x20000858
 8001688:	20000040 	.word	0x20000040

0800168c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8001690:	4c16      	ldr	r4, [pc, #88]	; (80016ec <BSP_TS_Init+0x60>)
{
 8001692:	4681      	mov	r9, r0
  ft6x06_ts_drv.Init(I2C_Address);
 8001694:	4e16      	ldr	r6, [pc, #88]	; (80016f0 <BSP_TS_Init+0x64>)
{
 8001696:	4688      	mov	r8, r1
  ft6x06_ts_drv.Init(I2C_Address);
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	4627      	mov	r7, r4
 800169c:	7830      	ldrb	r0, [r6, #0]
 800169e:	4635      	mov	r5, r6
 80016a0:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	2054      	movs	r0, #84	; 0x54
 80016a6:	4798      	blx	r3
  if(ts_id1 != FT6206_ID_VALUE)
 80016a8:	b2c0      	uxtb	r0, r0
 80016aa:	2811      	cmp	r0, #17
 80016ac:	d00a      	beq.n	80016c4 <BSP_TS_Init+0x38>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	2070      	movs	r0, #112	; 0x70
 80016b2:	4798      	blx	r3
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80016b4:	2370      	movs	r3, #112	; 0x70
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80016b6:	b2c0      	uxtb	r0, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80016b8:	7033      	strb	r3, [r6, #0]
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80016ba:	2811      	cmp	r0, #17
 80016bc:	d004      	beq.n	80016c8 <BSP_TS_Init+0x3c>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80016be:	2003      	movs	r0, #3
 80016c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 80016c4:	2354      	movs	r3, #84	; 0x54
 80016c6:	7033      	strb	r3, [r6, #0]
    if(ts_SizeX < ts_SizeY)
 80016c8:	45c1      	cmp	r9, r8
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <BSP_TS_Init+0x68>)
    ts_driver = &ft6x06_ts_drv;
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <BSP_TS_Init+0x6c>)
      ts_orientation = TS_SWAP_NONE;                
 80016ce:	bf34      	ite	cc
 80016d0:	2201      	movcc	r2, #1
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80016d2:	220c      	movcs	r2, #12
      ts_driver->Reset(I2C_Address);
 80016d4:	7828      	ldrb	r0, [r5, #0]
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80016d6:	701a      	strb	r2, [r3, #0]
      ts_driver->Reset(I2C_Address);
 80016d8:	68bb      	ldr	r3, [r7, #8]
    ts_driver = &ft6x06_ts_drv;
 80016da:	6027      	str	r7, [r4, #0]
      ts_driver->Reset(I2C_Address);
 80016dc:	4798      	blx	r3
      ts_driver->Start(I2C_Address);
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	7828      	ldrb	r0, [r5, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 80016e6:	2000      	movs	r0, #0
  }

  return (ts_status);
}
 80016e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	200008d4 	.word	0x200008d4
 80016f4:	200008ec 	.word	0x200008ec
 80016f8:	200008e8 	.word	0x200008e8

080016fc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80016fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8001700:	4f35      	ldr	r7, [pc, #212]	; (80017d8 <BSP_TS_GetState+0xdc>)
{
 8001702:	4680      	mov	r8, r0
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8001704:	4c35      	ldr	r4, [pc, #212]	; (80017dc <BSP_TS_GetState+0xe0>)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	7820      	ldrb	r0, [r4, #0]
 800170a:	46a3      	mov	fp, r4
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	4798      	blx	r3
 8001710:	f888 0000 	strb.w	r0, [r8]
  if(TS_State->touchDetected)
 8001714:	b150      	cbz	r0, 800172c <BSP_TS_GetState+0x30>
 8001716:	f108 0902 	add.w	r9, r8, #2
 800171a:	ac01      	add	r4, sp, #4
 800171c:	466d      	mov	r5, sp
 800171e:	2600      	movs	r6, #0
      if(ts_orientation & TS_SWAP_Y)
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8001720:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80017e4 <BSP_TS_GetState+0xe8>
    for(index=0; index < TS_State->touchDetected; index++)
 8001724:	f898 3000 	ldrb.w	r3, [r8]
 8001728:	429e      	cmp	r6, r3
 800172a:	d303      	bcc.n	8001734 <BSP_TS_GetState+0x38>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 800172c:	2000      	movs	r0, #0
 800172e:	b003      	add	sp, #12
 8001730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4629      	mov	r1, r5
 8001738:	4622      	mov	r2, r4
 800173a:	f89b 0000 	ldrb.w	r0, [fp]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	3402      	adds	r4, #2
 8001742:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <BSP_TS_GetState+0xe4>)
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8001746:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80017e8 <BSP_TS_GetState+0xec>
 800174a:	3502      	adds	r5, #2
      if(ts_orientation & TS_SWAP_XY)
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	0710      	lsls	r0, r2, #28
        tmp = Raw_x[index];
 8001750:	bf41      	itttt	mi
 8001752:	f835 3c02 	ldrhmi.w	r3, [r5, #-2]
        Raw_x[index] = Raw_y[index]; 
 8001756:	f834 1c02 	ldrhmi.w	r1, [r4, #-2]
        Raw_y[index] = tmp;
 800175a:	f824 3c02 	strhmi.w	r3, [r4, #-2]
        Raw_x[index] = Raw_y[index]; 
 800175e:	f825 1c02 	strhmi.w	r1, [r5, #-2]
      if(ts_orientation & TS_SWAP_X)
 8001762:	0791      	lsls	r1, r2, #30
 8001764:	ea4f 0186 	mov.w	r1, r6, lsl #2
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8001768:	bf41      	itttt	mi
 800176a:	f835 3c02 	ldrhmi.w	r3, [r5, #-2]
 800176e:	f5c3 7347 	rsbmi	r3, r3, #796	; 0x31c
 8001772:	3303      	addmi	r3, #3
 8001774:	f825 3c02 	strhmi.w	r3, [r5, #-2]
      if(ts_orientation & TS_SWAP_Y)
 8001778:	0753      	lsls	r3, r2, #29
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800177a:	f835 ec02 	ldrh.w	lr, [r5, #-2]
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800177e:	bf48      	it	mi
 8001780:	f834 3c02 	ldrhmi.w	r3, [r4, #-2]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8001784:	f851 200c 	ldr.w	r2, [r1, ip]
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8001788:	bf42      	ittt	mi
 800178a:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 800178e:	3301      	addmi	r3, #1
 8001790:	f824 3c02 	strhmi.w	r3, [r4, #-2]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8001794:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    for(index=0; index < TS_State->touchDetected; index++)
 8001798:	3601      	adds	r6, #1
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800179a:	f834 0c02 	ldrh.w	r0, [r4, #-2]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800179e:	459e      	cmp	lr, r3
 80017a0:	bf8c      	ite	hi
 80017a2:	ebae 0303 	subhi.w	r3, lr, r3
 80017a6:	eba3 030e 	subls.w	r3, r3, lr
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80017aa:	4290      	cmp	r0, r2
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80017ac:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80017ae:	bf8c      	ite	hi
 80017b0:	1a82      	subhi	r2, r0, r2
 80017b2:	1a12      	subls	r2, r2, r0
 80017b4:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 80017b6:	441a      	add	r2, r3
 80017b8:	2a05      	cmp	r2, #5
        _x[index] = Raw_x[index];
 80017ba:	bfc8      	it	gt
 80017bc:	f84a e001 	strgt.w	lr, [sl, r1]
      TS_State->touchX[index] = _x[index];
 80017c0:	f85a 3001 	ldr.w	r3, [sl, r1]
        _y[index] = Raw_y[index];
 80017c4:	bfc8      	it	gt
 80017c6:	f84c 0001 	strgt.w	r0, [ip, r1]
      TS_State->touchX[index] = _x[index];
 80017ca:	f829 3b02 	strh.w	r3, [r9], #2
      TS_State->touchY[index] = _y[index];
 80017ce:	f85c 3001 	ldr.w	r3, [ip, r1]
 80017d2:	f8a9 3002 	strh.w	r3, [r9, #2]
 80017d6:	e7a5      	b.n	8001724 <BSP_TS_GetState+0x28>
 80017d8:	200008e8 	.word	0x200008e8
 80017dc:	200008d4 	.word	0x200008d4
 80017e0:	200008ec 	.word	0x200008ec
 80017e4:	200008d8 	.word	0x200008d8
 80017e8:	200008e0 	.word	0x200008e0

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_InitTick+0x3c>)
{
 80017f0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_InitTick+0x40>)
 80017f4:	7818      	ldrb	r0, [r3, #0]
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80017fe:	6810      	ldr	r0, [r2, #0]
 8001800:	fbb0 f0f3 	udiv	r0, r0, r3
 8001804:	f000 fabc 	bl	8001d80 <HAL_SYSTICK_Config>
 8001808:	4604      	mov	r4, r0
 800180a:	b958      	cbnz	r0, 8001824 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180c:	2d0f      	cmp	r5, #15
 800180e:	d809      	bhi.n	8001824 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	4602      	mov	r2, r0
 8001812:	4629      	mov	r1, r5
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 fa6c 	bl	8001cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_InitTick+0x44>)
 800181e:	4620      	mov	r0, r4
 8001820:	601d      	str	r5, [r3, #0]
 8001822:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001824:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}
 8001828:	20000041 	.word	0x20000041
 800182c:	2000004c 	.word	0x2000004c
 8001830:	20000044 	.word	0x20000044

08001834 <HAL_Init>:
{
 8001834:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001836:	2003      	movs	r0, #3
 8001838:	f000 fa4a 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff ffd5 	bl	80017ec <HAL_InitTick>
  HAL_MspInit();
 8001842:	f004 f991 	bl	8005b68 <HAL_MspInit>
}
 8001846:	2000      	movs	r0, #0
 8001848:	bd08      	pop	{r3, pc}
	...

0800184c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <HAL_IncTick+0x10>)
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_IncTick+0x14>)
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	440b      	add	r3, r1
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000abc 	.word	0x20000abc
 8001860:	20000041 	.word	0x20000041

08001864 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001864:	4b01      	ldr	r3, [pc, #4]	; (800186c <HAL_GetTick+0x8>)
 8001866:	6818      	ldr	r0, [r3, #0]
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000abc 	.word	0x20000abc

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fff6 	bl	8001864 <HAL_GetTick>
 8001878:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800187c:	bf1e      	ittt	ne
 800187e:	4b04      	ldrne	r3, [pc, #16]	; (8001890 <HAL_Delay+0x20>)
 8001880:	781b      	ldrbne	r3, [r3, #0]
 8001882:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	1b40      	subs	r0, r0, r5
 800188a:	4284      	cmp	r4, r0
 800188c:	d8fa      	bhi.n	8001884 <HAL_Delay+0x14>
  {
  }
}
 800188e:	bd38      	pop	{r3, r4, r5, pc}
 8001890:	20000041 	.word	0x20000041

08001894 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001894:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001896:	4604      	mov	r4, r0
 8001898:	2800      	cmp	r0, #0
 800189a:	f000 809b 	beq.w	80019d4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800189e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80018a0:	b925      	cbnz	r5, 80018ac <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a2:	f003 f8c1 	bl	8004a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ae:	06db      	lsls	r3, r3, #27
 80018b0:	f100 808e 	bmi.w	80019d0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ba:	f023 0302 	bic.w	r3, r3, #2
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_ADC_Init+0x144>)
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80018cc:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	6861      	ldr	r1, [r4, #4]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018d6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018d8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018e8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018fa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001908:	4934      	ldr	r1, [pc, #208]	; (80019dc <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800190a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800190e:	428a      	cmp	r2, r1
 8001910:	d052      	beq.n	80019b8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001912:	6899      	ldr	r1, [r3, #8]
 8001914:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001918:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001930:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001932:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001934:	f022 0202 	bic.w	r2, r2, #2
 8001938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001942:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001946:	2a00      	cmp	r2, #0
 8001948:	d03e      	beq.n	80019c8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800194a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800194c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800194e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001952:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001954:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800195c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001964:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8001966:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800196a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800196c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001970:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800197a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800198e:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80019a0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80019b0:	2300      	movs	r3, #0
 80019b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019c6:	e7b2      	b.n	800192e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ce:	e7c9      	b.n	8001964 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
 80019d2:	e7ed      	b.n	80019b0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
}
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
 80019d8:	40012300 	.word	0x40012300
 80019dc:	0f000001 	.word	0x0f000001

080019e0 <HAL_ADC_Start_DMA>:
{
 80019e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019e2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80019e4:	2200      	movs	r2, #0
{
 80019e6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80019e8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80019ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80019ee:	2a01      	cmp	r2, #1
 80019f0:	d073      	beq.n	8001ada <HAL_ADC_Start_DMA+0xfa>
 80019f2:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019f4:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 80019f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019fa:	68aa      	ldr	r2, [r5, #8]
 80019fc:	07d0      	lsls	r0, r2, #31
 80019fe:	d505      	bpl.n	8001a0c <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a00:	68aa      	ldr	r2, [r5, #8]
 8001a02:	07d2      	lsls	r2, r2, #31
 8001a04:	d415      	bmi.n	8001a32 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8001a06:	2000      	movs	r0, #0
}
 8001a08:	b003      	add	sp, #12
 8001a0a:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a0c:	68aa      	ldr	r2, [r5, #8]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a14:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_ADC_Start_DMA+0x100>)
 8001a16:	6810      	ldr	r0, [r2, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_ADC_Start_DMA+0x104>)
 8001a1a:	fbb0 f0f2 	udiv	r0, r0, r2
 8001a1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001a22:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8001a24:	9a01      	ldr	r2, [sp, #4]
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d0ea      	beq.n	8001a00 <HAL_ADC_Start_DMA+0x20>
      counter--;
 8001a2a:	9a01      	ldr	r2, [sp, #4]
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	e7f8      	b.n	8001a24 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8001a32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001a34:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001a38:	f020 0001 	bic.w	r0, r0, #1
 8001a3c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001a40:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a42:	686a      	ldr	r2, [r5, #4]
 8001a44:	0550      	lsls	r0, r2, #21
 8001a46:	d505      	bpl.n	8001a54 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a48:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001a4a:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8001a4e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8001a52:	6420      	str	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a56:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a5a:	d002      	beq.n	8001a62 <HAL_ADC_Start_DMA+0x82>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a5e:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001a62:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001a64:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    __HAL_UNLOCK(hadc);   
 8001a68:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_ADC_Start_DMA+0x108>)
 8001a6e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a70:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_ADC_Start_DMA+0x10c>)
 8001a72:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_ADC_Start_DMA+0x110>)
 8001a76:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a7c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a7e:	686a      	ldr	r2, [r5, #4]
 8001a80:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a84:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a86:	68aa      	ldr	r2, [r5, #8]
 8001a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a8e:	460a      	mov	r2, r1
 8001a90:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8001a94:	f000 fa48 	bl	8001f28 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_ADC_Start_DMA+0x114>)
 8001a9a:	6853      	ldr	r3, [r2, #4]
 8001a9c:	f013 0f1f 	tst.w	r3, #31
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	d108      	bne.n	8001ab6 <HAL_ADC_Start_DMA+0xd6>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aa4:	6898      	ldr	r0, [r3, #8]
 8001aa6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001aaa:	d1ac      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	e7a8      	b.n	8001a08 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ab6:	4910      	ldr	r1, [pc, #64]	; (8001af8 <HAL_ADC_Start_DMA+0x118>)
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	d107      	bne.n	8001acc <HAL_ADC_Start_DMA+0xec>
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001ac2:	d103      	bne.n	8001acc <HAL_ADC_Start_DMA+0xec>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001aca:	6099      	str	r1, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001acc:	6852      	ldr	r2, [r2, #4]
 8001ace:	06d2      	lsls	r2, r2, #27
 8001ad0:	d499      	bmi.n	8001a06 <HAL_ADC_Start_DMA+0x26>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_ADC_Start_DMA+0x11c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d196      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x26>
 8001ad8:	e7e4      	b.n	8001aa4 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 8001ada:	2002      	movs	r0, #2
 8001adc:	e794      	b.n	8001a08 <HAL_ADC_Start_DMA+0x28>
 8001ade:	bf00      	nop
 8001ae0:	2000004c 	.word	0x2000004c
 8001ae4:	000f4240 	.word	0x000f4240
 8001ae8:	08001b25 	.word	0x08001b25
 8001aec:	08001b03 	.word	0x08001b03
 8001af0:	08001b0f 	.word	0x08001b0f
 8001af4:	40012300 	.word	0x40012300
 8001af8:	40012000 	.word	0x40012000
 8001afc:	40012200 	.word	0x40012200

08001b00 <HAL_ADC_ConvHalfCpltCallback>:
 8001b00:	4770      	bx	lr

08001b02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b02:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b04:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b06:	f7ff fffb 	bl	8001b00 <HAL_ADC_ConvHalfCpltCallback>
 8001b0a:	bd08      	pop	{r3, pc}

08001b0c <HAL_ADC_ErrorCallback>:
{
 8001b0c:	4770      	bx	lr

08001b0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b0e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b10:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b16:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b1e:	f7ff fff5 	bl	8001b0c <HAL_ADC_ErrorCallback>
 8001b22:	bd08      	pop	{r3, pc}

08001b24 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b24:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b28:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001b2e:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b30:	d123      	bne.n	8001b7a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	6891      	ldr	r1, [r2, #8]
 8001b3c:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001b40:	d117      	bne.n	8001b72 <ADC_DMAConvCplt+0x4e>
 8001b42:	6999      	ldr	r1, [r3, #24]
 8001b44:	b9a9      	cbnz	r1, 8001b72 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b48:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001b4c:	d002      	beq.n	8001b54 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b4e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b50:	0548      	lsls	r0, r1, #21
 8001b52:	d40e      	bmi.n	8001b72 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b54:	6851      	ldr	r1, [r2, #4]
 8001b56:	f021 0120 	bic.w	r1, r1, #32
 8001b5a:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b66:	04d1      	lsls	r1, r2, #19
 8001b68:	d403      	bmi.n	8001b72 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fe06 	bl	8005784 <HAL_ADC_ConvCpltCallback>
 8001b78:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b7a:	06d2      	lsls	r2, r2, #27
 8001b7c:	d503      	bpl.n	8001b86 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffc4 	bl	8001b0c <HAL_ADC_ErrorCallback>
 8001b84:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4718      	bx	r3

08001b90 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8001b90:	2300      	movs	r3, #0
{
 8001b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8001b94:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001b96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d071      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001b9e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001ba4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001ba6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001baa:	b2ae      	uxth	r6, r5
 8001bac:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001bae:	d931      	bls.n	8001c14 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001bb4:	f04f 0e07 	mov.w	lr, #7
 8001bb8:	68e7      	ldr	r7, [r4, #12]
 8001bba:	3b1e      	subs	r3, #30
 8001bbc:	fa0e fe03 	lsl.w	lr, lr, r3
 8001bc0:	ea27 070e 	bic.w	r7, r7, lr
 8001bc4:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc6:	4f3d      	ldr	r7, [pc, #244]	; (8001cbc <HAL_ADC_ConfigChannel+0x12c>)
 8001bc8:	42bd      	cmp	r5, r7
 8001bca:	d11e      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bcc:	68e3      	ldr	r3, [r4, #12]
 8001bce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bd2:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8001bd4:	684a      	ldr	r2, [r1, #4]
 8001bd6:	2a06      	cmp	r2, #6
 8001bd8:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001bdc:	d82a      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bde:	4413      	add	r3, r2
 8001be0:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001be2:	1f59      	subs	r1, r3, #5
 8001be4:	231f      	movs	r3, #31
 8001be6:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001be8:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bec:	ea27 0303 	bic.w	r3, r7, r3
 8001bf0:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_ADC_ConfigChannel+0x130>)
 8001bfa:	429c      	cmp	r4, r3
 8001bfc:	d039      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001c04:	4618      	mov	r0, r3
}
 8001c06:	b003      	add	sp, #12
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c0a:	68e7      	ldr	r7, [r4, #12]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	433b      	orrs	r3, r7
 8001c12:	e7de      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c14:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001c18:	f04f 0e07 	mov.w	lr, #7
 8001c1c:	6927      	ldr	r7, [r4, #16]
 8001c1e:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c26:	ea27 070e 	bic.w	r7, r7, lr
 8001c2a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c2c:	6927      	ldr	r7, [r4, #16]
 8001c2e:	433b      	orrs	r3, r7
 8001c30:	6123      	str	r3, [r4, #16]
 8001c32:	e7cf      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8001c34:	2a0c      	cmp	r2, #12
 8001c36:	d80e      	bhi.n	8001c56 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c38:	4413      	add	r3, r2
 8001c3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c3c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001c40:	231f      	movs	r3, #31
 8001c42:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	ea21 0303 	bic.w	r3, r1, r3
 8001c4c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c50:	431a      	orrs	r2, r3
 8001c52:	6322      	str	r2, [r4, #48]	; 0x30
 8001c54:	e7d0      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c56:	4413      	add	r3, r2
 8001c58:	221f      	movs	r2, #31
 8001c5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c5c:	3b41      	subs	r3, #65	; 0x41
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c64:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c68:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c6c:	4311      	orrs	r1, r2
 8001c6e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001c70:	e7c2      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c72:	2d12      	cmp	r5, #18
 8001c74:	d107      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_ADC_ConfigChannel+0x134>)
 8001c78:	6853      	ldr	r3, [r2, #4]
 8001c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7e:	6053      	str	r3, [r2, #4]
 8001c80:	e7bd      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8001c82:	2002      	movs	r0, #2
 8001c84:	e7bf      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_ADC_ConfigChannel+0x12c>)
 8001c88:	429d      	cmp	r5, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x100>
 8001c8c:	2d11      	cmp	r5, #17
 8001c8e:	d1b6      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c92:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c94:	684a      	ldr	r2, [r1, #4]
 8001c96:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c9a:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9c:	d1af      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_ADC_ConfigChannel+0x138>)
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_ADC_ConfigChannel+0x13c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ca8:	230a      	movs	r3, #10
 8001caa:	4353      	muls	r3, r2
        counter--;
 8001cac:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001cae:	9b01      	ldr	r3, [sp, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0a4      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8001cb4:	9b01      	ldr	r3, [sp, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	e7f8      	b.n	8001cac <HAL_ADC_ConfigChannel+0x11c>
 8001cba:	bf00      	nop
 8001cbc:	10000012 	.word	0x10000012
 8001cc0:	40012000 	.word	0x40012000
 8001cc4:	40012300 	.word	0x40012300
 8001cc8:	2000004c 	.word	0x2000004c
 8001ccc:	000f4240 	.word	0x000f4240

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001cea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001cec:	60d3      	str	r3, [r2, #12]
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b530      	push	{r4, r5, lr}
 8001cf8:	68dc      	ldr	r4, [r3, #12]
 8001cfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	bf28      	it	cs
 8001d08:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d10:	bf8c      	ite	hi
 8001d12:	3c03      	subhi	r4, #3
 8001d14:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d16:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001d20:	ea01 0103 	and.w	r1, r1, r3
 8001d24:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	fa05 f404 	lsl.w	r4, r5, r4
 8001d2c:	f104 34ff 	add.w	r4, r4, #4294967295
 8001d30:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	ea42 0201 	orr.w	r2, r2, r1
 8001d38:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	db07      	blt.n	8001d4e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d48:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001d4c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	f000 000f 	and.w	r0, r0, #15
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <HAL_NVIC_SetPriority+0x6c>)
 8001d56:	541a      	strb	r2, [r3, r0]
 8001d58:	bd30      	pop	{r4, r5, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	e000ed14 	.word	0xe000ed14

08001d64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d64:	2800      	cmp	r0, #0
 8001d66:	db08      	blt.n	8001d7a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d68:	0942      	lsrs	r2, r0, #5
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f000 001f 	and.w	r0, r0, #31
 8001d70:	fa03 f000 	lsl.w	r0, r3, r0
 8001d74:	4b01      	ldr	r3, [pc, #4]	; (8001d7c <HAL_NVIC_EnableIRQ+0x18>)
 8001d76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	3801      	subs	r0, #1
 8001d82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d86:	d20a      	bcs.n	8001d9e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	21f0      	movs	r1, #240	; 0xf0
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dac:	6803      	ldr	r3, [r0, #0]
 8001dae:	2118      	movs	r1, #24
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001db6:	3a10      	subs	r2, #16
 8001db8:	f023 0303 	bic.w	r3, r3, #3
 8001dbc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001dc2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dc4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dc6:	bf88      	it	hi
 8001dc8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dca:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dcc:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001dce:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	0800b4d5 	.word	0x0800b4d5

08001dd8 <HAL_DMA_Init>:
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fd42 	bl	8001864 <HAL_GetTick>
 8001de0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d071      	beq.n	8001eca <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001de6:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001de8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001dea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001df4:	6813      	ldr	r3, [r2, #0]
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfc:	6821      	ldr	r1, [r4, #0]
 8001dfe:	680b      	ldr	r3, [r1, #0]
 8001e00:	07d8      	lsls	r0, r3, #31
 8001e02:	d43c      	bmi.n	8001e7e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001e04:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e06:	4d32      	ldr	r5, [pc, #200]	; (8001ed0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e08:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e0a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	68e2      	ldr	r2, [r4, #12]
 8001e14:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	6922      	ldr	r2, [r4, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	6962      	ldr	r2, [r4, #20]
 8001e1c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	69e2      	ldr	r2, [r4, #28]
 8001e20:	4303      	orrs	r3, r0
 8001e22:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e24:	6a22      	ldr	r2, [r4, #32]
 8001e26:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e2a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e30:	bf01      	itttt	eq
 8001e32:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001e34:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001e36:	4335      	orreq	r5, r6
 8001e38:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001e3c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001e3e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e40:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001e44:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e48:	d10b      	bne.n	8001e62 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001e4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e4c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001e4e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e50:	b13d      	cbz	r5, 8001e62 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e52:	b9f8      	cbnz	r0, 8001e94 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d02d      	beq.n	8001eb4 <HAL_DMA_Init+0xdc>
 8001e58:	d301      	bcc.n	8001e5e <HAL_DMA_Init+0x86>
 8001e5a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5e:	01ea      	lsls	r2, r5, #7
 8001e60:	d42b      	bmi.n	8001eba <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001e62:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff ffa1 	bl	8001dac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e6c:	233f      	movs	r3, #63	; 0x3f
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e72:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001e74:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e76:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001e78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7e:	f7ff fcf1 	bl	8001864 <HAL_GetTick>
 8001e82:	1b40      	subs	r0, r0, r5
 8001e84:	2805      	cmp	r0, #5
 8001e86:	d9b9      	bls.n	8001dfc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e88:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e94:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001e98:	d113      	bne.n	8001ec2 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001e9a:	2a03      	cmp	r2, #3
 8001e9c:	d8e1      	bhi.n	8001e62 <HAL_DMA_Init+0x8a>
 8001e9e:	a001      	add	r0, pc, #4	; (adr r0, 8001ea4 <HAL_DMA_Init+0xcc>)
 8001ea0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001ea4:	08001ebb 	.word	0x08001ebb
 8001ea8:	08001e5f 	.word	0x08001e5f
 8001eac:	08001ebb 	.word	0x08001ebb
 8001eb0:	08001eb5 	.word	0x08001eb5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001eb8:	d1d3      	bne.n	8001e62 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eba:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebe:	6563      	str	r3, [r4, #84]	; 0x54
 8001ec0:	e7e5      	b.n	8001e8e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001ec2:	2a02      	cmp	r2, #2
 8001ec4:	d9f9      	bls.n	8001eba <HAL_DMA_Init+0xe2>
 8001ec6:	2a03      	cmp	r2, #3
 8001ec8:	e7c8      	b.n	8001e5c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
 8001ece:	bf00      	nop
 8001ed0:	e010803f 	.word	0xe010803f

08001ed4 <HAL_DMA_DeInit>:
{
 8001ed4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	b320      	cbz	r0, 8001f24 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001eda:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001ede:	b2e4      	uxtb	r4, r4
 8001ee0:	2c02      	cmp	r4, #2
 8001ee2:	d01d      	beq.n	8001f20 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001ee4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001ee6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001ef0:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001ef2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001ef4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001ef6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001ef8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001efa:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001efc:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efe:	f7ff ff55 	bl	8001dac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f02:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001f04:	233f      	movs	r3, #63	; 0x3f
 8001f06:	4093      	lsls	r3, r2
 8001f08:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0a:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 8001f0c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001f0e:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001f10:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001f12:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001f14:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001f16:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 8001f18:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001f1c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 8001f20:	4620      	mov	r0, r4
}
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f24:	2001      	movs	r0, #1
 8001f26:	bd38      	pop	{r3, r4, r5, pc}

08001f28 <HAL_DMA_Start_IT>:
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001f2a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001f2e:	2c01      	cmp	r4, #1
 8001f30:	d035      	beq.n	8001f9e <HAL_DMA_Start_IT+0x76>
 8001f32:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f34:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001f36:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001f38:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001f40:	2c01      	cmp	r4, #1
 8001f42:	f04f 0402 	mov.w	r4, #2
 8001f46:	d128      	bne.n	8001f9a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f4c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f50:	6825      	ldr	r5, [r4, #0]
 8001f52:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001f56:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001f58:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5a:	6883      	ldr	r3, [r0, #8]
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d119      	bne.n	8001f94 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001f60:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001f62:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f64:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f66:	233f      	movs	r3, #63	; 0x3f
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	f043 0316 	orr.w	r3, r3, #22
 8001f72:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f74:	6963      	ldr	r3, [r4, #20]
 8001f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f7e:	b11b      	cbz	r3, 8001f88 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001f88:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001f94:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f96:	60e2      	str	r2, [r4, #12]
 8001f98:	e7e4      	b.n	8001f64 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001f9a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001f9e:	2002      	movs	r0, #2
}
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fa4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001fa4:	2300      	movs	r3, #0
{
 8001fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001fa8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001faa:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_DMA_IRQHandler+0x170>)
{
 8001fae:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001fb2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001fb6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	4216      	tst	r6, r2
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fbe:	6801      	ldr	r1, [r0, #0]
 8001fc0:	6808      	ldr	r0, [r1, #0]
 8001fc2:	0740      	lsls	r0, r0, #29
 8001fc4:	d508      	bpl.n	8001fd8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc6:	6808      	ldr	r0, [r1, #0]
 8001fc8:	f020 0004 	bic.w	r0, r0, #4
 8001fcc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fce:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	4216      	tst	r6, r2
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe0:	6821      	ldr	r1, [r4, #0]
 8001fe2:	6949      	ldr	r1, [r1, #20]
 8001fe4:	0609      	lsls	r1, r1, #24
 8001fe6:	d504      	bpl.n	8001ff2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001fec:	f042 0202 	orr.w	r2, r2, #2
 8001ff0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	4216      	tst	r6, r2
 8001ff8:	d008      	beq.n	800200c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	6821      	ldr	r1, [r4, #0]
 8001ffc:	6809      	ldr	r1, [r1, #0]
 8001ffe:	0788      	lsls	r0, r1, #30
 8002000:	d504      	bpl.n	800200c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002002:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002004:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	2210      	movs	r2, #16
 800200e:	409a      	lsls	r2, r3
 8002010:	4216      	tst	r6, r2
 8002012:	d010      	beq.n	8002036 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	0709      	lsls	r1, r1, #28
 800201a:	d50c      	bpl.n	8002036 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800201c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	0350      	lsls	r0, r2, #13
 8002022:	d535      	bpl.n	8002090 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0319      	lsls	r1, r3, #12
 8002028:	d401      	bmi.n	800202e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800202a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800202c:	e000      	b.n	8002030 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800202e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002030:	b10b      	cbz	r3, 8002036 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002032:	4620      	mov	r0, r4
 8002034:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002036:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002038:	2220      	movs	r2, #32
 800203a:	408a      	lsls	r2, r1
 800203c:	4216      	tst	r6, r2
 800203e:	d038      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	06c6      	lsls	r6, r0, #27
 8002046:	d534      	bpl.n	80020b2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002048:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800204a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800204e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002050:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002052:	d125      	bne.n	80020a0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002054:	f022 0216 	bic.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002060:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002062:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002064:	b90a      	cbnz	r2, 800206a <HAL_DMA_IRQHandler+0xc6>
 8002066:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002068:	b11a      	cbz	r2, 8002072 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002072:	233f      	movs	r3, #63	; 0x3f
 8002074:	408b      	lsls	r3, r1
 8002076:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8002078:	2300      	movs	r3, #0
 800207a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800207e:	2301      	movs	r3, #1
 8002080:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002084:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002086:	b10b      	cbz	r3, 800208c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8002088:	4620      	mov	r0, r4
 800208a:	4798      	blx	r3
}
 800208c:	b003      	add	sp, #12
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	05d2      	lsls	r2, r2, #23
 8002094:	d4c9      	bmi.n	800202a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e7c4      	b.n	800202a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a0:	0350      	lsls	r0, r2, #13
 80020a2:	d528      	bpl.n	80020f6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0319      	lsls	r1, r3, #12
 80020a8:	d432      	bmi.n	8002110 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80020aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80020ac:	b10b      	cbz	r3, 80020b2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80020ae:	4620      	mov	r0, r4
 80020b0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0e9      	beq.n	800208c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020ba:	07da      	lsls	r2, r3, #31
 80020bc:	d519      	bpl.n	80020f2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80020be:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80020c0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80020ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020d2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	3301      	adds	r3, #1
 80020da:	429f      	cmp	r7, r3
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	d302      	bcc.n	80020e6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	07db      	lsls	r3, r3, #31
 80020e4:	d4f7      	bmi.n	80020d6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80020e6:	2300      	movs	r3, #0
 80020e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80020f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020f4:	e7c7      	b.n	8002086 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80020fc:	d108      	bne.n	8002110 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	f021 0110 	bic.w	r1, r1, #16
 8002104:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002106:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002108:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800210c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002112:	e7cb      	b.n	80020ac <HAL_DMA_IRQHandler+0x108>
 8002114:	2000004c 	.word	0x2000004c

08002118 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002118:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800211a:	6804      	ldr	r4, [r0, #0]
 800211c:	9d04      	ldr	r5, [sp, #16]
 800211e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002120:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002124:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002128:	4333      	orrs	r3, r6
 800212a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800212c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800212e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002130:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002134:	d130      	bne.n	8002198 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002136:	6886      	ldr	r6, [r0, #8]
 8002138:	b11e      	cbz	r6, 8002142 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800213a:	2e01      	cmp	r6, #1
 800213c:	d103      	bne.n	8002146 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800213e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002142:	63a1      	str	r1, [r4, #56]	; 0x38
 8002144:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002146:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002148:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800214c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002150:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002152:	d107      	bne.n	8002164 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002154:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002156:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002158:	02c9      	lsls	r1, r1, #11
 800215a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800215e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002162:	e7ee      	b.n	8002142 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002164:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002166:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800216a:	d10a      	bne.n	8002182 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800216c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800216e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002170:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002172:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002174:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002178:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800217c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002180:	e7df      	b.n	8002142 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002182:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002184:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002186:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8002188:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800218a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800218e:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002192:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002196:	e7d4      	b.n	8002142 <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002198:	60e1      	str	r1, [r4, #12]
 800219a:	bd70      	pop	{r4, r5, r6, pc}

0800219c <HAL_DMA2D_MspInit>:
 800219c:	4770      	bx	lr

0800219e <HAL_DMA2D_Init>:
{
 800219e:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 80021a0:	4604      	mov	r4, r0
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d030      	beq.n	8002208 <HAL_DMA2D_Init+0x6a>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021a6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80021aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ae:	b91b      	cbnz	r3, 80021b8 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 80021b0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 80021b4:	f7ff fff2 	bl	800219c <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021b8:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021ba:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80021bc:	6920      	ldr	r0, [r4, #16]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80021ca:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021cc:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d2:	f022 0207 	bic.w	r2, r2, #7
 80021d6:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021d8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021da:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021de:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80021e2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80021e6:	430a      	orrs	r2, r1
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80021ea:	6962      	ldr	r2, [r4, #20]
 80021ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ee:	0552      	lsls	r2, r2, #21
 80021f0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80021f4:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021f8:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80021fa:	430a      	orrs	r2, r1
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021fe:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002200:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002202:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8002206:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002208:	2001      	movs	r0, #1
}
 800220a:	bd10      	pop	{r4, pc}

0800220c <HAL_DMA2D_Start>:
{
 800220c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800220e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8002212:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 8002214:	2c01      	cmp	r4, #1
 8002216:	f04f 0402 	mov.w	r4, #2
 800221a:	d00f      	beq.n	800223c <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800221c:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
  __HAL_LOCK(hdma2d);
 8002220:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002222:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002224:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002228:	9400      	str	r4, [sp, #0]
 800222a:	f7ff ff75 	bl	8002118 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800222e:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	4333      	orrs	r3, r6
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	b002      	add	sp, #8
 800223a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800223c:	4620      	mov	r0, r4
 800223e:	e7fb      	b.n	8002238 <HAL_DMA2D_Start+0x2c>

08002240 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8002240:	2300      	movs	r3, #0
{
 8002242:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002244:	9301      	str	r3, [sp, #4]
{
 8002246:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002248:	6803      	ldr	r3, [r0, #0]
{
 800224a:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	07db      	lsls	r3, r3, #31
 8002250:	d417      	bmi.n	8002282 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002258:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800225a:	069e      	lsls	r6, r3, #26
 800225c:	d506      	bpl.n	800226c <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 800225e:	f7ff fb01 	bl	8001864 <HAL_GetTick>
 8002262:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	06d2      	lsls	r2, r2, #27
 800226a:	d543      	bpl.n	80022f4 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8002270:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002272:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002274:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8002276:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800227a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800227e:	b002      	add	sp, #8
 8002280:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002282:	f7ff faef 	bl	8001864 <HAL_GetTick>
 8002286:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	0792      	lsls	r2, r2, #30
 800228e:	d4e0      	bmi.n	8002252 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002294:	9a01      	ldr	r2, [sp, #4]
 8002296:	f012 0f21 	tst.w	r2, #33	; 0x21
 800229a:	d017      	beq.n	80022cc <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800229c:	9a01      	ldr	r2, [sp, #4]
 800229e:	0695      	lsls	r5, r2, #26
 80022a0:	d503      	bpl.n	80022aa <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80022a4:	f042 0202 	orr.w	r2, r2, #2
 80022a8:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022aa:	9a01      	ldr	r2, [sp, #4]
 80022ac:	07d0      	lsls	r0, r2, #31
 80022ae:	d503      	bpl.n	80022b8 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022b8:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022ba:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80022bc:	2304      	movs	r3, #4
        return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80022c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 80022c4:	2300      	movs	r3, #0
 80022c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80022ca:	e7d8      	b.n	800227e <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 80022cc:	1c69      	adds	r1, r5, #1
 80022ce:	d0dc      	beq.n	800228a <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80022d0:	f7ff fac8 	bl	8001864 <HAL_GetTick>
 80022d4:	1b80      	subs	r0, r0, r6
 80022d6:	4285      	cmp	r5, r0
 80022d8:	d301      	bcc.n	80022de <HAL_DMA2D_PollForTransfer+0x9e>
 80022da:	2d00      	cmp	r5, #0
 80022dc:	d1d4      	bne.n	8002288 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022de:	6d63      	ldr	r3, [r4, #84]	; 0x54
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80022e0:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hdma2d);
 80022e8:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80022ea:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 80022ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80022f2:	e7c4      	b.n	800227e <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80022f8:	9a01      	ldr	r2, [sp, #4]
 80022fa:	f012 0f29 	tst.w	r2, #41	; 0x29
 80022fe:	d016      	beq.n	800232e <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002300:	9a01      	ldr	r2, [sp, #4]
 8002302:	0716      	lsls	r6, r2, #28
 8002304:	d503      	bpl.n	800230e <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002306:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002308:	f042 0204 	orr.w	r2, r2, #4
 800230c:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800230e:	9a01      	ldr	r2, [sp, #4]
 8002310:	0695      	lsls	r5, r2, #26
 8002312:	d503      	bpl.n	800231c <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002314:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002316:	f042 0202 	orr.w	r2, r2, #2
 800231a:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800231c:	9a01      	ldr	r2, [sp, #4]
 800231e:	07d0      	lsls	r0, r2, #31
 8002320:	d503      	bpl.n	800232a <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002322:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800232a:	2229      	movs	r2, #41	; 0x29
 800232c:	e7c5      	b.n	80022ba <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 800232e:	1c69      	adds	r1, r5, #1
 8002330:	d099      	beq.n	8002266 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002332:	f7ff fa97 	bl	8001864 <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	4285      	cmp	r5, r0
 800233a:	d3d0      	bcc.n	80022de <HAL_DMA2D_PollForTransfer+0x9e>
 800233c:	2d00      	cmp	r5, #0
 800233e:	d191      	bne.n	8002264 <HAL_DMA2D_PollForTransfer+0x24>
 8002340:	e7cd      	b.n	80022de <HAL_DMA2D_PollForTransfer+0x9e>
	...

08002344 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002344:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002348:	2b01      	cmp	r3, #1
 800234a:	f04f 0302 	mov.w	r3, #2
{
 800234e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002350:	d041      	beq.n	80023d6 <HAL_DMA2D_ConfigLayer+0x92>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002352:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8002354:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002356:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800235a:	fb04 0401 	mla	r4, r4, r1, r0
 800235e:	4f22      	ldr	r7, [pc, #136]	; (80023e8 <HAL_DMA2D_ConfigLayer+0xa4>)
  __HAL_LOCK(hdma2d);
 8002360:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002364:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002368:	0513      	lsls	r3, r2, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800236a:	6a65      	ldr	r5, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800236c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800236e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002374:	432b      	orrs	r3, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002376:	3d09      	subs	r5, #9
 8002378:	2d01      	cmp	r5, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800237a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800237e:	6802      	ldr	r2, [r0, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002380:	d80e      	bhi.n	80023a0 <HAL_DMA2D_ConfigLayer+0x5c>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002382:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8002386:	4333      	orrs	r3, r6
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002388:	b969      	cbnz	r1, 80023a6 <HAL_DMA2D_ConfigLayer+0x62>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800238a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800238c:	4039      	ands	r1, r7
 800238e:	430b      	orrs	r3, r1
 8002390:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002392:	6a03      	ldr	r3, [r0, #32]
 8002394:	6193      	str	r3, [r2, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002396:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800239c:	6293      	str	r3, [r2, #40]	; 0x28
 800239e:	e014      	b.n	80023ca <HAL_DMA2D_ConfigLayer+0x86>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80023a0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80023a4:	b1c9      	cbz	r1, 80023da <HAL_DMA2D_ConfigLayer+0x96>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023a6:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023a8:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023aa:	ea04 0407 	and.w	r4, r4, r7
 80023ae:	ea43 0304 	orr.w	r3, r3, r4
 80023b2:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023b4:	f04f 0318 	mov.w	r3, #24
 80023b8:	fb03 0101 	mla	r1, r3, r1, r0
 80023bc:	6a0b      	ldr	r3, [r1, #32]
 80023be:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023c0:	d803      	bhi.n	80023ca <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80023c2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80023c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023c8:	6213      	str	r3, [r2, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 80023d0:	2300      	movs	r3, #0
 80023d2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 80023d6:	4618      	mov	r0, r3
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023da:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80023dc:	4039      	ands	r1, r7
 80023de:	430b      	orrs	r3, r1
 80023e0:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023e2:	6a03      	ldr	r3, [r0, #32]
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	e7f0      	b.n	80023ca <HAL_DMA2D_ConfigLayer+0x86>
 80023e8:	00ccfff0 	.word	0x00ccfff0

080023ec <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80023ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f0:	4607      	mov	r7, r0
 80023f2:	460d      	mov	r5, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f8:	f7ff fa34 	bl	8001864 <HAL_GetTick>
 80023fc:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002402:	07d2      	lsls	r2, r2, #31
 8002404:	d50a      	bpl.n	800241c <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002406:	ea44 2106 	orr.w	r1, r4, r6, lsl #8
 800240a:	9c06      	ldr	r4, [sp, #24]

  return HAL_OK;
 800240c:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800240e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8002412:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 8002416:	66d9      	str	r1, [r3, #108]	; 0x6c
  return HAL_OK;
 8002418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800241c:	f7ff fa22 	bl	8001864 <HAL_GetTick>
 8002420:	eba0 0008 	sub.w	r0, r0, r8
 8002424:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002428:	d9e9      	bls.n	80023fe <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800242a:	2003      	movs	r0, #3
}
 800242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002430 <HAL_DSI_MspInit>:
 8002430:	4770      	bx	lr
	...

08002434 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002434:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002436:	460d      	mov	r5, r1
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002438:	4604      	mov	r4, r0
 800243a:	2800      	cmp	r0, #0
 800243c:	f000 80a6 	beq.w	800258c <HAL_DSI_Init+0x158>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002440:	7c43      	ldrb	r3, [r0, #17]
 8002442:	b90b      	cbnz	r3, 8002448 <HAL_DSI_Init+0x14>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002444:	f7ff fff4 	bl	8002430 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002448:	2303      	movs	r3, #3
 800244a:	7463      	strb	r3, [r4, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800244c:	2300      	movs	r3, #0
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002456:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800245a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800245e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	9b00      	ldr	r3, [sp, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246a:	f7ff f9fb 	bl	8001864 <HAL_GetTick>
 800246e:	4606      	mov	r6, r0

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8002476:	04d9      	lsls	r1, r3, #19
 8002478:	d577      	bpl.n	800256a <HAL_DSI_Init+0x136>
      return HAL_TIMEOUT;
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800247a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800247e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002482:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002486:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800248a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
 800248e:	e895 0009 	ldmia.w	r5, {r0, r3}
 8002492:	02db      	lsls	r3, r3, #11
 8002494:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8002498:	68a8      	ldr	r0, [r5, #8]
 800249a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800249e:	430b      	orrs	r3, r1
 80024a0:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80024b4:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9b01      	ldr	r3, [sp, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c0:	f7ff f9d0 	bl	8001864 <HAL_GetTick>
 80024c4:	4606      	mov	r6, r0

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80024cc:	05d2      	lsls	r2, r2, #23
 80024ce:	d556      	bpl.n	800257e <HAL_DSI_Init+0x14a>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80024d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80024d4:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80024d6:	f042 0206 	orr.w	r2, r2, #6
 80024da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80024de:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80024e2:	f022 0203 	bic.w	r2, r2, #3
 80024e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80024ea:	6862      	ldr	r2, [r4, #4]
 80024ec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80024f6:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80024f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80024fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002500:	f022 0203 	bic.w	r2, r2, #3
 8002504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002508:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800250c:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800250e:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002510:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800251a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	430a      	orrs	r2, r1
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002520:	6869      	ldr	r1, [r5, #4]
 8002522:	2900      	cmp	r1, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002524:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_DSI_Init+0x15c>)
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002528:	bf08      	it	eq
 800252a:	2101      	moveq	r1, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800252c:	434a      	muls	r2, r1
 800252e:	68a9      	ldr	r1, [r5, #8]
 8002530:	f001 0103 	and.w	r1, r1, #3
 8002534:	408a      	lsls	r2, r1
 8002536:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800253a:	4341      	muls	r1, r0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800253c:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800253e:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002542:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002546:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800254a:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800254e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002552:	430a      	orrs	r2, r1
 8002554:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8002558:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800255c:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002560:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002562:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8002564:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8002566:	7463      	strb	r3, [r4, #17]

  return HAL_OK;
 8002568:	e007      	b.n	800257a <HAL_DSI_Init+0x146>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800256a:	f7ff f97b 	bl	8001864 <HAL_GetTick>
 800256e:	1b80      	subs	r0, r0, r6
 8002570:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002574:	f67f af7c 	bls.w	8002470 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8002578:	2003      	movs	r0, #3
}
 800257a:	b002      	add	sp, #8
 800257c:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800257e:	f7ff f971 	bl	8001864 <HAL_GetTick>
 8002582:	1b80      	subs	r0, r0, r6
 8002584:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002588:	d99d      	bls.n	80024c6 <HAL_DSI_Init+0x92>
 800258a:	e7f5      	b.n	8002578 <HAL_DSI_Init+0x144>
    return HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	e7f4      	b.n	800257a <HAL_DSI_Init+0x146>
 8002590:	003d0900 	.word	0x003d0900

08002594 <HAL_DSI_MspDeInit>:
 8002594:	4770      	bx	lr

08002596 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002596:	b530      	push	{r4, r5, lr}
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002598:	4605      	mov	r5, r0
{
 800259a:	b085      	sub	sp, #20
  if (hdsi == NULL)
 800259c:	2800      	cmp	r0, #0
 800259e:	d042      	beq.n	8002626 <HAL_DSI_DeInit+0x90>
  {
    return HAL_ERROR;
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80025a0:	2303      	movs	r3, #3

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80025a2:	2400      	movs	r4, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 80025a4:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80025a6:	6803      	ldr	r3, [r0, #0]
 80025a8:	9400      	str	r4, [sp, #0]
 80025aa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80025ae:	f022 0208 	bic.w	r2, r2, #8
 80025b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80025b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80025ba:	f002 0208 	and.w	r2, r2, #8
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	9a00      	ldr	r2, [sp, #0]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80025c2:	9401      	str	r4, [sp, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	f002 0201 	and.w	r2, r2, #1
 80025d2:	9201      	str	r2, [sp, #4]
 80025d4:	9a01      	ldr	r2, [sp, #4]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80025d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80025da:	f022 0206 	bic.w	r2, r2, #6
 80025de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80025e2:	9402      	str	r4, [sp, #8]
 80025e4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80025f0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025f4:	f002 0201 	and.w	r2, r2, #1
 80025f8:	9202      	str	r2, [sp, #8]
 80025fa:	9a02      	ldr	r2, [sp, #8]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80025fc:	9403      	str	r4, [sp, #12]
 80025fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002602:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002606:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800260a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800260e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	9b03      	ldr	r3, [sp, #12]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002616:	f7ff ffbd 	bl	8002594 <HAL_DSI_MspDeInit>
  hdsi->State = HAL_DSI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800261a:	4620      	mov	r0, r4
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800261c:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 800261e:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 8002620:	746c      	strb	r4, [r5, #17]
}
 8002622:	b005      	add	sp, #20
 8002624:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
 8002628:	e7fb      	b.n	8002622 <HAL_DSI_DeInit+0x8c>
	...

0800262c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800262c:	7c03      	ldrb	r3, [r0, #16]
 800262e:	2b01      	cmp	r3, #1
{
 8002630:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdsi);
 8002632:	f000 80f9 	beq.w	8002828 <HAL_DSI_ConfigVideoMode+0x1fc>
 8002636:	2301      	movs	r3, #1
  assert_param(IS_DSI_FBTAA(VidCfg->FrameBTAAcknowledgeEnable));
  assert_param(IS_DSI_DE_POLARITY(VidCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(VidCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(VidCfg->HSPolarity));
  /* Check the LooselyPacked variant only in 18-bit mode */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002638:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800263a:	68cd      	ldr	r5, [r1, #12]
  __HAL_LOCK(hdsi);
 800263c:	7403      	strb	r3, [r0, #16]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800263e:	2c03      	cmp	r4, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002640:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002642:	4e7a      	ldr	r6, [pc, #488]	; (800282c <HAL_DSI_ConfigVideoMode+0x200>)
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800264c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	f022 0203 	bic.w	r2, r2, #3
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002662:	ea42 0205 	orr.w	r2, r2, r5
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002666:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800266a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800266c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002670:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002678:	ea42 0205 	orr.w	r2, r2, r5
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800267e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002680:	694a      	ldr	r2, [r1, #20]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002682:	ea05 0506 	and.w	r5, r5, r6
 8002686:	641d      	str	r5, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002688:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800268a:	ea45 0502 	orr.w	r5, r5, r2
 800268e:	641d      	str	r5, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002692:	698d      	ldr	r5, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002694:	ea02 0206 	and.w	r2, r2, r6
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800269a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800269c:	ea42 0205 	orr.w	r2, r2, r5
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80026a0:	680d      	ldr	r5, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	f022 0203 	bic.w	r2, r2, #3
 80026aa:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	ea42 0205 	orr.w	r2, r2, r5
 80026b2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80026b4:	695a      	ldr	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80026b6:	6a0e      	ldr	r6, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80026b8:	f022 0207 	bic.w	r2, r2, #7
 80026bc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80026be:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80026c0:	695d      	ldr	r5, [r3, #20]
 80026c2:	ea42 0206 	orr.w	r2, r2, r6
 80026c6:	69ce      	ldr	r6, [r1, #28]
 80026c8:	ea42 0206 	orr.w	r2, r2, r6
 80026cc:	ea42 0205 	orr.w	r2, r2, r5
 80026d0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	f022 020f 	bic.w	r2, r2, #15
 80026d8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	ea42 0204 	orr.w	r2, r2, r4
 80026e0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80026e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80026ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80026f2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80026f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 80026fa:	d107      	bne.n	800270c <HAL_DSI_ConfigVideoMode+0xe0>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80026fc:	691a      	ldr	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80026fe:	688c      	ldr	r4, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002704:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	4322      	orrs	r2, r4
 800270a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800270c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800270e:	4d48      	ldr	r5, [pc, #288]	; (8002830 <HAL_DSI_ConfigVideoMode+0x204>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002710:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002712:	402c      	ands	r4, r5
 8002714:	649c      	str	r4, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002716:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002718:	4314      	orrs	r4, r2
 800271a:	649c      	str	r4, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800271c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800271e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002720:	402a      	ands	r2, r5
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002722:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002728:	4322      	orrs	r2, r4
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800272a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800272c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800272e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002730:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002734:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002738:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800273a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800273c:	4322      	orrs	r2, r4
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800273e:	4c3d      	ldr	r4, [pc, #244]	; (8002834 <HAL_DSI_ConfigVideoMode+0x208>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002742:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002744:	4022      	ands	r2, r4
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800274a:	432a      	orrs	r2, r5

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800274c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002750:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002752:	4022      	ands	r2, r4
 8002754:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002758:	432a      	orrs	r2, r5
 800275a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800275c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800275e:	4022      	ands	r2, r4
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002760:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002762:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002766:	4322      	orrs	r2, r4
 8002768:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800276a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800276c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002770:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002774:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002778:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800277a:	4322      	orrs	r2, r4

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800277c:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800277e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278a:	4322      	orrs	r2, r4

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800278c:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002796:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800279e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80027a0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027a8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	4322      	orrs	r2, r4

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80027ae:	6d0c      	ldr	r4, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80027b0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80027b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80027ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027bc:	4322      	orrs	r2, r4

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80027be:	6d4c      	ldr	r4, [r1, #84]	; 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80027c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80027ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027cc:	4322      	orrs	r2, r4

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80027ce:	6d8c      	ldr	r4, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80027d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80027da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027dc:	4322      	orrs	r2, r4
 80027de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80027e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80027e2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80027ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ec:	4322      	orrs	r2, r4

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80027ee:	6e0c      	ldr	r4, [r1, #96]	; 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80027f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	4322      	orrs	r2, r4

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80027fe:	6e4c      	ldr	r4, [r1, #100]	; 0x64

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002800:	6e89      	ldr	r1, [r1, #104]	; 0x68
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800280c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280e:	4322      	orrs	r2, r4
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002814:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281c:	430a      	orrs	r2, r1
 800281e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002820:	2300      	movs	r3, #0
 8002822:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8002824:	4618      	mov	r0, r3
 8002826:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8002828:	2002      	movs	r0, #2
}
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	ffffe000 	.word	0xffffe000
 8002830:	fffff000 	.word	0xfffff000
 8002834:	fffffc00 	.word	0xfffffc00

08002838 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002838:	7c03      	ldrb	r3, [r0, #16]
{
 800283a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800283c:	2b01      	cmp	r3, #1
 800283e:	d01c      	beq.n	800287a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002840:	6802      	ldr	r2, [r0, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	6851      	ldr	r1, [r2, #4]
 8002848:	f041 0101 	orr.w	r1, r1, #1
 800284c:	6051      	str	r1, [r2, #4]
 800284e:	6851      	ldr	r1, [r2, #4]
 8002850:	f001 0101 	and.w	r1, r1, #1
 8002854:	9100      	str	r1, [sp, #0]
 8002856:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800285e:	f041 0108 	orr.w	r1, r1, #8
 8002862:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002866:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800286a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800286c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800286e:	f002 0208 	and.w	r2, r2, #8
 8002872:	9201      	str	r2, [sp, #4]
 8002874:	9a01      	ldr	r2, [sp, #4]
}
 8002876:	b002      	add	sp, #8
 8002878:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800287a:	2002      	movs	r0, #2
 800287c:	e7fb      	b.n	8002876 <HAL_DSI_Start+0x3e>

0800287e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800287e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002880:	7c05      	ldrb	r5, [r0, #16]
{
 8002882:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8002884:	2d01      	cmp	r5, #1
 8002886:	d009      	beq.n	800289c <HAL_DSI_ShortWrite+0x1e>
 8002888:	2501      	movs	r5, #1
 800288a:	7405      	strb	r5, [r0, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800288c:	9d06      	ldr	r5, [sp, #24]
 800288e:	9500      	str	r5, [sp, #0]
 8002890:	f7ff fdac 	bl	80023ec <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002894:	2300      	movs	r3, #0
 8002896:	7423      	strb	r3, [r4, #16]

  return status;
}
 8002898:	b003      	add	sp, #12
 800289a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800289c:	2002      	movs	r0, #2
 800289e:	e7fb      	b.n	8002898 <HAL_DSI_ShortWrite+0x1a>

080028a0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80028a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80028a6:	7c03      	ldrb	r3, [r0, #16]
{
 80028a8:	4606      	mov	r6, r0
 80028aa:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 80028ac:	2b01      	cmp	r3, #1
{
 80028ae:	4615      	mov	r5, r2
 80028b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80028b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  __HAL_LOCK(hdsi);
 80028b8:	d053      	beq.n	8002962 <HAL_DSI_LongWrite+0xc2>
 80028ba:	2301      	movs	r3, #1
 80028bc:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80028be:	f7fe ffd1 	bl	8001864 <HAL_GetTick>
 80028c2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80028c4:	6832      	ldr	r2, [r6, #0]
 80028c6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80028c8:	f013 0a01 	ands.w	sl, r3, #1
 80028cc:	d01a      	beq.n	8002904 <HAL_DSI_LongWrite+0x64>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80028ce:	2c03      	cmp	r4, #3
 80028d0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80028d2:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80028d6:	bf28      	it	cs
 80028d8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80028da:	4283      	cmp	r3, r0
 80028dc:	d11e      	bne.n	800291c <HAL_DSI_LongWrite+0x7c>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80028de:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80028e0:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80028e2:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80028e6:	bb18      	cbnz	r0, 8002930 <HAL_DSI_LongWrite+0x90>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80028e8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80028ea:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80028ee:	0223      	lsls	r3, r4, #8
 80028f0:	0224      	lsls	r4, r4, #8
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80028f8:	431d      	orrs	r5, r3
 80028fa:	432c      	orrs	r4, r5
 80028fc:	66d4      	str	r4, [r2, #108]	; 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80028fe:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8002900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002904:	f7fe ffae 	bl	8001864 <HAL_GetTick>
 8002908:	eba0 000b 	sub.w	r0, r0, fp
 800290c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002910:	d9d8      	bls.n	80028c4 <HAL_DSI_LongWrite+0x24>
      __HAL_UNLOCK(hdsi);
 8002912:	f886 a010 	strb.w	sl, [r6, #16]
      return HAL_TIMEOUT;
 8002916:	2003      	movs	r0, #3
 8002918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800291c:	f818 1003 	ldrb.w	r1, [r8, r3]
 8002920:	3301      	adds	r3, #1
 8002922:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 8002926:	fa01 f10e 	lsl.w	r1, r1, lr
 800292a:	ea49 0901 	orr.w	r9, r9, r1
 800292e:	e7d4      	b.n	80028da <HAL_DSI_LongWrite+0x3a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002930:	2804      	cmp	r0, #4
    fifoword = 0U;
 8002932:	f04f 0e00 	mov.w	lr, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002936:	4684      	mov	ip, r0
    for (count = 0U; count < nbBytes; count++)
 8002938:	4671      	mov	r1, lr
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800293a:	bf28      	it	cs
 800293c:	f04f 0c04 	movcs.w	ip, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002940:	f813 8001 	ldrb.w	r8, [r3, r1]
 8002944:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8002948:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800294a:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800294e:	458c      	cmp	ip, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002950:	ea4e 0e08 	orr.w	lr, lr, r8
    for (count = 0U; count < nbBytes; count++)
 8002954:	d1f4      	bne.n	8002940 <HAL_DSI_LongWrite+0xa0>
    hdsi->Instance->GPDR = fifoword;
 8002956:	f8c2 e070 	str.w	lr, [r2, #112]	; 0x70
    uicounter -= nbBytes;
 800295a:	eba0 000c 	sub.w	r0, r0, ip
    pparams += nbBytes;
 800295e:	4463      	add	r3, ip
 8002960:	e7c1      	b.n	80028e6 <HAL_DSI_LongWrite+0x46>
  __HAL_LOCK(hdsi);
 8002962:	2002      	movs	r0, #2
}
 8002964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296c:	680b      	ldr	r3, [r1, #0]
{
 800296e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b34 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002974:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002976:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002978:	4a6c      	ldr	r2, [pc, #432]	; (8002b2c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800297a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002b38 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800297e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8002984:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002988:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800298c:	45b6      	cmp	lr, r6
 800298e:	f040 80b3 	bne.w	8002af8 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002992:	684c      	ldr	r4, [r1, #4]
 8002994:	f024 0710 	bic.w	r7, r4, #16
 8002998:	2f02      	cmp	r7, #2
 800299a:	d116      	bne.n	80029ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800299c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029a0:	f003 0b07 	and.w	fp, r3, #7
 80029a4:	f04f 0c0f 	mov.w	ip, #15
 80029a8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80029ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80029b0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029b4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80029b8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029bc:	690d      	ldr	r5, [r1, #16]
 80029be:	fa05 f50b 	lsl.w	r5, r5, fp
 80029c2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80029c6:	f8ca 5020 	str.w	r5, [sl, #32]
 80029ca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029ce:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80029d0:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029d4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029d8:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029dc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029de:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029e2:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e4:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029e6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029ea:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80029ee:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f2:	d811      	bhi.n	8002a18 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80029f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029f6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80029fa:	68cf      	ldr	r7, [r1, #12]
 80029fc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002a00:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002a04:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a06:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a08:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a0c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002a10:	409f      	lsls	r7, r3
 8002a12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002a16:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002a18:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a1a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a1c:	688f      	ldr	r7, [r1, #8]
 8002a1e:	fa07 f70a 	lsl.w	r7, r7, sl
 8002a22:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002a24:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a26:	00e5      	lsls	r5, r4, #3
 8002a28:	d566      	bpl.n	8002af8 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002a2e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a32:	f003 0e03 	and.w	lr, r3, #3
 8002a36:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002a3e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a42:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002a4a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002a4e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002a52:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8002a56:	9503      	str	r5, [sp, #12]
 8002a58:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a5a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8002a5e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a62:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a66:	4d32      	ldr	r5, [pc, #200]	; (8002b30 <HAL_GPIO_Init+0x1c8>)
 8002a68:	42a8      	cmp	r0, r5
 8002a6a:	d04c      	beq.n	8002b06 <HAL_GPIO_Init+0x19e>
 8002a6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a70:	42a8      	cmp	r0, r5
 8002a72:	d04a      	beq.n	8002b0a <HAL_GPIO_Init+0x1a2>
 8002a74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a78:	42a8      	cmp	r0, r5
 8002a7a:	d048      	beq.n	8002b0e <HAL_GPIO_Init+0x1a6>
 8002a7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a80:	42a8      	cmp	r0, r5
 8002a82:	d046      	beq.n	8002b12 <HAL_GPIO_Init+0x1aa>
 8002a84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a88:	42a8      	cmp	r0, r5
 8002a8a:	d044      	beq.n	8002b16 <HAL_GPIO_Init+0x1ae>
 8002a8c:	4548      	cmp	r0, r9
 8002a8e:	d044      	beq.n	8002b1a <HAL_GPIO_Init+0x1b2>
 8002a90:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a94:	42a8      	cmp	r0, r5
 8002a96:	d042      	beq.n	8002b1e <HAL_GPIO_Init+0x1b6>
 8002a98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a9c:	42a8      	cmp	r0, r5
 8002a9e:	d040      	beq.n	8002b22 <HAL_GPIO_Init+0x1ba>
 8002aa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aa4:	42a8      	cmp	r0, r5
 8002aa6:	d03e      	beq.n	8002b26 <HAL_GPIO_Init+0x1be>
 8002aa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aac:	42a8      	cmp	r0, r5
 8002aae:	bf14      	ite	ne
 8002ab0:	250a      	movne	r5, #10
 8002ab2:	2509      	moveq	r5, #9
 8002ab4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002abc:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ac0:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002ac6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	bf0c      	ite	eq
 8002aca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002acc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ace:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002ad2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002ad4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	bf0c      	ite	eq
 8002ad8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002ada:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002adc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002ae0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002ae2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	bf0c      	ite	eq
 8002ae6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002ae8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aea:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002aec:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002aee:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	bf54      	ite	pl
 8002af2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002af4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002af6:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af8:	3301      	adds	r3, #1
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	f47f af3f 	bne.w	800297e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002b00:	b005      	add	sp, #20
 8002b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b06:	2500      	movs	r5, #0
 8002b08:	e7d4      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b0a:	2501      	movs	r5, #1
 8002b0c:	e7d2      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b0e:	2502      	movs	r5, #2
 8002b10:	e7d0      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b12:	2503      	movs	r5, #3
 8002b14:	e7ce      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b16:	2504      	movs	r5, #4
 8002b18:	e7cc      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b1a:	2505      	movs	r5, #5
 8002b1c:	e7ca      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b1e:	2506      	movs	r5, #6
 8002b20:	e7c8      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b22:	2507      	movs	r5, #7
 8002b24:	e7c6      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b26:	2508      	movs	r5, #8
 8002b28:	e7c4      	b.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002b2a:	bf00      	nop
 8002b2c:	40013c00 	.word	0x40013c00
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40021400 	.word	0x40021400

08002b3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	b10a      	cbz	r2, 8002b42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b3e:	6181      	str	r1, [r0, #24]
 8002b40:	4770      	bx	lr
 8002b42:	0409      	lsls	r1, r1, #16
 8002b44:	e7fb      	b.n	8002b3e <HAL_GPIO_WritePin+0x2>

08002b46 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b46:	6803      	ldr	r3, [r0, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	0791      	lsls	r1, r2, #30
 8002b4c:	d501      	bpl.n	8002b52 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	07d2      	lsls	r2, r2, #31
 8002b56:	d403      	bmi.n	8002b60 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	4770      	bx	lr

08002b62 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002b62:	b530      	push	{r4, r5, lr}
 8002b64:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b66:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002b6a:	6805      	ldr	r5, [r0, #0]
 8002b6c:	4323      	orrs	r3, r4
 8002b6e:	0d64      	lsrs	r4, r4, #21
 8002b70:	6868      	ldr	r0, [r5, #4]
 8002b72:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002b76:	4319      	orrs	r1, r3
 8002b78:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002b80:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002b84:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002b88:	f044 0403 	orr.w	r4, r4, #3
 8002b8c:	ea20 0404 	bic.w	r4, r0, r4
 8002b90:	4321      	orrs	r1, r4
 8002b92:	6069      	str	r1, [r5, #4]
 8002b94:	bd30      	pop	{r4, r5, pc}

08002b96 <I2C_WaitOnFlagUntilTimeout>:
{
 8002b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9a:	9f06      	ldr	r7, [sp, #24]
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	4688      	mov	r8, r1
 8002ba0:	4616      	mov	r6, r2
 8002ba2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba4:	6822      	ldr	r2, [r4, #0]
 8002ba6:	6993      	ldr	r3, [r2, #24]
 8002ba8:	ea38 0303 	bics.w	r3, r8, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	42b3      	cmp	r3, r6
 8002bb4:	d002      	beq.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002bb6:	2000      	movs	r0, #0
}
 8002bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	1c6b      	adds	r3, r5, #1
 8002bbe:	d0f2      	beq.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7fe fe50 	bl	8001864 <HAL_GetTick>
 8002bc4:	1bc0      	subs	r0, r0, r7
 8002bc6:	4285      	cmp	r5, r0
 8002bc8:	d301      	bcc.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x38>
 8002bca:	2d00      	cmp	r5, #0
 8002bcc:	d1ea      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bce:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002bd0:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd2:	f043 0320 	orr.w	r3, r3, #32
 8002bd6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002be4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bec <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bec:	6803      	ldr	r3, [r0, #0]
{
 8002bee:	b570      	push	{r4, r5, r6, lr}
 8002bf0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf2:	6998      	ldr	r0, [r3, #24]
{
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf8:	f010 0010 	ands.w	r0, r0, #16
 8002bfc:	d116      	bne.n	8002c2c <I2C_IsAcknowledgeFailed+0x40>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002c00:	1c69      	adds	r1, r5, #1
 8002c02:	d014      	beq.n	8002c2e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fe fe2e 	bl	8001864 <HAL_GetTick>
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	4285      	cmp	r5, r0
 8002c0c:	d300      	bcc.n	8002c10 <I2C_IsAcknowledgeFailed+0x24>
 8002c0e:	b96d      	cbnz	r5, 8002c2c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c12:	f043 0320 	orr.w	r3, r3, #32
 8002c16:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002c20:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002c26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	6999      	ldr	r1, [r3, #24]
 8002c30:	068a      	lsls	r2, r1, #26
 8002c32:	d5e5      	bpl.n	8002c00 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c34:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c36:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8002c38:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002c3e:	f7ff ff82 	bl	8002b46 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	6853      	ldr	r3, [r2, #4]
 8002c46:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002c4a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002c4e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002c64:	e7db      	b.n	8002c1e <I2C_IsAcknowledgeFailed+0x32>

08002c66 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	4604      	mov	r4, r0
 8002c6a:	460d      	mov	r5, r1
 8002c6c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	079b      	lsls	r3, r3, #30
 8002c74:	d501      	bpl.n	8002c7a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	4632      	mov	r2, r6
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7ff ffb4 	bl	8002bec <I2C_IsAcknowledgeFailed>
 8002c84:	b9a0      	cbnz	r0, 8002cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	1c6a      	adds	r2, r5, #1
 8002c88:	d0f1      	beq.n	8002c6e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fdeb 	bl	8001864 <HAL_GetTick>
 8002c8e:	1b80      	subs	r0, r0, r6
 8002c90:	4285      	cmp	r5, r0
 8002c92:	d301      	bcc.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	d1ea      	bne.n	8002c6e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c9a:	f043 0320 	orr.w	r3, r3, #32
 8002c9e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002cac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002cb0:	2001      	movs	r0, #1
}
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}

08002cb4 <I2C_RequestMemoryWrite>:
{
 8002cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cb6:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <I2C_RequestMemoryWrite+0x60>)
{
 8002cba:	4605      	mov	r5, r0
 8002cbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cbe:	9300      	str	r3, [sp, #0]
{
 8002cc0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc6:	b2fa      	uxtb	r2, r7
 8002cc8:	f7ff ff4b 	bl	8002b62 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ccc:	4632      	mov	r2, r6
 8002cce:	9908      	ldr	r1, [sp, #32]
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f7ff ffc8 	bl	8002c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd6:	b110      	cbz	r0, 8002cde <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
}
 8002cda:	b003      	add	sp, #12
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cde:	2f01      	cmp	r7, #1
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	d10c      	bne.n	8002cfe <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce4:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cec:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cee:	9b08      	ldr	r3, [sp, #32]
 8002cf0:	9600      	str	r6, [sp, #0]
 8002cf2:	f7ff ff50 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002cf6:	3000      	adds	r0, #0
 8002cf8:	bf18      	it	ne
 8002cfa:	2001      	movne	r0, #1
 8002cfc:	e7ed      	b.n	8002cda <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfe:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d00:	9908      	ldr	r1, [sp, #32]
 8002d02:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d06:	4632      	mov	r2, r6
 8002d08:	f7ff ffad 	bl	8002c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d1e3      	bne.n	8002cd8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	e7e7      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x30>
 8002d14:	80002000 	.word	0x80002000

08002d18 <I2C_RequestMemoryRead>:
{
 8002d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d1a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <I2C_RequestMemoryRead+0x60>)
{
 8002d1e:	4605      	mov	r5, r0
 8002d20:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d22:	9300      	str	r3, [sp, #0]
{
 8002d24:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d26:	2300      	movs	r3, #0
 8002d28:	b2fa      	uxtb	r2, r7
 8002d2a:	f7ff ff1a 	bl	8002b62 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	4632      	mov	r2, r6
 8002d30:	9908      	ldr	r1, [sp, #32]
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7ff ff97 	bl	8002c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d38:	b110      	cbz	r0, 8002d40 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d40:	2f01      	cmp	r7, #1
 8002d42:	682b      	ldr	r3, [r5, #0]
 8002d44:	d10c      	bne.n	8002d60 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d46:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d50:	9b08      	ldr	r3, [sp, #32]
 8002d52:	9600      	str	r6, [sp, #0]
 8002d54:	f7ff ff1f 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002d58:	3000      	adds	r0, #0
 8002d5a:	bf18      	it	ne
 8002d5c:	2001      	movne	r0, #1
 8002d5e:	e7ed      	b.n	8002d3c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d60:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	9908      	ldr	r1, [sp, #32]
 8002d64:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d68:	4632      	mov	r2, r6
 8002d6a:	f7ff ff7c 	bl	8002c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d1e3      	bne.n	8002d3a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	e7e7      	b.n	8002d46 <I2C_RequestMemoryRead+0x2e>
 8002d76:	bf00      	nop
 8002d78:	80002000 	.word	0x80002000

08002d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460d      	mov	r5, r1
 8002d82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	069b      	lsls	r3, r3, #26
 8002d8a:	d501      	bpl.n	8002d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d90:	4632      	mov	r2, r6
 8002d92:	4629      	mov	r1, r5
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff ff29 	bl	8002bec <I2C_IsAcknowledgeFailed>
 8002d9a:	b990      	cbnz	r0, 8002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe fd62 	bl	8001864 <HAL_GetTick>
 8002da0:	1b80      	subs	r0, r0, r6
 8002da2:	4285      	cmp	r5, r0
 8002da4:	d301      	bcc.n	8002daa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d1ec      	bne.n	8002d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dac:	f043 0320 	orr.w	r3, r3, #32
 8002db0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	2320      	movs	r3, #32
 8002db4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002dbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
}
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}

08002dc6 <HAL_I2C_MspInit>:
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_I2C_Init>:
{
 8002dc8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002dca:	4604      	mov	r4, r0
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d04a      	beq.n	8002e66 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dd8:	b91b      	cbnz	r3, 8002de2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002dda:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002dde:	f7ff fff2 	bl	8002dc6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de2:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de4:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dea:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df6:	6862      	ldr	r2, [r4, #4]
 8002df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dfc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e08:	d124      	bne.n	8002e54 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e10:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e12:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e14:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e16:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e26:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e28:	6922      	ldr	r2, [r4, #16]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	69a1      	ldr	r1, [r4, #24]
 8002e2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e32:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e34:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e36:	69e2      	ldr	r2, [r4, #28]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e46:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002e52:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e54:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e58:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e5a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e5c:	d1d8      	bne.n	8002e10 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e7d4      	b.n	8002e10 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002e66:	2001      	movs	r0, #1
}
 8002e68:	bd10      	pop	{r4, pc}

08002e6a <HAL_I2C_MspDeInit>:
 8002e6a:	4770      	bx	lr

08002e6c <HAL_I2C_DeInit>:
{
 8002e6c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002e6e:	4604      	mov	r4, r0
 8002e70:	b198      	cbz	r0, 8002e9a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002e72:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	2324      	movs	r3, #36	; 0x24
 8002e76:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002e82:	f7ff fff2 	bl	8002e6a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e86:	2000      	movs	r0, #0
 8002e88:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8002e8a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002e8e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002e98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e9a:	2001      	movs	r0, #1
}
 8002e9c:	bd10      	pop	{r4, pc}

08002e9e <HAL_I2C_Mem_Write>:
{
 8002e9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea2:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eac:	2b20      	cmp	r3, #32
{
 8002eae:	460f      	mov	r7, r1
 8002eb0:	9203      	str	r2, [sp, #12]
 8002eb2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002eb6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	f040 80a5 	bne.w	8003008 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8002ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ec0:	b113      	cbz	r3, 8002ec8 <HAL_I2C_Mem_Write+0x2a>
 8002ec2:	f1ba 0f00 	cmp.w	sl, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ecc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
}
 8002ed0:	b005      	add	sp, #20
 8002ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002ed6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f000 8094 	beq.w	8003008 <HAL_I2C_Mem_Write+0x16a>
 8002ee0:	2501      	movs	r5, #1
 8002ee2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fcbd 	bl	8001864 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eea:	2319      	movs	r3, #25
 8002eec:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002eee:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fe4d 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4681      	mov	r9, r0
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d1e5      	bne.n	8002ece <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f02:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8002f04:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f06:	9601      	str	r6, [sp, #4]
 8002f08:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0e:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f10:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1a:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f1c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002f1e:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f20:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8002f22:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f26:	9a03      	ldr	r2, [sp, #12]
 8002f28:	f7ff fec4 	bl	8002cb4 <I2C_RequestMemoryWrite>
 8002f2c:	b110      	cbz	r0, 8002f34 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8002f2e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002f32:	e7cc      	b.n	8002ece <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2bff      	cmp	r3, #255	; 0xff
 8002f3a:	d955      	bls.n	8002fe8 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f3c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f42:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f44:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f46:	4639      	mov	r1, r7
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f7ff fe0a 	bl	8002b62 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4e:	4632      	mov	r2, r6
 8002f50:	4641      	mov	r1, r8
 8002f52:	4620      	mov	r0, r4
 8002f54:	f7ff fe87 	bl	8002c66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1b8      	bne.n	8002ece <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f64:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002f66:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002f68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f6c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002f6e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002f70:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002f72:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002f74:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f78:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	b1ab      	cbz	r3, 8002faa <HAL_I2C_Mem_Write+0x10c>
 8002f7e:	b9a2      	cbnz	r2, 8002faa <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f80:	9600      	str	r6, [sp, #0]
 8002f82:	4643      	mov	r3, r8
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff fe05 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d19e      	bne.n	8002ece <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2bff      	cmp	r3, #255	; 0xff
 8002f96:	d92f      	bls.n	8002ff8 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f98:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7ff fddc 	bl	8002b62 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002faa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1cd      	bne.n	8002f4e <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff fee0 	bl	8002d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d186      	bne.n	8002ece <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002fcc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002fd0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002fde:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fe2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002fe6:	e773      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002fe8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fee:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	e7a6      	b.n	8002f46 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8002ff8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ffe:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003000:	b292      	uxth	r2, r2
 8003002:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	e7cc      	b.n	8002fa2 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8003008:	2002      	movs	r0, #2
 800300a:	e761      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x32>

0800300c <HAL_I2C_Mem_Read>:
{
 800300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003010:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003016:	b085      	sub	sp, #20
 8003018:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800301a:	2b20      	cmp	r3, #32
{
 800301c:	460f      	mov	r7, r1
 800301e:	9203      	str	r2, [sp, #12]
 8003020:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003024:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	f040 80a9 	bne.w	800317e <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 800302c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800302e:	b113      	cbz	r3, 8003036 <HAL_I2C_Mem_Read+0x2a>
 8003030:	f1ba 0f00 	cmp.w	sl, #0
 8003034:	d106      	bne.n	8003044 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800303a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800303c:	2001      	movs	r0, #1
}
 800303e:	b005      	add	sp, #20
 8003040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003044:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003048:	2b01      	cmp	r3, #1
 800304a:	f000 8098 	beq.w	800317e <HAL_I2C_Mem_Read+0x172>
 800304e:	2501      	movs	r5, #1
 8003050:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003054:	f7fe fc06 	bl	8001864 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003058:	2319      	movs	r3, #25
 800305a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800305c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800305e:	462a      	mov	r2, r5
 8003060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff fd96 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
 800306a:	4681      	mov	r9, r0
 800306c:	2800      	cmp	r0, #0
 800306e:	d1e5      	bne.n	800303c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003070:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8003072:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003074:	9601      	str	r6, [sp, #4]
 8003076:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003078:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800307c:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800307e:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800308c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308e:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8003090:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003094:	9a03      	ldr	r2, [sp, #12]
 8003096:	f7ff fe3f 	bl	8002d18 <I2C_RequestMemoryRead>
 800309a:	b110      	cbz	r0, 80030a2 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 800309c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80030a0:	e7cc      	b.n	800303c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_I2C_Mem_Read+0x178>)
 80030aa:	d958      	bls.n	800315e <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ac:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80030b6:	4639      	mov	r1, r7
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff fd52 	bl	8002b62 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	9600      	str	r6, [sp, #0]
 80030c0:	4643      	mov	r3, r8
 80030c2:	2200      	movs	r2, #0
 80030c4:	2104      	movs	r1, #4
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff fd65 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d1b5      	bne.n	800303c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030d0:	6822      	ldr	r2, [r4, #0]
 80030d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80030d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80030da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80030dc:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80030de:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80030e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030e4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80030e6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80030e8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	b1ab      	cbz	r3, 8003120 <HAL_I2C_Mem_Read+0x114>
 80030f4:	b9a2      	cbnz	r2, 8003120 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f6:	9600      	str	r6, [sp, #0]
 80030f8:	4643      	mov	r3, r8
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7ff fd4a 	bl	8002b96 <I2C_WaitOnFlagUntilTimeout>
 8003102:	2800      	cmp	r0, #0
 8003104:	d19a      	bne.n	800303c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003106:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d92f      	bls.n	800316e <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800310e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003114:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003118:	4639      	mov	r1, r7
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff fd21 	bl	8002b62 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003120:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ca      	bne.n	80030be <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003128:	4632      	mov	r2, r6
 800312a:	4641      	mov	r1, r8
 800312c:	4620      	mov	r0, r4
 800312e:	f7ff fe25 	bl	8002d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003132:	2800      	cmp	r0, #0
 8003134:	d182      	bne.n	800303c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	2120      	movs	r1, #32
 800313a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003142:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003146:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003150:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003154:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003158:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800315c:	e76f      	b.n	800303e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800315e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003166:	b292      	uxth	r2, r2
 8003168:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	e7a3      	b.n	80030b6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800316e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003174:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003176:	b292      	uxth	r2, r2
 8003178:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	e7cc      	b.n	8003118 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800317e:	2002      	movs	r0, #2
 8003180:	e75d      	b.n	800303e <HAL_I2C_Mem_Read+0x32>
 8003182:	bf00      	nop
 8003184:	80002400 	.word	0x80002400

08003188 <HAL_I2C_GetState>:
  return hi2c->State;
 8003188:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800318c:	4770      	bx	lr

0800318e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800318e:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003190:	f04f 0c00 	mov.w	ip, #0
{
 8003194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003198:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800319a:	6804      	ldr	r4, [r0, #0]
 800319c:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800319e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80031a0:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031a2:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031a6:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80031a8:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031ac:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80031b0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031b4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80031b8:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031ba:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031bc:	68e0      	ldr	r0, [r4, #12]
 80031be:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80031c2:	4430      	add	r0, r6
 80031c4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80031c8:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031ca:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80031cc:	68e0      	ldr	r0, [r4, #12]
 80031ce:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80031d2:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80031d4:	6898      	ldr	r0, [r3, #8]
 80031d6:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80031da:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80031dc:	6888      	ldr	r0, [r1, #8]
 80031de:	68e6      	ldr	r6, [r4, #12]
 80031e0:	3001      	adds	r0, #1
 80031e2:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80031e6:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80031e8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80031ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80031ee:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80031f0:	6918      	ldr	r0, [r3, #16]
 80031f2:	f020 0007 	bic.w	r0, r0, #7
 80031f6:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80031f8:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80031fa:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80031fc:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003200:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003204:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003208:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800320c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003210:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003214:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003218:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800321a:	6958      	ldr	r0, [r3, #20]
 800321c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003220:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003222:	6948      	ldr	r0, [r1, #20]
 8003224:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003226:	69d8      	ldr	r0, [r3, #28]
 8003228:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800322c:	f020 0007 	bic.w	r0, r0, #7
 8003230:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003232:	6a08      	ldr	r0, [r1, #32]
 8003234:	69cd      	ldr	r5, [r1, #28]
 8003236:	4305      	orrs	r5, r0
 8003238:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800323a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800323c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800323e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003242:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003244:	b31e      	cbz	r6, 800328e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003246:	2e01      	cmp	r6, #1
 8003248:	d023      	beq.n	8003292 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800324a:	1eb0      	subs	r0, r6, #2
 800324c:	2802      	cmp	r0, #2
 800324e:	d922      	bls.n	8003296 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003250:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003252:	bf0c      	ite	eq
 8003254:	2002      	moveq	r0, #2
 8003256:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003258:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800325a:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800325e:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003262:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003264:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003266:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003268:	4345      	muls	r5, r0
 800326a:	4378      	muls	r0, r7
 800326c:	3003      	adds	r0, #3
 800326e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003272:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003274:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003276:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800327a:	f020 0007 	bic.w	r0, r0, #7
 800327e:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003280:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003282:	58a3      	ldr	r3, [r4, r2]
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	50a3      	str	r3, [r4, r2]
 800328a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800328e:	2004      	movs	r0, #4
 8003290:	e7e2      	b.n	8003258 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003292:	2003      	movs	r0, #3
 8003294:	e7e0      	b.n	8003258 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003296:	2002      	movs	r0, #2
 8003298:	e7de      	b.n	8003258 <LTDC_SetConfig+0xca>

0800329a <HAL_LTDC_MspInit>:
 800329a:	4770      	bx	lr

0800329c <HAL_LTDC_Init>:
{
 800329c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800329e:	4604      	mov	r4, r0
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d063      	beq.n	800336c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80032a4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80032a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032ac:	b91b      	cbnz	r3, 80032b6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80032ae:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80032b2:	f7ff fff2 	bl	800329a <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032b6:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032b8:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032ba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80032c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032c8:	6862      	ldr	r2, [r4, #4]
 80032ca:	6999      	ldr	r1, [r3, #24]
 80032cc:	4302      	orrs	r2, r0
 80032ce:	68e0      	ldr	r0, [r4, #12]
 80032d0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80032d2:	6920      	ldr	r0, [r4, #16]
 80032d4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80032d6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032d8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80032da:	4925      	ldr	r1, [pc, #148]	; (8003370 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032dc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	400a      	ands	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80032ea:	69a0      	ldr	r0, [r4, #24]
 80032ec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80032ee:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80032f0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	400a      	ands	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80032fe:	6a20      	ldr	r0, [r4, #32]
 8003300:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003302:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003304:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	400a      	ands	r2, r1
 800330a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003312:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003314:	4302      	orrs	r2, r0
 8003316:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	4011      	ands	r1, r2
 800331c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800331e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003326:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800332c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800332e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003332:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003336:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800333a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800333c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800333e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003342:	430a      	orrs	r2, r1
 8003344:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003348:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800334c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	f042 0206 	orr.w	r2, r2, #6
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003360:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003362:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003366:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800336a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800336c:	2001      	movs	r0, #1
}
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	f000f800 	.word	0xf000f800

08003374 <HAL_LTDC_ConfigLayer>:
{
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8003376:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800337a:	4606      	mov	r6, r0
 800337c:	468e      	mov	lr, r1
 800337e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8003380:	2b01      	cmp	r3, #1
 8003382:	f04f 0002 	mov.w	r0, #2
 8003386:	d01d      	beq.n	80033c4 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003388:	2434      	movs	r4, #52	; 0x34
 800338a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800338c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8003390:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003392:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8003396:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800339a:	3438      	adds	r4, #56	; 0x38
 800339c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800339e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033aa:	4630      	mov	r0, r6
 80033ac:	4662      	mov	r2, ip
 80033ae:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80033b0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033b2:	f7ff feec 	bl	800318e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033b6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80033b8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033ba:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80033bc:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80033c0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80033c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033c6 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80033c6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2300      	moveq	r3, #0
 80033ce:	f04f 5300 	movne.w	r3, #536870912	; 0x20000000
 80033d2:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80033d4:	6a0b      	ldr	r3, [r1, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80033de:	2300      	movne	r3, #0
 80033e0:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80033e2:	69cb      	ldr	r3, [r1, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 80033ec:	2300      	movne	r3, #0
 80033ee:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80033f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	6182      	str	r2, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80033f6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80033f8:	4413      	add	r3, r2
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	6202      	str	r2, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80033fe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003400:	4413      	add	r3, r2
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003406:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003408:	3a01      	subs	r2, #1
 800340a:	4413      	add	r3, r2
 800340c:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 800340e:	2000      	movs	r0, #0
 8003410:	4770      	bx	lr
	...

08003414 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8003416:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800341a:	4c19      	ldr	r4, [pc, #100]	; (8003480 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003434:	f7fe fa16 	bl	8001864 <HAL_GetTick>
 8003438:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800343a:	6863      	ldr	r3, [r4, #4]
 800343c:	03da      	lsls	r2, r3, #15
 800343e:	d50c      	bpl.n	800345a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003446:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003448:	f7fe fa0c 	bl	8001864 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800344c:	4c0c      	ldr	r4, [pc, #48]	; (8003480 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800344e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	039b      	lsls	r3, r3, #14
 8003454:	d50a      	bpl.n	800346c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003456:	2000      	movs	r0, #0
 8003458:	e006      	b.n	8003468 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800345a:	f7fe fa03 	bl	8001864 <HAL_GetTick>
 800345e:	1b40      	subs	r0, r0, r5
 8003460:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003464:	d9e9      	bls.n	800343a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8003466:	2003      	movs	r0, #3
}
 8003468:	b003      	add	sp, #12
 800346a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800346c:	f7fe f9fa 	bl	8001864 <HAL_GetTick>
 8003470:	1b40      	subs	r0, r0, r5
 8003472:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003476:	d9eb      	bls.n	8003450 <HAL_PWREx_EnableOverDrive+0x3c>
 8003478:	e7f5      	b.n	8003466 <HAL_PWREx_EnableOverDrive+0x52>
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000

08003484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003488:	4604      	mov	r4, r0
 800348a:	b918      	cbnz	r0, 8003494 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800348c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800348e:	b002      	add	sp, #8
 8003490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	07d8      	lsls	r0, r3, #31
 8003498:	d410      	bmi.n	80034bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	0799      	lsls	r1, r3, #30
 800349e:	d45e      	bmi.n	800355e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	0719      	lsls	r1, r3, #28
 80034a4:	f100 80a3 	bmi.w	80035ee <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	075a      	lsls	r2, r3, #29
 80034ac:	f100 80c4 	bmi.w	8003638 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b0:	69a2      	ldr	r2, [r4, #24]
 80034b2:	2a00      	cmp	r2, #0
 80034b4:	f040 812e 	bne.w	8003714 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80034b8:	2000      	movs	r0, #0
 80034ba:	e7e8      	b.n	800348e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034bc:	4b93      	ldr	r3, [pc, #588]	; (800370c <HAL_RCC_OscConfig+0x288>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	f002 020c 	and.w	r2, r2, #12
 80034c4:	2a04      	cmp	r2, #4
 80034c6:	d007      	beq.n	80034d8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	f002 020c 	and.w	r2, r2, #12
 80034ce:	2a08      	cmp	r2, #8
 80034d0:	d10a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x64>
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	025a      	lsls	r2, r3, #9
 80034d6:	d507      	bpl.n	80034e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	4b8c      	ldr	r3, [pc, #560]	; (800370c <HAL_RCC_OscConfig+0x288>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	039b      	lsls	r3, r3, #14
 80034de:	d5dc      	bpl.n	800349a <HAL_RCC_OscConfig+0x16>
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1d9      	bne.n	800349a <HAL_RCC_OscConfig+0x16>
 80034e6:	e7d1      	b.n	800348c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	4d88      	ldr	r5, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x288>)
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d111      	bne.n	8003516 <HAL_RCC_OscConfig+0x92>
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034fa:	f7fe f9b3 	bl	8001864 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4d83      	ldr	r5, [pc, #524]	; (800370c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8003500:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	039f      	lsls	r7, r3, #14
 8003506:	d4c8      	bmi.n	800349a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe f9ac 	bl	8001864 <HAL_GetTick>
 800350c:	1b80      	subs	r0, r0, r6
 800350e:	2864      	cmp	r0, #100	; 0x64
 8003510:	d9f7      	bls.n	8003502 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8003512:	2003      	movs	r0, #3
 8003514:	e7bb      	b.n	800348e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003516:	b99b      	cbnz	r3, 8003540 <HAL_RCC_OscConfig+0xbc>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003526:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003528:	f7fe f99c 	bl	8001864 <HAL_GetTick>
 800352c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	0398      	lsls	r0, r3, #14
 8003532:	d5b2      	bpl.n	800349a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe f996 	bl	8001864 <HAL_GetTick>
 8003538:	1b80      	subs	r0, r0, r6
 800353a:	2864      	cmp	r0, #100	; 0x64
 800353c:	d9f7      	bls.n	800352e <HAL_RCC_OscConfig+0xaa>
 800353e:	e7e8      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	d103      	bne.n	8003550 <HAL_RCC_OscConfig+0xcc>
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	602b      	str	r3, [r5, #0]
 800354e:	e7d0      	b.n	80034f2 <HAL_RCC_OscConfig+0x6e>
 8003550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003554:	602b      	str	r3, [r5, #0]
 8003556:	682b      	ldr	r3, [r5, #0]
 8003558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355c:	e7cc      	b.n	80034f8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355e:	4b6b      	ldr	r3, [pc, #428]	; (800370c <HAL_RCC_OscConfig+0x288>)
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	f012 0f0c 	tst.w	r2, #12
 8003566:	d007      	beq.n	8003578 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	f002 020c 	and.w	r2, r2, #12
 800356e:	2a08      	cmp	r2, #8
 8003570:	d111      	bne.n	8003596 <HAL_RCC_OscConfig+0x112>
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0259      	lsls	r1, r3, #9
 8003576:	d40e      	bmi.n	8003596 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_OscConfig+0x288>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	0792      	lsls	r2, r2, #30
 800357e:	d502      	bpl.n	8003586 <HAL_RCC_OscConfig+0x102>
 8003580:	68e2      	ldr	r2, [r4, #12]
 8003582:	2a01      	cmp	r2, #1
 8003584:	d182      	bne.n	800348c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	6921      	ldr	r1, [r4, #16]
 800358a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800358e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003592:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003594:	e784      	b.n	80034a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	4d5c      	ldr	r5, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x288>)
 800359a:	b1bb      	cbz	r3, 80035cc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80035a4:	f7fe f95e 	bl	8001864 <HAL_GetTick>
 80035a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	079f      	lsls	r7, r3, #30
 80035ae:	d507      	bpl.n	80035c0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	6922      	ldr	r2, [r4, #16]
 80035b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80035bc:	602b      	str	r3, [r5, #0]
 80035be:	e76f      	b.n	80034a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe f950 	bl	8001864 <HAL_GetTick>
 80035c4:	1b80      	subs	r0, r0, r6
 80035c6:	2802      	cmp	r0, #2
 80035c8:	d9ef      	bls.n	80035aa <HAL_RCC_OscConfig+0x126>
 80035ca:	e7a2      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80035d4:	f7fe f946 	bl	8001864 <HAL_GetTick>
 80035d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	0798      	lsls	r0, r3, #30
 80035de:	f57f af5f 	bpl.w	80034a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e2:	f7fe f93f 	bl	8001864 <HAL_GetTick>
 80035e6:	1b80      	subs	r0, r0, r6
 80035e8:	2802      	cmp	r0, #2
 80035ea:	d9f6      	bls.n	80035da <HAL_RCC_OscConfig+0x156>
 80035ec:	e791      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ee:	6963      	ldr	r3, [r4, #20]
 80035f0:	4d46      	ldr	r5, [pc, #280]	; (800370c <HAL_RCC_OscConfig+0x288>)
 80035f2:	b183      	cbz	r3, 8003616 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80035f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80035fc:	f7fe f932 	bl	8001864 <HAL_GetTick>
 8003600:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003604:	079b      	lsls	r3, r3, #30
 8003606:	f53f af4f 	bmi.w	80034a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360a:	f7fe f92b 	bl	8001864 <HAL_GetTick>
 800360e:	1b80      	subs	r0, r0, r6
 8003610:	2802      	cmp	r0, #2
 8003612:	d9f6      	bls.n	8003602 <HAL_RCC_OscConfig+0x17e>
 8003614:	e77d      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8003616:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800361e:	f7fe f921 	bl	8001864 <HAL_GetTick>
 8003622:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003626:	079f      	lsls	r7, r3, #30
 8003628:	f57f af3e 	bpl.w	80034a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe f91a 	bl	8001864 <HAL_GetTick>
 8003630:	1b80      	subs	r0, r0, r6
 8003632:	2802      	cmp	r0, #2
 8003634:	d9f6      	bls.n	8003624 <HAL_RCC_OscConfig+0x1a0>
 8003636:	e76c      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x288>)
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	00d0      	lsls	r0, r2, #3
 800363e:	d427      	bmi.n	8003690 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003642:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	4d2e      	ldr	r5, [pc, #184]	; (8003710 <HAL_RCC_OscConfig+0x28c>)
 8003656:	682b      	ldr	r3, [r5, #0]
 8003658:	05d9      	lsls	r1, r3, #23
 800365a:	d51b      	bpl.n	8003694 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	4d2b      	ldr	r5, [pc, #172]	; (800370c <HAL_RCC_OscConfig+0x288>)
 8003660:	2b01      	cmp	r3, #1
 8003662:	d127      	bne.n	80036b4 <HAL_RCC_OscConfig+0x230>
 8003664:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003670:	f7fe f8f8 	bl	8001864 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	4f25      	ldr	r7, [pc, #148]	; (800370c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8003676:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800367a:	079b      	lsls	r3, r3, #30
 800367c:	d53f      	bpl.n	80036fe <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800367e:	2e00      	cmp	r6, #0
 8003680:	f43f af16 	beq.w	80034b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4a21      	ldr	r2, [pc, #132]	; (800370c <HAL_RCC_OscConfig+0x288>)
 8003686:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	e70f      	b.n	80034b0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8003690:	2600      	movs	r6, #0
 8003692:	e7df      	b.n	8003654 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800369c:	f7fe f8e2 	bl	8001864 <HAL_GetTick>
 80036a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	05da      	lsls	r2, r3, #23
 80036a6:	d4d9      	bmi.n	800365c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036a8:	f7fe f8dc 	bl	8001864 <HAL_GetTick>
 80036ac:	1bc0      	subs	r0, r0, r7
 80036ae:	2864      	cmp	r0, #100	; 0x64
 80036b0:	d9f7      	bls.n	80036a2 <HAL_RCC_OscConfig+0x21e>
 80036b2:	e72e      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	b9ab      	cbnz	r3, 80036e2 <HAL_RCC_OscConfig+0x25e>
 80036b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	672b      	str	r3, [r5, #112]	; 0x70
 80036c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80036ca:	f7fe f8cb 	bl	8001864 <HAL_GetTick>
 80036ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80036d2:	0798      	lsls	r0, r3, #30
 80036d4:	d5d3      	bpl.n	800367e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe f8c5 	bl	8001864 <HAL_GetTick>
 80036da:	1bc0      	subs	r0, r0, r7
 80036dc:	4540      	cmp	r0, r8
 80036de:	d9f7      	bls.n	80036d0 <HAL_RCC_OscConfig+0x24c>
 80036e0:	e717      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80036e6:	d103      	bne.n	80036f0 <HAL_RCC_OscConfig+0x26c>
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	672b      	str	r3, [r5, #112]	; 0x70
 80036ee:	e7b9      	b.n	8003664 <HAL_RCC_OscConfig+0x1e0>
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	672b      	str	r3, [r5, #112]	; 0x70
 80036f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	e7b5      	b.n	800366a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fe f8b1 	bl	8001864 <HAL_GetTick>
 8003702:	eba0 0008 	sub.w	r0, r0, r8
 8003706:	42a8      	cmp	r0, r5
 8003708:	d9b6      	bls.n	8003678 <HAL_RCC_OscConfig+0x1f4>
 800370a:	e702      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003714:	4d24      	ldr	r5, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x324>)
 8003716:	68ab      	ldr	r3, [r5, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	f43f aeb5 	beq.w	800348c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003722:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372c:	d12f      	bne.n	800378e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800372e:	f7fe f899 	bl	8001864 <HAL_GetTick>
 8003732:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	0199      	lsls	r1, r3, #6
 8003738:	d423      	bmi.n	8003782 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373a:	6a22      	ldr	r2, [r4, #32]
 800373c:	69e3      	ldr	r3, [r4, #28]
 800373e:	4313      	orrs	r3, r2
 8003740:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003742:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003746:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003748:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800374c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800374e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003752:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	4c14      	ldr	r4, [pc, #80]	; (80037a8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800375e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003768:	f7fe f87c 	bl	8001864 <HAL_GetTick>
 800376c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	019a      	lsls	r2, r3, #6
 8003772:	f53f aea1 	bmi.w	80034b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe f875 	bl	8001864 <HAL_GetTick>
 800377a:	1b40      	subs	r0, r0, r5
 800377c:	2802      	cmp	r0, #2
 800377e:	d9f6      	bls.n	800376e <HAL_RCC_OscConfig+0x2ea>
 8003780:	e6c7      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe f86f 	bl	8001864 <HAL_GetTick>
 8003786:	1b80      	subs	r0, r0, r6
 8003788:	2802      	cmp	r0, #2
 800378a:	d9d3      	bls.n	8003734 <HAL_RCC_OscConfig+0x2b0>
 800378c:	e6c1      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800378e:	f7fe f869 	bl	8001864 <HAL_GetTick>
 8003792:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	019b      	lsls	r3, r3, #6
 8003798:	f57f ae8e 	bpl.w	80034b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379c:	f7fe f862 	bl	8001864 <HAL_GetTick>
 80037a0:	1b00      	subs	r0, r0, r4
 80037a2:	2802      	cmp	r0, #2
 80037a4:	d9f6      	bls.n	8003794 <HAL_RCC_OscConfig+0x310>
 80037a6:	e6b4      	b.n	8003512 <HAL_RCC_OscConfig+0x8e>
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ac:	4913      	ldr	r1, [pc, #76]	; (80037fc <HAL_RCC_GetSysClockFreq+0x50>)
{
 80037ae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b0:	688b      	ldr	r3, [r1, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x16>
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037be:	4810      	ldr	r0, [pc, #64]	; (8003800 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037c0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80037c2:	4810      	ldr	r0, [pc, #64]	; (8003804 <HAL_RCC_GetSysClockFreq+0x58>)
 80037c4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037c8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037d8:	bf1a      	itte	ne
 80037da:	480a      	ldrne	r0, [pc, #40]	; (8003804 <HAL_RCC_GetSysClockFreq+0x58>)
 80037dc:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037de:	4808      	ldreq	r0, [pc, #32]	; (8003800 <HAL_RCC_GetSysClockFreq+0x54>)
 80037e0:	fba1 0100 	umull	r0, r1, r1, r0
 80037e4:	f7fc fd84 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <HAL_RCC_GetSysClockFreq+0x50>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037f0:	3301      	adds	r3, #1
 80037f2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80037f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80037f8:	bd08      	pop	{r3, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	017d7840 	.word	0x017d7840

08003808 <HAL_RCC_ClockConfig>:
{
 8003808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800380e:	4604      	mov	r4, r0
 8003810:	b910      	cbnz	r0, 8003818 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003812:	2001      	movs	r0, #1
 8003814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4a46      	ldr	r2, [pc, #280]	; (8003934 <HAL_RCC_ClockConfig+0x12c>)
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	428b      	cmp	r3, r1
 8003822:	d328      	bcc.n	8003876 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	6821      	ldr	r1, [r4, #0]
 8003826:	078f      	lsls	r7, r1, #30
 8003828:	d430      	bmi.n	800388c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	07c8      	lsls	r0, r1, #31
 800382c:	d443      	bmi.n	80038b6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382e:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_RCC_ClockConfig+0x12c>)
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	429d      	cmp	r5, r3
 8003838:	d367      	bcc.n	800390a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	0751      	lsls	r1, r2, #29
 800383e:	d470      	bmi.n	8003922 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003840:	0713      	lsls	r3, r2, #28
 8003842:	d507      	bpl.n	8003854 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003844:	4a3c      	ldr	r2, [pc, #240]	; (8003938 <HAL_RCC_ClockConfig+0x130>)
 8003846:	6921      	ldr	r1, [r4, #16]
 8003848:	6893      	ldr	r3, [r2, #8]
 800384a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800384e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003852:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003854:	f7ff ffaa 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8003858:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_ClockConfig+0x130>)
 800385a:	4a38      	ldr	r2, [pc, #224]	; (800393c <HAL_RCC_ClockConfig+0x134>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003862:	5cd3      	ldrb	r3, [r2, r3]
 8003864:	40d8      	lsrs	r0, r3
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <HAL_RCC_ClockConfig+0x138>)
 8003868:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800386a:	2000      	movs	r0, #0
 800386c:	f7fd ffbe 	bl	80017ec <HAL_InitTick>
  return HAL_OK;
 8003870:	2000      	movs	r0, #0
 8003872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	f023 030f 	bic.w	r3, r3, #15
 800387c:	430b      	orrs	r3, r1
 800387e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003880:	6813      	ldr	r3, [r2, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	4299      	cmp	r1, r3
 8003888:	d1c3      	bne.n	8003812 <HAL_RCC_ClockConfig+0xa>
 800388a:	e7cb      	b.n	8003824 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	f011 0f04 	tst.w	r1, #4
 8003890:	4b29      	ldr	r3, [pc, #164]	; (8003938 <HAL_RCC_ClockConfig+0x130>)
 8003892:	d003      	beq.n	800389c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800389a:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	070e      	lsls	r6, r1, #28
 800389e:	d503      	bpl.n	80038a8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80038a6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	68a0      	ldr	r0, [r4, #8]
 80038ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038b0:	4302      	orrs	r2, r0
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e7b9      	b.n	800382a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b6:	6861      	ldr	r1, [r4, #4]
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RCC_ClockConfig+0x130>)
 80038ba:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038bc:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	d11c      	bne.n	80038fa <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	d0a5      	beq.n	8003812 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038cc:	4e1a      	ldr	r6, [pc, #104]	; (8003938 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	f022 0203 	bic.w	r2, r2, #3
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80038d6:	f7fd ffc5 	bl	8001864 <HAL_GetTick>
 80038da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038dc:	68b3      	ldr	r3, [r6, #8]
 80038de:	6862      	ldr	r2, [r4, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038e8:	d0a1      	beq.n	800382e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ea:	f7fd ffbb 	bl	8001864 <HAL_GetTick>
 80038ee:	1bc0      	subs	r0, r0, r7
 80038f0:	4540      	cmp	r0, r8
 80038f2:	d9f3      	bls.n	80038dc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80038f4:	2003      	movs	r0, #3
}
 80038f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fa:	2902      	cmp	r1, #2
 80038fc:	d102      	bne.n	8003904 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003902:	e7df      	b.n	80038c4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	f012 0f02 	tst.w	r2, #2
 8003908:	e7dc      	b.n	80038c4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	f023 030f 	bic.w	r3, r3, #15
 8003910:	432b      	orrs	r3, r5
 8003912:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	429d      	cmp	r5, r3
 800391c:	f47f af79 	bne.w	8003812 <HAL_RCC_ClockConfig+0xa>
 8003920:	e78b      	b.n	800383a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003922:	4905      	ldr	r1, [pc, #20]	; (8003938 <HAL_RCC_ClockConfig+0x130>)
 8003924:	68e0      	ldr	r0, [r4, #12]
 8003926:	688b      	ldr	r3, [r1, #8]
 8003928:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800392c:	4303      	orrs	r3, r0
 800392e:	608b      	str	r3, [r1, #8]
 8003930:	e786      	b.n	8003840 <HAL_RCC_ClockConfig+0x38>
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	0800b5a9 	.word	0x0800b5a9
 8003940:	2000004c 	.word	0x2000004c

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003948:	6802      	ldr	r2, [r0, #0]
{
 800394a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800394c:	f012 0601 	ands.w	r6, r2, #1
 8003950:	d00b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003952:	4bba      	ldr	r3, [pc, #744]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800395a:	6099      	str	r1, [r3, #8]
 800395c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003962:	fab6 f686 	clz	r6, r6
 8003966:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003968:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800396a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800396e:	d012      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003970:	49b2      	ldr	r1, [pc, #712]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003972:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003974:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003978:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800397c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003980:	bf08      	it	eq
 8003982:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003984:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003988:	bf16      	itet	ne
 800398a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800398e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003990:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003992:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003996:	02d7      	lsls	r7, r2, #11
 8003998:	d510      	bpl.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800399a:	48a8      	ldr	r0, [pc, #672]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800399c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800399e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039a2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80039aa:	ea43 0301 	orr.w	r3, r3, r1
 80039ae:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039b2:	f000 81a9 	beq.w	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80039b6:	2900      	cmp	r1, #0
 80039b8:	bf08      	it	eq
 80039ba:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80039bc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80039c0:	bf18      	it	ne
 80039c2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039c4:	0690      	lsls	r0, r2, #26
 80039c6:	d531      	bpl.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b9c      	ldr	r3, [pc, #624]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039ca:	4f9d      	ldr	r7, [pc, #628]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e6:	f7fd ff3d 	bl	8001864 <HAL_GetTick>
 80039ea:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	05d9      	lsls	r1, r3, #23
 80039f0:	f140 818c 	bpl.w	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039f4:	4f91      	ldr	r7, [pc, #580]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80039f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80039fc:	f040 8191 	bne.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a02:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003a06:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003a0a:	4a8c      	ldr	r2, [pc, #560]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a0c:	f040 81af 	bne.w	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003a10:	6891      	ldr	r1, [r2, #8]
 8003a12:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003a16:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003a1a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003a1e:	4301      	orrs	r1, r0
 8003a20:	6091      	str	r1, [r2, #8]
 8003a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a26:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	06df      	lsls	r7, r3, #27
 8003a30:	d50c      	bpl.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a32:	4a82      	ldr	r2, [pc, #520]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a34:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003a38:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003a3c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003a40:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003a44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a46:	4301      	orrs	r1, r0
 8003a48:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4c:	0458      	lsls	r0, r3, #17
 8003a4e:	d508      	bpl.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a50:	497a      	ldr	r1, [pc, #488]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a52:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003a54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a58:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003a5c:	4302      	orrs	r2, r0
 8003a5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a62:	0419      	lsls	r1, r3, #16
 8003a64:	d508      	bpl.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a66:	4975      	ldr	r1, [pc, #468]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a68:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003a6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a6e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003a72:	4302      	orrs	r2, r0
 8003a74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a78:	03da      	lsls	r2, r3, #15
 8003a7a:	d508      	bpl.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7c:	496f      	ldr	r1, [pc, #444]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003a80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003a88:	4302      	orrs	r2, r0
 8003a8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a8e:	039f      	lsls	r7, r3, #14
 8003a90:	d508      	bpl.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a92:	496a      	ldr	r1, [pc, #424]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a94:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003a96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a9a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003a9e:	4302      	orrs	r2, r0
 8003aa0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aa4:	0658      	lsls	r0, r3, #25
 8003aa6:	d508      	bpl.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa8:	4964      	ldr	r1, [pc, #400]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003aaa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003aac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ab0:	f022 0203 	bic.w	r2, r2, #3
 8003ab4:	4302      	orrs	r2, r0
 8003ab6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aba:	0619      	lsls	r1, r3, #24
 8003abc:	d508      	bpl.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003abe:	495f      	ldr	r1, [pc, #380]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ac0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003ac2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ac6:	f022 020c 	bic.w	r2, r2, #12
 8003aca:	4302      	orrs	r2, r0
 8003acc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ad0:	05da      	lsls	r2, r3, #23
 8003ad2:	d508      	bpl.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad4:	4959      	ldr	r1, [pc, #356]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ad6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ad8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003adc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003ae0:	4302      	orrs	r2, r0
 8003ae2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae6:	059f      	lsls	r7, r3, #22
 8003ae8:	d508      	bpl.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aea:	4954      	ldr	r1, [pc, #336]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003aec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003aee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003af2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003af6:	4302      	orrs	r2, r0
 8003af8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afc:	0558      	lsls	r0, r3, #21
 8003afe:	d508      	bpl.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b00:	494e      	ldr	r1, [pc, #312]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b0c:	4302      	orrs	r2, r0
 8003b0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b12:	0519      	lsls	r1, r3, #20
 8003b14:	d508      	bpl.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b16:	4949      	ldr	r1, [pc, #292]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b22:	4302      	orrs	r2, r0
 8003b24:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b28:	04da      	lsls	r2, r3, #19
 8003b2a:	d508      	bpl.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b2c:	4943      	ldr	r1, [pc, #268]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b2e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003b30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b34:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003b38:	4302      	orrs	r2, r0
 8003b3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b3e:	049f      	lsls	r7, r3, #18
 8003b40:	d508      	bpl.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b42:	493e      	ldr	r1, [pc, #248]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b44:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003b46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003b4e:	4302      	orrs	r2, r0
 8003b50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b54:	0258      	lsls	r0, r3, #9
 8003b56:	d508      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b58:	4938      	ldr	r1, [pc, #224]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b5a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003b5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003b64:	4302      	orrs	r2, r0
 8003b66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b6a:	0299      	lsls	r1, r3, #10
 8003b6c:	d50c      	bpl.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b6e:	4833      	ldr	r0, [pc, #204]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b70:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003b72:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003b76:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b7a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003b7e:	bf08      	it	eq
 8003b80:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b82:	430a      	orrs	r2, r1
 8003b84:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003b88:	f013 0f08 	tst.w	r3, #8
 8003b8c:	bf18      	it	ne
 8003b8e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b90:	035a      	lsls	r2, r3, #13
 8003b92:	d508      	bpl.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b94:	4929      	ldr	r1, [pc, #164]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b96:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003b98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ba0:	4302      	orrs	r2, r0
 8003ba2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ba6:	021f      	lsls	r7, r3, #8
 8003ba8:	d509      	bpl.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003baa:	4924      	ldr	r1, [pc, #144]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bac:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003bb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003bb4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003bb8:	4302      	orrs	r2, r0
 8003bba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003bbe:	0158      	lsls	r0, r3, #5
 8003bc0:	d509      	bpl.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003bc2:	491e      	ldr	r1, [pc, #120]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bc4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003bc8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003bcc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003bd0:	4302      	orrs	r2, r0
 8003bd2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bd6:	0119      	lsls	r1, r3, #4
 8003bd8:	d509      	bpl.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bda:	4918      	ldr	r1, [pc, #96]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bdc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003be0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003be4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003be8:	4302      	orrs	r2, r0
 8003bea:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bee:	00da      	lsls	r2, r3, #3
 8003bf0:	d509      	bpl.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bf2:	4912      	ldr	r1, [pc, #72]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bf4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003bf8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003bfc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003c00:	4302      	orrs	r2, r0
 8003c02:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c06:	2e01      	cmp	r6, #1
 8003c08:	f000 80b5 	beq.w	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c10:	f000 80b1 	beq.w	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c14:	2d01      	cmp	r5, #1
 8003c16:	d175      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c18:	4d08      	ldr	r5, [pc, #32]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c20:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c22:	f7fd fe1f 	bl	8001864 <HAL_GetTick>
 8003c26:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	009f      	lsls	r7, r3, #2
 8003c2c:	f100 8127 	bmi.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c30:	6821      	ldr	r1, [r4, #0]
 8003c32:	030e      	lsls	r6, r1, #12
 8003c34:	d506      	bpl.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c38:	b143      	cbz	r3, 8003c4c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40007000 	.word	0x40007000
 8003c44:	02cd      	lsls	r5, r1, #11
 8003c46:	d51d      	bpl.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c4a:	b9db      	cbnz	r3, 8003c84 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c4c:	4a93      	ldr	r2, [pc, #588]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003c4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c52:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c5a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003c5e:	4303      	orrs	r3, r0
 8003c60:	6960      	ldr	r0, [r4, #20]
 8003c62:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c66:	69a0      	ldr	r0, [r4, #24]
 8003c68:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c70:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c76:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c7a:	3801      	subs	r0, #1
 8003c7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c84:	0288      	lsls	r0, r1, #10
 8003c86:	d515      	bpl.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8003c88:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c90:	4a82      	ldr	r2, [pc, #520]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003c92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c96:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c9a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003c9e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003ca2:	4303      	orrs	r3, r0
 8003ca4:	6960      	ldr	r0, [r4, #20]
 8003ca6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003caa:	6a20      	ldr	r0, [r4, #32]
 8003cac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cb4:	070a      	lsls	r2, r1, #28
 8003cb6:	d519      	bpl.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cb8:	4978      	ldr	r1, [pc, #480]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003cba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cbe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cc2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	6962      	ldr	r2, [r4, #20]
 8003cce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003cd2:	69e2      	ldr	r2, [r4, #28]
 8003cd4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cdc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8003ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ce2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cec:	4c6b      	ldr	r4, [pc, #428]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fdb5 	bl	8001864 <HAL_GetTick>
 8003cfa:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	f140 80c4 	bpl.w	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003d04:	2000      	movs	r0, #0
 8003d06:	e009      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8003d08:	2601      	movs	r6, #1
 8003d0a:	e657      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fd fdaa 	bl	8001864 <HAL_GetTick>
 8003d10:	eba0 0008 	sub.w	r0, r0, r8
 8003d14:	2864      	cmp	r0, #100	; 0x64
 8003d16:	f67f ae69 	bls.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003d1a:	2003      	movs	r0, #3
}
 8003d1c:	b003      	add	sp, #12
 8003d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d24:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	f43f ae69 	beq.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d3a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d42:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003d44:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d48:	07da      	lsls	r2, r3, #31
 8003d4a:	f57f ae59 	bpl.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fd89 	bl	8001864 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d56:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5a:	079b      	lsls	r3, r3, #30
 8003d5c:	f53f ae50 	bmi.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fd fd80 	bl	8001864 <HAL_GetTick>
 8003d64:	eba0 0008 	sub.w	r0, r0, r8
 8003d68:	4548      	cmp	r0, r9
 8003d6a:	d9f5      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d6c:	e7d5      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6e:	6891      	ldr	r1, [r2, #8]
 8003d70:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003d74:	e654      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8003d76:	4e49      	ldr	r6, [pc, #292]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003d78:	6833      	ldr	r3, [r6, #0]
 8003d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d7e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d80:	f7fd fd70 	bl	8001864 <HAL_GetTick>
 8003d84:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d86:	6833      	ldr	r3, [r6, #0]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	d472      	bmi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	07d7      	lsls	r7, r2, #31
 8003d90:	d512      	bpl.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d94:	b983      	cbnz	r3, 8003db8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d96:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d9a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6861      	ldr	r1, [r4, #4]
 8003daa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003dae:	68a1      	ldr	r1, [r4, #8]
 8003db0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003db4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db8:	0316      	lsls	r6, r2, #12
 8003dba:	d503      	bpl.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003dbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003dc4:	02d0      	lsls	r0, r2, #11
 8003dc6:	d51e      	bpl.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dce:	d11a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dd0:	4932      	ldr	r1, [pc, #200]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003dd2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dde:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003de2:	4303      	orrs	r3, r0
 8003de4:	6860      	ldr	r0, [r4, #4]
 8003de6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003dea:	68e0      	ldr	r0, [r4, #12]
 8003dec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003df4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8003df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dfa:	f020 001f 	bic.w	r0, r0, #31
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	4303      	orrs	r3, r0
 8003e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e06:	01d1      	lsls	r1, r2, #7
 8003e08:	d511      	bpl.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e0a:	4924      	ldr	r1, [pc, #144]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003e0c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e10:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e14:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003e18:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003e1c:	4303      	orrs	r3, r0
 8003e1e:	6860      	ldr	r0, [r4, #4]
 8003e20:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003e24:	6920      	ldr	r0, [r4, #16]
 8003e26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003e2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e2e:	0192      	lsls	r2, r2, #6
 8003e30:	d50d      	bpl.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e32:	6923      	ldr	r3, [r4, #16]
 8003e34:	6862      	ldr	r2, [r4, #4]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e3c:	68e2      	ldr	r2, [r4, #12]
 8003e3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e42:	68a2      	ldr	r2, [r4, #8]
 8003e44:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003e4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003e4e:	4e13      	ldr	r6, [pc, #76]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003e50:	6833      	ldr	r3, [r6, #0]
 8003e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e56:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e58:	f7fd fd04 	bl	8001864 <HAL_GetTick>
 8003e5c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e5e:	6833      	ldr	r3, [r6, #0]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	f53f aed7 	bmi.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e66:	f7fd fcfd 	bl	8001864 <HAL_GetTick>
 8003e6a:	1bc0      	subs	r0, r0, r7
 8003e6c:	2864      	cmp	r0, #100	; 0x64
 8003e6e:	d9f6      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e70:	e753      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e72:	f7fd fcf7 	bl	8001864 <HAL_GetTick>
 8003e76:	1bc0      	subs	r0, r0, r7
 8003e78:	2864      	cmp	r0, #100	; 0x64
 8003e7a:	d984      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003e7c:	e74d      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e7e:	f7fd fcf1 	bl	8001864 <HAL_GetTick>
 8003e82:	1b80      	subs	r0, r0, r6
 8003e84:	2864      	cmp	r0, #100	; 0x64
 8003e86:	f67f aecf 	bls.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003e8a:	e746      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e8c:	f7fd fcea 	bl	8001864 <HAL_GetTick>
 8003e90:	1b40      	subs	r0, r0, r5
 8003e92:	2864      	cmp	r0, #100	; 0x64
 8003e94:	f67f af32 	bls.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003e98:	e73f      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800

08003ea0 <HAL_SDRAM_MspInit>:
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003ea2:	b538      	push	{r3, r4, r5, lr}
 8003ea4:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	b1c8      	cbz	r0, 8003ede <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003eaa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eb2:	b91b      	cbnz	r3, 8003ebc <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003eb4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003eb8:	f7ff fff2 	bl	8003ea0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ebc:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ebe:	1d21      	adds	r1, r4, #4
 8003ec0:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ec2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ec6:	f000 fc3e 	bl	8004746 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	f000 fc78 	bl	80047c4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ed4:	2301      	movs	r3, #1
  
  return HAL_OK;
 8003ed6:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ed8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
}
 8003ee0:	bd38      	pop	{r3, r4, r5, pc}

08003ee2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003ee2:	b538      	push	{r3, r4, r5, lr}
 8003ee4:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003ee6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8003eea:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003eec:	b2c0      	uxtb	r0, r0
 8003eee:	2802      	cmp	r0, #2
 8003ef0:	d00d      	beq.n	8003f0e <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ef2:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003ef4:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ef6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003efa:	f000 fcab 	bl	8004854 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003efe:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8003f00:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003f02:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003f04:	bf0c      	ite	eq
 8003f06:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003f08:	2301      	movne	r3, #1
 8003f0a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}

08003f10 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f14:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003f18:	b2c0      	uxtb	r0, r0
 8003f1a:	2802      	cmp	r0, #2
 8003f1c:	d009      	beq.n	8003f32 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f1e:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003f20:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003f26:	f000 fca8 	bl	800487a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f2a:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8003f2c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f34:	6a03      	ldr	r3, [r0, #32]
 8003f36:	f023 0301 	bic.w	r3, r3, #1
{
 8003f3a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f42:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f44:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f4a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003f4e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003f52:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f54:	688d      	ldr	r5, [r1, #8]
 8003f56:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f58:	4d0e      	ldr	r5, [pc, #56]	; (8003f94 <TIM_OC1_SetConfig+0x60>)
 8003f5a:	42a8      	cmp	r0, r5
 8003f5c:	d002      	beq.n	8003f64 <TIM_OC1_SetConfig+0x30>
 8003f5e:	4e0e      	ldr	r6, [pc, #56]	; (8003f98 <TIM_OC1_SetConfig+0x64>)
 8003f60:	42b0      	cmp	r0, r6
 8003f62:	d111      	bne.n	8003f88 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f64:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f68:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8003f6c:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f70:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	d002      	beq.n	8003f7c <TIM_OC1_SetConfig+0x48>
 8003f76:	4d08      	ldr	r5, [pc, #32]	; (8003f98 <TIM_OC1_SetConfig+0x64>)
 8003f78:	42a8      	cmp	r0, r5
 8003f7a:	d105      	bne.n	8003f88 <TIM_OC1_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f7c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f82:	698e      	ldr	r6, [r1, #24]
 8003f84:	4335      	orrs	r5, r6
 8003f86:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f88:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f8c:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f90:	6203      	str	r3, [r0, #32]
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010400 	.word	0x40010400

08003f9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f9c:	6a03      	ldr	r3, [r0, #32]
 8003f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003fa2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003faa:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003fb0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003fb6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003fba:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fbc:	688d      	ldr	r5, [r1, #8]
 8003fbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fc2:	4d11      	ldr	r5, [pc, #68]	; (8004008 <TIM_OC3_SetConfig+0x6c>)
 8003fc4:	42a8      	cmp	r0, r5
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC3_SetConfig+0x34>
 8003fc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fcc:	42a8      	cmp	r0, r5
 8003fce:	d114      	bne.n	8003ffa <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fda:	4d0b      	ldr	r5, [pc, #44]	; (8004008 <TIM_OC3_SetConfig+0x6c>)
 8003fdc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe2:	d003      	beq.n	8003fec <TIM_OC3_SetConfig+0x50>
 8003fe4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fe8:	42a8      	cmp	r0, r5
 8003fea:	d106      	bne.n	8003ffa <TIM_OC3_SetConfig+0x5e>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff2:	698e      	ldr	r6, [r1, #24]
 8003ff4:	4335      	orrs	r5, r6
 8003ff6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ffc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ffe:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004000:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004002:	6203      	str	r3, [r0, #32]
 8004004:	bd70      	pop	{r4, r5, r6, pc}
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000

0800400c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800400c:	6a03      	ldr	r3, [r0, #32]
 800400e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8004012:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004014:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800401c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004020:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004026:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800402e:	688d      	ldr	r5, [r1, #8]
 8004030:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004034:	4d08      	ldr	r5, [pc, #32]	; (8004058 <TIM_OC4_SetConfig+0x4c>)
 8004036:	42a8      	cmp	r0, r5
 8004038:	d003      	beq.n	8004042 <TIM_OC4_SetConfig+0x36>
 800403a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800403e:	42a8      	cmp	r0, r5
 8004040:	d104      	bne.n	800404c <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004042:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004046:	694d      	ldr	r5, [r1, #20]
 8004048:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004050:	684b      	ldr	r3, [r1, #4]
 8004052:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	6202      	str	r2, [r0, #32]
 8004056:	bd30      	pop	{r4, r5, pc}
 8004058:	40010000 	.word	0x40010000

0800405c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800405c:	6a03      	ldr	r3, [r0, #32]
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8004062:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004064:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800406c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8004070:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800407a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800407c:	688d      	ldr	r5, [r1, #8]
 800407e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	4d09      	ldr	r5, [pc, #36]	; (80040a8 <TIM_OC5_SetConfig+0x4c>)
 8004084:	42a8      	cmp	r0, r5
 8004086:	d003      	beq.n	8004090 <TIM_OC5_SetConfig+0x34>
 8004088:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800408c:	42a8      	cmp	r0, r5
 800408e:	d104      	bne.n	800409a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004090:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004094:	694d      	ldr	r5, [r1, #20]
 8004096:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800409c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800409e:	684b      	ldr	r3, [r1, #4]
 80040a0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	6202      	str	r2, [r0, #32]
 80040a4:	bd30      	pop	{r4, r5, pc}
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000

080040ac <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040ac:	6a03      	ldr	r3, [r0, #32]
 80040ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80040b2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040ce:	688d      	ldr	r5, [r1, #8]
 80040d0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d4:	4d08      	ldr	r5, [pc, #32]	; (80040f8 <TIM_OC6_SetConfig+0x4c>)
 80040d6:	42a8      	cmp	r0, r5
 80040d8:	d003      	beq.n	80040e2 <TIM_OC6_SetConfig+0x36>
 80040da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040de:	42a8      	cmp	r0, r5
 80040e0:	d104      	bne.n	80040ec <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040e2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040e6:	694d      	ldr	r5, [r1, #20]
 80040e8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ee:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040f0:	684b      	ldr	r3, [r1, #4]
 80040f2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f4:	6202      	str	r2, [r0, #32]
 80040f6:	bd30      	pop	{r4, r5, pc}
 80040f8:	40010000 	.word	0x40010000

080040fc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040fc:	6803      	ldr	r3, [r0, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <HAL_TIM_Base_Start_IT+0x28>)
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	2a06      	cmp	r2, #6
 800410e:	d006      	beq.n	800411e <HAL_TIM_Base_Start_IT+0x22>
 8004110:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004114:	d003      	beq.n	800411e <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	2000      	movs	r0, #0
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	00010007 	.word	0x00010007

08004128 <HAL_TIM_PWM_MspInit>:
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_OC_DelayElapsedCallback>:
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_IC_CaptureCallback>:
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_PWM_PulseFinishedCallback>:
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_TriggerCallback>:
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	0791      	lsls	r1, r2, #30
{
 8004138:	b510      	push	{r4, lr}
 800413a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800413c:	d50f      	bpl.n	800415e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	0792      	lsls	r2, r2, #30
 8004142:	d50c      	bpl.n	800415e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004144:	f06f 0202 	mvn.w	r2, #2
 8004148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004150:	0799      	lsls	r1, r3, #30
 8004152:	f000 8085 	beq.w	8004260 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004156:	f7ff ffe9 	bl	800412c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	2300      	movs	r3, #0
 800415c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	0752      	lsls	r2, r2, #29
 8004164:	d510      	bpl.n	8004188 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	0750      	lsls	r0, r2, #29
 800416a:	d50d      	bpl.n	8004188 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004170:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004174:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004176:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004178:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800417e:	d075      	beq.n	800426c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004180:	f7ff ffd4 	bl	800412c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004184:	2300      	movs	r3, #0
 8004186:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	0711      	lsls	r1, r2, #28
 800418e:	d50f      	bpl.n	80041b0 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	0712      	lsls	r2, r2, #28
 8004194:	d50c      	bpl.n	80041b0 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004196:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a4:	079b      	lsls	r3, r3, #30
 80041a6:	d067      	beq.n	8004278 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80041a8:	f7ff ffc0 	bl	800412c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ac:	2300      	movs	r3, #0
 80041ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	06d0      	lsls	r0, r2, #27
 80041b6:	d510      	bpl.n	80041da <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	06d1      	lsls	r1, r2, #27
 80041bc:	d50d      	bpl.n	80041da <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041be:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c6:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041cc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80041d0:	d058      	beq.n	8004284 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	f7ff ffab 	bl	800412c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	2300      	movs	r3, #0
 80041d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	07d2      	lsls	r2, r2, #31
 80041e0:	d508      	bpl.n	80041f4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	07d0      	lsls	r0, r2, #31
 80041e6:	d505      	bpl.n	80041f4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f0:	f001 fd2e 	bl	8005c50 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	0611      	lsls	r1, r2, #24
 80041fa:	d508      	bpl.n	800420e <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	0612      	lsls	r2, r2, #24
 8004200:	d505      	bpl.n	800420e <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004202:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004206:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004208:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800420a:	f000 fa9a 	bl	8004742 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	05d0      	lsls	r0, r2, #23
 8004214:	d508      	bpl.n	8004228 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	0611      	lsls	r1, r2, #24
 800421a:	d505      	bpl.n	8004228 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800421c:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004220:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004222:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004224:	f000 fa8e 	bl	8004744 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	0652      	lsls	r2, r2, #25
 800422e:	d508      	bpl.n	8004242 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	0650      	lsls	r0, r2, #25
 8004234:	d505      	bpl.n	8004242 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004236:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800423a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800423e:	f7ff ff77 	bl	8004130 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	0691      	lsls	r1, r2, #26
 8004248:	d522      	bpl.n	8004290 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	0692      	lsls	r2, r2, #26
 800424e:	d51f      	bpl.n	8004290 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004250:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004254:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004256:	611a      	str	r2, [r3, #16]
}
 8004258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800425c:	f000 ba70 	b.w	8004740 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004260:	f7ff ff63 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff ff62 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
 800426a:	e776      	b.n	800415a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426c:	f7ff ff5d 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	4620      	mov	r0, r4
 8004272:	f7ff ff5c 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
 8004276:	e785      	b.n	8004184 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004278:	f7ff ff57 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff ff56 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
 8004282:	e793      	b.n	80041ac <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004284:	f7ff ff51 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff ff50 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
 800428e:	e7a2      	b.n	80041d6 <HAL_TIM_IRQHandler+0xa4>
 8004290:	bd10      	pop	{r4, pc}
	...

08004294 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004294:	4a30      	ldr	r2, [pc, #192]	; (8004358 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004296:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004298:	4290      	cmp	r0, r2
 800429a:	d012      	beq.n	80042c2 <TIM_Base_SetConfig+0x2e>
 800429c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042a0:	d00f      	beq.n	80042c2 <TIM_Base_SetConfig+0x2e>
 80042a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80042a6:	4290      	cmp	r0, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0x2e>
 80042aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ae:	4290      	cmp	r0, r2
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0x2e>
 80042b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042b6:	4290      	cmp	r0, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0x2e>
 80042ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80042be:	4290      	cmp	r0, r2
 80042c0:	d119      	bne.n	80042f6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80042c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	4a23      	ldr	r2, [pc, #140]	; (8004358 <TIM_Base_SetConfig+0xc4>)
 80042cc:	4290      	cmp	r0, r2
 80042ce:	d029      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042d4:	d026      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80042da:	4290      	cmp	r0, r2
 80042dc:	d022      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042e2:	4290      	cmp	r0, r2
 80042e4:	d01e      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ea:	4290      	cmp	r0, r2
 80042ec:	d01a      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80042f2:	4290      	cmp	r0, r2
 80042f4:	d016      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042f6:	4a19      	ldr	r2, [pc, #100]	; (800435c <TIM_Base_SetConfig+0xc8>)
 80042f8:	4290      	cmp	r0, r2
 80042fa:	d013      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 80042fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004300:	4290      	cmp	r0, r2
 8004302:	d00f      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 8004304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004308:	4290      	cmp	r0, r2
 800430a:	d00b      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 800430c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004310:	4290      	cmp	r0, r2
 8004312:	d007      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 8004314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004318:	4290      	cmp	r0, r2
 800431a:	d003      	beq.n	8004324 <TIM_Base_SetConfig+0x90>
 800431c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004320:	4290      	cmp	r0, r2
 8004322:	d103      	bne.n	800432c <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004328:	68ca      	ldr	r2, [r1, #12]
 800432a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	694a      	ldr	r2, [r1, #20]
 800432e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004332:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004334:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004336:	688b      	ldr	r3, [r1, #8]
 8004338:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800433a:	680b      	ldr	r3, [r1, #0]
 800433c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <TIM_Base_SetConfig+0xc4>)
 8004340:	4298      	cmp	r0, r3
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0xb8>
 8004344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004348:	4298      	cmp	r0, r3
 800434a:	d101      	bne.n	8004350 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800434c:	690b      	ldr	r3, [r1, #16]
 800434e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004350:	2301      	movs	r3, #1
 8004352:	6143      	str	r3, [r0, #20]
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40014000 	.word	0x40014000

08004360 <HAL_TIM_Base_Init>:
{
 8004360:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004362:	4604      	mov	r4, r0
 8004364:	b1a0      	cbz	r0, 8004390 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800436a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800436e:	b91b      	cbnz	r3, 8004378 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004370:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004374:	f001 fd12 	bl	8005d9c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800437e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004382:	f7ff ff87 	bl	8004294 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004386:	2301      	movs	r3, #1
  return HAL_OK;
 8004388:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800438a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800438e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004390:	2001      	movs	r0, #1
}
 8004392:	bd10      	pop	{r4, pc}

08004394 <HAL_TIM_PWM_Init>:
{
 8004394:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004396:	4604      	mov	r4, r0
 8004398:	b1a0      	cbz	r0, 80043c4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800439e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043a2:	b91b      	cbnz	r3, 80043ac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80043a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80043a8:	f7ff febe 	bl	8004128 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80043b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b6:	f7ff ff6d 	bl	8004294 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80043ba:	2301      	movs	r3, #1
  return HAL_OK;
 80043bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80043be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80043c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80043c4:	2001      	movs	r0, #1
}
 80043c6:	bd10      	pop	{r4, pc}

080043c8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c8:	6a03      	ldr	r3, [r0, #32]
 80043ca:	f023 0310 	bic.w	r3, r3, #16
{
 80043ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80043d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043d4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043d6:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80043d8:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043de:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80043e2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ea:	688d      	ldr	r5, [r1, #8]
 80043ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f0:	4d10      	ldr	r5, [pc, #64]	; (8004434 <TIM_OC2_SetConfig+0x6c>)
 80043f2:	42a8      	cmp	r0, r5
 80043f4:	d003      	beq.n	80043fe <TIM_OC2_SetConfig+0x36>
 80043f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043fa:	42a8      	cmp	r0, r5
 80043fc:	d114      	bne.n	8004428 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004404:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	4d0a      	ldr	r5, [pc, #40]	; (8004434 <TIM_OC2_SetConfig+0x6c>)
 800440a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800440c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	d003      	beq.n	800441a <TIM_OC2_SetConfig+0x52>
 8004412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004416:	42a8      	cmp	r0, r5
 8004418:	d106      	bne.n	8004428 <TIM_OC2_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800441a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800441c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004420:	698e      	ldr	r6, [r1, #24]
 8004422:	4335      	orrs	r5, r6
 8004424:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004428:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800442a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800442c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800442e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004430:	6203      	str	r3, [r0, #32]
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	40010000 	.word	0x40010000

08004438 <HAL_TIM_PWM_ConfigChannel>:
{
 8004438:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800443a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800443e:	4604      	mov	r4, r0
 8004440:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8004442:	2b01      	cmp	r3, #1
 8004444:	d010      	beq.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x30>
 8004446:	2301      	movs	r3, #1
  switch (Channel)
 8004448:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800444a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800444e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004452:	d043      	beq.n	80044dc <HAL_TIM_PWM_ConfigChannel+0xa4>
 8004454:	d809      	bhi.n	800446a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004456:	b1fa      	cbz	r2, 8004498 <HAL_TIM_PWM_ConfigChannel+0x60>
 8004458:	2a04      	cmp	r2, #4
 800445a:	d02e      	beq.n	80044ba <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 800445c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800445e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004460:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004464:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004468:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800446a:	2a10      	cmp	r2, #16
 800446c:	d047      	beq.n	80044fe <HAL_TIM_PWM_ConfigChannel+0xc6>
 800446e:	2a14      	cmp	r2, #20
 8004470:	d056      	beq.n	8004520 <HAL_TIM_PWM_ConfigChannel+0xe8>
 8004472:	2a0c      	cmp	r2, #12
 8004474:	d1f2      	bne.n	800445c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	f7ff fdc8 	bl	800400c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800447c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800447e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004486:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004496:	e030      	b.n	80044fa <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004498:	6820      	ldr	r0, [r4, #0]
 800449a:	f7ff fd4b 	bl	8003f34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800449e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	f042 0208 	orr.w	r2, r2, #8
 80044a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	f022 0204 	bic.w	r2, r2, #4
 80044b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044b6:	619a      	str	r2, [r3, #24]
      break;
 80044b8:	e7d0      	b.n	800445c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	f7ff ff84 	bl	80043c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044da:	e7ec      	b.n	80044b6 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	f7ff fd5d 	bl	8003f9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	f042 0208 	orr.w	r2, r2, #8
 80044ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	f022 0204 	bic.w	r2, r2, #4
 80044f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044fa:	61da      	str	r2, [r3, #28]
      break;
 80044fc:	e7ae      	b.n	800445c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	f7ff fdac 	bl	800405c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004504:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004506:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800451a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800451e:	e79d      	b.n	800445c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	f7ff fdc3 	bl	80040ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004526:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004528:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800452a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800453a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004540:	e7ec      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0xe4>

08004542 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004542:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004544:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8004546:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004548:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004550:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	6083      	str	r3, [r0, #8]
 8004554:	bd10      	pop	{r4, pc}
	...

08004558 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004558:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
{
 800455e:	b570      	push	{r4, r5, r6, lr}
 8004560:	4604      	mov	r4, r0
 8004562:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004566:	d017      	beq.n	8004598 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800456c:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800456e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004570:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004574:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004576:	4b41      	ldr	r3, [pc, #260]	; (800467c <HAL_TIM_ConfigClockSource+0x124>)
 8004578:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800457a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d065      	beq.n	800464e <HAL_TIM_ConfigClockSource+0xf6>
 8004582:	d815      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x58>
 8004584:	2b10      	cmp	r3, #16
 8004586:	d00c      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x4a>
 8004588:	d807      	bhi.n	800459a <HAL_TIM_ConfigClockSource+0x42>
 800458a:	b153      	cbz	r3, 80045a2 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800458c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800458e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004594:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004598:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800459a:	2b20      	cmp	r3, #32
 800459c:	d001      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x4a>
 800459e:	2b30      	cmp	r3, #48	; 0x30
 80045a0:	d1f4      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80045a2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ac:	4313      	orrs	r3, r2
 80045ae:	e01a      	b.n	80045e6 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d034      	beq.n	800461e <HAL_TIM_ConfigClockSource+0xc6>
 80045b4:	d819      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x92>
 80045b6:	2b50      	cmp	r3, #80	; 0x50
 80045b8:	d1e8      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	684a      	ldr	r2, [r1, #4]
 80045bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80045be:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c6:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80045ca:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045cc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ce:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80045d8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80045da:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80045dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80045e6:	6083      	str	r3, [r0, #8]
 80045e8:	e7d0      	b.n	800458c <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80045ea:	2b70      	cmp	r3, #112	; 0x70
 80045ec:	d00c      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0xb0>
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f2:	d1cb      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	68cb      	ldr	r3, [r1, #12]
 80045f6:	684a      	ldr	r2, [r1, #4]
 80045f8:	6889      	ldr	r1, [r1, #8]
 80045fa:	f7ff ffa2 	bl	8004542 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	6893      	ldr	r3, [r2, #8]
 8004602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004606:	e008      	b.n	800461a <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	68cb      	ldr	r3, [r1, #12]
 800460a:	684a      	ldr	r2, [r1, #4]
 800460c:	6889      	ldr	r1, [r1, #8]
 800460e:	f7ff ff98 	bl	8004542 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004616:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461a:	6093      	str	r3, [r2, #8]
      break;
 800461c:	e7b6      	b.n	800458c <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800461e:	684d      	ldr	r5, [r1, #4]
 8004620:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004622:	6a01      	ldr	r1, [r0, #32]
 8004624:	f021 0110 	bic.w	r1, r1, #16
 8004628:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800462c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004636:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800463a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800463e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004640:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004642:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004648:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800464c:	e7cb      	b.n	80045e6 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464e:	684a      	ldr	r2, [r1, #4]
 8004650:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004652:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004654:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004656:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800465e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004660:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004668:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800466c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800466e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004670:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004676:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800467a:	e7b4      	b.n	80045e6 <HAL_TIM_ConfigClockSource+0x8e>
 800467c:	fffe0088 	.word	0xfffe0088

08004680 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004680:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004684:	6a03      	ldr	r3, [r0, #32]
{
 8004686:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004688:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800468a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800468c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800468e:	ea23 0304 	bic.w	r3, r3, r4
 8004692:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004694:	6a03      	ldr	r3, [r0, #32]
 8004696:	431a      	orrs	r2, r3
 8004698:	6202      	str	r2, [r0, #32]
 800469a:	bd10      	pop	{r4, pc}

0800469c <HAL_TIM_PWM_Start>:
{
 800469c:	b510      	push	{r4, lr}
 800469e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a0:	2201      	movs	r2, #1
 80046a2:	6800      	ldr	r0, [r0, #0]
 80046a4:	f7ff ffec 	bl	8004680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <HAL_TIM_PWM_Start+0x44>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d011      	beq.n	80046d4 <HAL_TIM_PWM_Start+0x38>
 80046b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_TIM_PWM_Start+0x38>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <HAL_TIM_PWM_Start+0x48>)
 80046bc:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	2a06      	cmp	r2, #6
 80046c0:	d006      	beq.n	80046d0 <HAL_TIM_PWM_Start+0x34>
 80046c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80046c6:	d003      	beq.n	80046d0 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
}
 80046d0:	2000      	movs	r0, #0
 80046d2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80046d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
 80046dc:	e7ec      	b.n	80046b8 <HAL_TIM_PWM_Start+0x1c>
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	00010007 	.word	0x00010007

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f04f 0302 	mov.w	r3, #2
{
 80046f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80046f4:	d01f      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f8:	4d10      	ldr	r5, [pc, #64]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80046fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046fe:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004700:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004702:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004704:	d003      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8004706:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800470a:	42aa      	cmp	r2, r5
 800470c:	d103      	bne.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800470e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004712:	684d      	ldr	r5, [r1, #4]
 8004714:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004716:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800471c:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800471e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004722:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004724:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004728:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800472a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800472c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	2300      	movs	r3, #0
 8004732:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004736:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004738:	bd30      	pop	{r4, r5, pc}
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000

08004740 <HAL_TIMEx_CommutCallback>:
 8004740:	4770      	bx	lr

08004742 <HAL_TIMEx_BreakCallback>:
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004744:	4770      	bx	lr

08004746 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004746:	680b      	ldr	r3, [r1, #0]
 8004748:	684a      	ldr	r2, [r1, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004750:	6803      	ldr	r3, [r0, #0]
{
 8004752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004756:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800475a:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800475e:	694d      	ldr	r5, [r1, #20]
 8004760:	698c      	ldr	r4, [r1, #24]
 8004762:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8004766:	6a0f      	ldr	r7, [r1, #32]
 8004768:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800476a:	d014      	beq.n	8004796 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800476c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004774:	431a      	orrs	r2, r3
 8004776:	ea42 0209 	orr.w	r2, r2, r9
 800477a:	ea42 0208 	orr.w	r2, r2, r8
 800477e:	ea42 030c 	orr.w	r3, r2, ip
 8004782:	432b      	orrs	r3, r5
 8004784:	4323      	orrs	r3, r4
 8004786:	ea43 030e 	orr.w	r3, r3, lr
 800478a:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800478c:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800478e:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004790:	2000      	movs	r0, #0
 8004792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004796:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800479c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80047a0:	ea43 030e 	orr.w	r3, r3, lr
 80047a4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80047a8:	433b      	orrs	r3, r7
 80047aa:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80047ac:	431e      	orrs	r6, r3
 80047ae:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80047b2:	6006      	str	r6, [r0, #0]
 80047b4:	ea42 0208 	orr.w	r2, r2, r8
 80047b8:	ea42 030c 	orr.w	r3, r2, ip
 80047bc:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047be:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80047c0:	6043      	str	r3, [r0, #4]
 80047c2:	e7e5      	b.n	8004790 <FMC_SDRAM_Init+0x4a>

080047c4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80047c4:	2a01      	cmp	r2, #1
 80047c6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 80047ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047cc:	e891 4008 	ldmia.w	r1, {r3, lr}
 80047d0:	688f      	ldr	r7, [r1, #8]
 80047d2:	690d      	ldr	r5, [r1, #16]
 80047d4:	694e      	ldr	r6, [r1, #20]
 80047d6:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 80047d8:	d01b      	beq.n	8004812 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80047da:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80047dc:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80047e0:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80047e2:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80047e6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80047ea:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 80047ec:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 80047ee:	3901      	subs	r1, #1
 80047f0:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80047f4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80047f6:	1e7b      	subs	r3, r7, #1
 80047f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80047fc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8004800:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004804:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004808:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800480c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800480e:	2000      	movs	r0, #0
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004812:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004814:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004818:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800481a:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800481c:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004820:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004824:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8004828:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800482a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 800482e:	3901      	subs	r1, #1
 8004830:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8004834:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 8004838:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800483a:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800483c:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 8004840:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004844:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004846:	6086      	str	r6, [r0, #8]
 8004848:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800484c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004850:	60c3      	str	r3, [r0, #12]
 8004852:	e7dc      	b.n	800480e <FMC_SDRAM_Timing_Init+0x4a>

08004854 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004854:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8004858:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800485a:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 800485c:	68ca      	ldr	r2, [r1, #12]
{
 800485e:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8004860:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004862:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8004866:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8004868:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800486a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800486c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004870:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8004876:	b002      	add	sp, #8
 8004878:	bd10      	pop	{r4, pc}

0800487a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800487a:	6943      	ldr	r3, [r0, #20]
 800487c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004880:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004882:	2000      	movs	r0, #0
 8004884:	4770      	bx	lr
	...

08004888 <Calc_VDDA>:
  * @param  Filtered voltage reference calibration data
  * @retval Analog voltage supply value: VDDA
  */
float Calc_VDDA(float VREFINT_DATA)
{
	float VDDA = 3.3f * (*VREFIN_CAL_ADDR)/VREFINT_DATA;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <Calc_VDDA+0x1c>)
 800488a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80048a8 <Calc_VDDA+0x20>
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004898:	ee67 7a87 	vmul.f32	s15, s15, s14
	return VDDA;
}
 800489c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	1ff0f44a 	.word	0x1ff0f44a
 80048a8:	40533333 	.word	0x40533333

080048ac <Get_V_LOAD>:
  * @param  Filtered ADC data, VDDA
  * @retval Voltage from 0.0V -> VDDA
  */
float Convert_ADC_Voltage(float ADC_Data, float Vdd)
{
	float voltage = (Vdd/ADC_12_BIT_FULL_SCALE)*ADC_Data;
 80048ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 80048cc <Get_V_LOAD+0x20>
  * @retval Voltage at the load: V_LOAD
  */
float Get_V_LOAD(float Filtered_ADC_Data, float Vdd)
{
	float Voltage = Convert_ADC_Voltage(Filtered_ADC_Data, Vdd);
	return (VOLTMETER_LINEAR_COEFF*Voltage + VOLTMETER_CONSTANT_COEFF) * Voltage;
 80048b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80048d0 <Get_V_LOAD+0x24>
	float voltage = (Vdd/ADC_12_BIT_FULL_SCALE)*ADC_Data;
 80048b4:	eec0 0aa7 	vdiv.f32	s1, s1, s15
	return (VOLTMETER_LINEAR_COEFF*Voltage + VOLTMETER_CONSTANT_COEFF) * Voltage;
 80048b8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80048d4 <Get_V_LOAD+0x28>
	float voltage = (Vdd/ADC_12_BIT_FULL_SCALE)*ADC_Data;
 80048bc:	ee20 0a80 	vmul.f32	s0, s1, s0
	return (VOLTMETER_LINEAR_COEFF*Voltage + VOLTMETER_CONSTANT_COEFF) * Voltage;
 80048c0:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 80048c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	457ff000 	.word	0x457ff000
 80048d0:	3ca57a78 	.word	0x3ca57a78
 80048d4:	40bde4f7 	.word	0x40bde4f7

080048d8 <Get_I_LOAD>:
	float voltage = (Vdd/ADC_12_BIT_FULL_SCALE)*ADC_Data;
 80048d8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80048f8 <Get_I_LOAD+0x20>
  * @retval Current at the load: I_LOAD
  */
float Get_I_LOAD(float Filtered_ADC_Data, float Vdd)
{
	float Current = Convert_ADC_Voltage(Filtered_ADC_Data, Vdd);
	return (AMMETER_LINEAR_COEFF*Current + AMMETER_CONSTANT_COEFF)*Current;
 80048dc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80048fc <Get_I_LOAD+0x24>
	float voltage = (Vdd/ADC_12_BIT_FULL_SCALE)*ADC_Data;
 80048e0:	eec0 0aa7 	vdiv.f32	s1, s1, s15
	return (AMMETER_LINEAR_COEFF*Current + AMMETER_CONSTANT_COEFF)*Current;
 80048e4:	eddf 7a06 	vldr	s15, [pc, #24]	; 8004900 <Get_I_LOAD+0x28>
	float voltage = (Vdd/ADC_12_BIT_FULL_SCALE)*ADC_Data;
 80048e8:	ee20 0a80 	vmul.f32	s0, s1, s0
	return (AMMETER_LINEAR_COEFF*Current + AMMETER_CONSTANT_COEFF)*Current;
 80048ec:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 80048f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	457ff000 	.word	0x457ff000
 80048fc:	3bf9096c 	.word	0x3bf9096c
 8004900:	3e3367a1 	.word	0x3e3367a1

08004904 <Get_Position>:
  * @retval Position of the wind direction sensor
  */
float Get_Position(float Filtered_ADC_Data)
{
	return Filtered_ADC_Data * (DEGREES_PER_ROTATION/ADC_12_BIT_FULL_SCALE);
}
 8004904:	eddf 7a02 	vldr	s15, [pc, #8]	; 8004910 <Get_Position+0xc>
 8004908:	ee20 0a27 	vmul.f32	s0, s0, s15
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	3d960961 	.word	0x3d960961

08004914 <Filter_ADC_Readings>:
  * @param  ADC_Readings Pointer to array containing the unfiltered ADC readings
  * @param  Filtered_ADC_Readings Pointer to array in which the filtered ADC readings will be stored
  * @retval None
 */
void Filter_ADC_Readings(uint32_t ChannelCount, uint32_t FilterSize, volatile uint16_t *ADC_Readings, float *Filtered_ADC_Readings)
{
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	int i;
	int j;

	// Reset filtered ADC readings array to 0
	for(i = 0; i < ChannelCount; i++)
 800491a:	461c      	mov	r4, r3
	{
		Filtered_ADC_Readings[i] = 0;
 800491c:	2600      	movs	r6, #0
	for(i = 0; i < ChannelCount; i++)
 800491e:	42ac      	cmp	r4, r5
 8004920:	d106      	bne.n	8004930 <Filter_ADC_Readings+0x1c>
 8004922:	0040      	lsls	r0, r0, #1
 8004924:	2600      	movs	r6, #0
	}

	// Calculate sum of previous ADC_FILTER_SIZE readings
	for(i = 0; i < FilterSize; i++)
 8004926:	428e      	cmp	r6, r1
 8004928:	d117      	bne.n	800495a <Filter_ADC_Readings+0x46>
			Filtered_ADC_Readings[j] += ADC_Readings[(ChannelCount * i) + j];
		}
	}

	// Calculate average of previous ADC_FILTER_SIZE readings
	for(i = 0; i < ChannelCount; i++)
 800492a:	42a3      	cmp	r3, r4
 800492c:	d118      	bne.n	8004960 <Filter_ADC_Readings+0x4c>
	{
		Filtered_ADC_Readings[i] = Filtered_ADC_Readings[i] / FilterSize;
	}
}
 800492e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Filtered_ADC_Readings[i] = 0;
 8004930:	f844 6b04 	str.w	r6, [r4], #4
 8004934:	e7f3      	b.n	800491e <Filter_ADC_Readings+0xa>
			Filtered_ADC_Readings[j] += ADC_Readings[(ChannelCount * i) + j];
 8004936:	f83e 5b02 	ldrh.w	r5, [lr], #2
 800493a:	ed97 7a00 	vldr	s14, [r7]
 800493e:	b2ad      	uxth	r5, r5
 8004940:	ee07 5a90 	vmov	s15, r5
 8004944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494c:	ece7 7a01 	vstmia	r7!, {s15}
		for(j = 0; j < ChannelCount; j++)
 8004950:	42a7      	cmp	r7, r4
 8004952:	d1f0      	bne.n	8004936 <Filter_ADC_Readings+0x22>
	for(i = 0; i < FilterSize; i++)
 8004954:	3601      	adds	r6, #1
 8004956:	4402      	add	r2, r0
 8004958:	e7e5      	b.n	8004926 <Filter_ADC_Readings+0x12>
 800495a:	461f      	mov	r7, r3
 800495c:	4696      	mov	lr, r2
 800495e:	e7f7      	b.n	8004950 <Filter_ADC_Readings+0x3c>
		Filtered_ADC_Readings[i] = Filtered_ADC_Readings[i] / FilterSize;
 8004960:	ee07 6a90 	vmov	s15, r6
 8004964:	edd3 6a00 	vldr	s13, [r3]
 8004968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800496c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004970:	eca3 7a01 	vstmia	r3!, {s14}
 8004974:	e7d9      	b.n	800492a <Filter_ADC_Readings+0x16>
	...

08004978 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800497a:	2210      	movs	r2, #16
 800497c:	2100      	movs	r1, #0
 800497e:	4668      	mov	r0, sp
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
 8004980:	2401      	movs	r4, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8004982:	f001 fb11 	bl	8005fa8 <memset>
  hadc1.Instance = ADC1;
 8004986:	4826      	ldr	r0, [pc, #152]	; (8004a20 <MX_ADC1_Init+0xa8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <MX_ADC1_Init+0xac>)
 800498a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  hadc1.Init.ScanConvMode = ENABLE;
 8004992:	6104      	str	r4, [r0, #16]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004994:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004998:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800499a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800499e:	6144      	str	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80049a0:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80049a2:	e880 1008 	stmia.w	r0, {r3, ip}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80049a6:	2300      	movs	r3, #0
 80049a8:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80049aa:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049ac:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049b0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 80049b2:	2304      	movs	r3, #4
 80049b4:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80049b6:	f7fc ff6d 	bl	8001894 <HAL_ADC_Init>
 80049ba:	b108      	cbz	r0, 80049c0 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
 80049bc:	f000 ff1a 	bl	80057f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80049c0:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049c2:	4669      	mov	r1, sp
 80049c4:	4816      	ldr	r0, [pc, #88]	; (8004a20 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80049c6:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80049ca:	2307      	movs	r3, #7
 80049cc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049ce:	f7fd f8df 	bl	8001b90 <HAL_ADC_ConfigChannel>
 80049d2:	b108      	cbz	r0, 80049d8 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80049d4:	f000 ff0e 	bl	80057f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80049d8:	2004      	movs	r0, #4
 80049da:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049dc:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80049de:	e88d 0009 	stmia.w	sp, {r0, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049e2:	480f      	ldr	r0, [pc, #60]	; (8004a20 <MX_ADC1_Init+0xa8>)
 80049e4:	f7fd f8d4 	bl	8001b90 <HAL_ADC_ConfigChannel>
 80049e8:	b108      	cbz	r0, 80049ee <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80049ea:	f000 ff03 	bl	80057f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80049ee:	210c      	movs	r1, #12
 80049f0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049f2:	480b      	ldr	r0, [pc, #44]	; (8004a20 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80049f4:	e88d 000a 	stmia.w	sp, {r1, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049f8:	4669      	mov	r1, sp
 80049fa:	f7fd f8c9 	bl	8001b90 <HAL_ADC_ConfigChannel>
 80049fe:	b108      	cbz	r0, 8004a04 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8004a00:	f000 fef8 	bl	80057f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004a04:	2211      	movs	r2, #17
 8004a06:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a08:	4669      	mov	r1, sp
 8004a0a:	4805      	ldr	r0, [pc, #20]	; (8004a20 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004a0c:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a10:	f7fd f8be 	bl	8001b90 <HAL_ADC_ConfigChannel>
 8004a14:	b108      	cbz	r0, 8004a1a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8004a16:	f000 feed 	bl	80057f4 <Error_Handler>
  }

}
 8004a1a:	b004      	add	sp, #16
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000ac0 	.word	0x20000ac0
 8004a24:	40012000 	.word	0x40012000

08004a28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2e:	2214      	movs	r2, #20
 8004a30:	2100      	movs	r1, #0
 8004a32:	a803      	add	r0, sp, #12
 8004a34:	f001 fab8 	bl	8005fa8 <memset>
  if(adcHandle->Instance==ADC1)
 8004a38:	6832      	ldr	r2, [r6, #0]
 8004a3a:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <HAL_ADC_MspInit+0xb0>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d149      	bne.n	8004ad4 <HAL_ADC_MspInit+0xac>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a40:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a44:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8004a46:	a903      	add	r1, sp, #12
 8004a48:	4824      	ldr	r0, [pc, #144]	; (8004adc <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2500      	movs	r5, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44
 8004a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004a5a:	9200      	str	r2, [sp, #0]
 8004a5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a60:	f042 0204 	orr.w	r2, r2, #4
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
 8004a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a68:	f002 0204 	and.w	r2, r2, #4
 8004a6c:	9201      	str	r2, [sp, #4]
 8004a6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a7a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	9302      	str	r3, [sp, #8]
 8004a82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8004a84:	2304      	movs	r3, #4
 8004a86:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8004a88:	f7fd ff6e 	bl	8002968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8004a8c:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	4814      	ldr	r0, [pc, #80]	; (8004ae0 <HAL_ADC_MspInit+0xb8>)
 8004a90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a92:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8004a94:	9303      	str	r3, [sp, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004a96:	4c13      	ldr	r4, [pc, #76]	; (8004ae4 <HAL_ADC_MspInit+0xbc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9a:	f7fd ff65 	bl	8002968 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004aa0:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aa2:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa4:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004aa6:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004aa8:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004aaa:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab2:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab8:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004abe:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ac4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ac6:	f7fd f987 	bl	8001dd8 <HAL_DMA_Init>
 8004aca:	b108      	cbz	r0, 8004ad0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004acc:	f000 fe92 	bl	80057f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004ad0:	63b4      	str	r4, [r6, #56]	; 0x38
 8004ad2:	63a6      	str	r6, [r4, #56]	; 0x38

  }
}
 8004ad4:	b008      	add	sp, #32
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	40012000 	.word	0x40012000
 8004adc:	40020800 	.word	0x40020800
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	20000b08 	.word	0x20000b08
 8004ae8:	40026470 	.word	0x40026470

08004aec <Perturb_Observe>:
void Perturb_Observe(float V_LOAD, float I_LOAD)
{
	float P_IN_Current = V_LOAD*I_LOAD - I_LOAD*I_LOAD*(SHUNT_RESISTOR);
	
	/* P controller */
	if(V_LOAD > V_MAX)
 8004aec:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
	float P_IN_Current = V_LOAD*I_LOAD - I_LOAD*I_LOAD*(SHUNT_RESISTOR);
 8004af0:	eddf 6a71 	vldr	s13, [pc, #452]	; 8004cb8 <Perturb_Observe+0x1cc>
 8004af4:	ee20 7aa0 	vmul.f32	s14, s1, s1
 8004af8:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <Perturb_Observe+0x1d0>)
 8004afa:	eef0 5a66 	vmov.f32	s11, s13
	if(V_LOAD > V_MAX)
 8004afe:	eeb4 0ae7 	vcmpe.f32	s0, s15
	float P_IN_Current = V_LOAD*I_LOAD - I_LOAD*I_LOAD*(SHUNT_RESISTOR);
 8004b02:	ee26 7ac7 	vnmul.f32	s14, s13, s14
	if(V_LOAD > V_MAX)
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float P_IN_Current = V_LOAD*I_LOAD - I_LOAD*I_LOAD*(SHUNT_RESISTOR);
 8004b0a:	eea0 7a20 	vfma.f32	s14, s0, s1
{
 8004b0e:	b513      	push	{r0, r1, r4, lr}
 8004b10:	496b      	ldr	r1, [pc, #428]	; (8004cc0 <Perturb_Observe+0x1d4>)
	if(V_LOAD > V_MAX)
 8004b12:	dd50      	ble.n	8004bb6 <Perturb_Observe+0xca>
		{
			Duty_Cycle_Previous = Duty_Cycle_Current;
			Duty_Cycle_Current = Duty_Cycle_Previous + (V_LOAD - V_MAX)*BOOST_KP;
 8004b14:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004b18:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004cc4 <Perturb_Observe+0x1d8>
			Duty_Cycle_Previous = Duty_Cycle_Current;
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	486a      	ldr	r0, [pc, #424]	; (8004cc8 <Perturb_Observe+0x1dc>)
			Duty_Cycle_Current = Duty_Cycle_Previous + (V_LOAD - V_MAX)*BOOST_KP;
 8004b20:	ee77 7aa7 	vadd.f32	s15, s15, s15
			Duty_Cycle_Previous = Duty_Cycle_Current;
 8004b24:	b292      	uxth	r2, r2
 8004b26:	8002      	strh	r2, [r0, #0]
			Duty_Cycle_Current = Duty_Cycle_Previous + (V_LOAD - V_MAX)*BOOST_KP;
 8004b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b2c:	eddf 6a67 	vldr	s13, [pc, #412]	; 8004ccc <Perturb_Observe+0x1e0>
 8004b30:	8802      	ldrh	r2, [r0, #0]
 8004b32:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8004b36:	eddf 7a66 	vldr	s15, [pc, #408]	; 8004cd0 <Perturb_Observe+0x1e4>
 8004b3a:	b292      	uxth	r2, r2
 8004b3c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004b40:	ee07 2a90 	vmov	s15, r2
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
		}
	else if(V_LOAD < V_MIN)
		{
			Duty_Cycle_Previous = Duty_Cycle_Current;
			if(Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP > 0)							//Prevents underflow
			Duty_Cycle_Current = Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP;
 8004b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b50:	edcd 7a01 	vstr	s15, [sp, #4]
 8004b54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
					else Duty_Cycle_Current = 0;
				}
			else if(Duty_Cycle_Current - Duty_Cycle_Previous < 0)
				{
					Duty_Cycle_Previous = Duty_Cycle_Current;
					Duty_Cycle_Current = Duty_Cycle_Current + DELTA_DUTY_CYCLE;
 8004b58:	801a      	strh	r2, [r3, #0]
				}
		}
		/* Set to max duty cycle if its greater than the max value */
		if(Duty_Cycle_Current>MAX_PWM_COUNT) Duty_Cycle_Current = MAX_PWM_COUNT;
 8004b5a:	881a      	ldrh	r2, [r3, #0]
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	2acf      	cmp	r2, #207	; 0xcf
 8004b60:	d901      	bls.n	8004b66 <Perturb_Observe+0x7a>
 8004b62:	22cf      	movs	r2, #207	; 0xcf
 8004b64:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,Duty_Cycle_Current);
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	4a5a      	ldr	r2, [pc, #360]	; (8004cd4 <Perturb_Observe+0x1e8>)
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	6353      	str	r3, [r2, #52]	; 0x34
		P_IN_Previous = P_IN_Current;

		/* --------------Safety Contingencies-------------- */
		/* Stops the rotor if the electric brake is applied */
		if(Turbine_Status == STOP)
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <Perturb_Observe+0x1ec>)
		P_IN_Previous = P_IN_Current;
 8004b72:	ed81 7a00 	vstr	s14, [r1]
		if(Turbine_Status == STOP)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <Perturb_Observe+0x9c>
			{
				Duty_Cycle_Previous = MAX_PWM_COUNT;
 8004b7c:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <Perturb_Observe+0x1dc>)
 8004b7e:	21cf      	movs	r1, #207	; 0xcf
 8004b80:	8019      	strh	r1, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,Duty_Cycle_Previous);
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	6353      	str	r3, [r2, #52]	; 0x34
			}
		/* Stops the rotor from producing power incase s.c. occurs on the output */
		if(ABS(V_LOAD - I_LOAD*SHUNT_RESISTOR) < SC_VOLT_DIFF) Duty_Cycle_Previous = MAX_PWM_COUNT;
 8004b88:	eea0 0ae5 	vfms.f32	s0, s1, s11
 8004b8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	f340 8086 	ble.w	8004ca4 <Perturb_Observe+0x1b8>
 8004b98:	eddf 7a50 	vldr	s15, [pc, #320]	; 8004cdc <Perturb_Observe+0x1f0>
 8004b9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba4:	bf4c      	ite	mi
 8004ba6:	2301      	movmi	r3, #1
 8004ba8:	2300      	movpl	r3, #0
 8004baa:	b113      	cbz	r3, 8004bb2 <Perturb_Observe+0xc6>
 8004bac:	22cf      	movs	r2, #207	; 0xcf
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <Perturb_Observe+0x1dc>)
 8004bb0:	801a      	strh	r2, [r3, #0]

}
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd10      	pop	{r4, pc}
	else if(V_LOAD < V_MIN)
 8004bb6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004bba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	d529      	bpl.n	8004c18 <Perturb_Observe+0x12c>
			if(Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP > 0)							//Prevents underflow
 8004bc4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004bc8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004cc4 <Perturb_Observe+0x1d8>
 8004bcc:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004ccc <Perturb_Observe+0x1e0>
			Duty_Cycle_Previous = Duty_Cycle_Current;
 8004bd0:	881a      	ldrh	r2, [r3, #0]
			if(Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP > 0)							//Prevents underflow
 8004bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
			Duty_Cycle_Previous = Duty_Cycle_Current;
 8004bd6:	483c      	ldr	r0, [pc, #240]	; (8004cc8 <Perturb_Observe+0x1dc>)
 8004bd8:	b292      	uxth	r2, r2
			if(Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP > 0)							//Prevents underflow
 8004bda:	ee67 7aa6 	vmul.f32	s15, s15, s13
			Duty_Cycle_Previous = Duty_Cycle_Current;
 8004bde:	8002      	strh	r2, [r0, #0]
			if(Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP > 0)							//Prevents underflow
 8004be0:	8802      	ldrh	r2, [r0, #0]
 8004be2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004be6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8004cd0 <Perturb_Observe+0x1e4>
 8004bea:	b292      	uxth	r2, r2
 8004bec:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004bf0:	ee07 2a90 	vmov	s15, r2
 8004bf4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004bf8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8004bfc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	dd4c      	ble.n	8004ca0 <Perturb_Observe+0x1b4>
			Duty_Cycle_Current = Duty_Cycle_Previous - (V_MIN - V_LOAD)*BOOST_KP;
 8004c06:	8802      	ldrh	r2, [r0, #0]
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	ee07 2a90 	vmov	s15, r2
 8004c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004c16:	e799      	b.n	8004b4c <Perturb_Observe+0x60>
	else if(P_IN_Current - P_IN_Previous > 0.0f)
 8004c18:	edd1 7a00 	vldr	s15, [r1]
 8004c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c28:	dd1d      	ble.n	8004c66 <Perturb_Observe+0x17a>
			if(Duty_Cycle_Current - Duty_Cycle_Previous >= 0)
 8004c2a:	4827      	ldr	r0, [pc, #156]	; (8004cc8 <Perturb_Observe+0x1dc>)
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	8804      	ldrh	r4, [r0, #0]
 8004c30:	b292      	uxth	r2, r2
 8004c32:	b2a4      	uxth	r4, r4
 8004c34:	1b12      	subs	r2, r2, r4
 8004c36:	2a00      	cmp	r2, #0
					Duty_Cycle_Previous = Duty_Cycle_Current;
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	b292      	uxth	r2, r2
			if(Duty_Cycle_Current - Duty_Cycle_Previous >= 0)
 8004c3c:	db03      	blt.n	8004c46 <Perturb_Observe+0x15a>
					Duty_Cycle_Previous = Duty_Cycle_Current;
 8004c3e:	8002      	strh	r2, [r0, #0]
					Duty_Cycle_Current = Duty_Cycle_Current + DELTA_DUTY_CYCLE;
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	3205      	adds	r2, #5
 8004c44:	e00d      	b.n	8004c62 <Perturb_Observe+0x176>
			else if(Duty_Cycle_Current - Duty_Cycle_Previous < 0)
 8004c46:	8804      	ldrh	r4, [r0, #0]
 8004c48:	b2a4      	uxth	r4, r4
 8004c4a:	1b12      	subs	r2, r2, r4
 8004c4c:	2a00      	cmp	r2, #0
 8004c4e:	da84      	bge.n	8004b5a <Perturb_Observe+0x6e>
					Duty_Cycle_Previous = Duty_Cycle_Current;
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	b292      	uxth	r2, r2
					Duty_Cycle_Previous = Duty_Cycle_Current;
 8004c54:	8002      	strh	r2, [r0, #0]
					if(Duty_Cycle_Current - DELTA_DUTY_CYCLE > 0)					//Prevents underflow
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	2a05      	cmp	r2, #5
 8004c5c:	dd20      	ble.n	8004ca0 <Perturb_Observe+0x1b4>
					Duty_Cycle_Current = Duty_Cycle_Current - DELTA_DUTY_CYCLE;
 8004c5e:	881a      	ldrh	r2, [r3, #0]
 8004c60:	3a05      	subs	r2, #5
					Duty_Cycle_Current = Duty_Cycle_Current + DELTA_DUTY_CYCLE;
 8004c62:	b292      	uxth	r2, r2
 8004c64:	e778      	b.n	8004b58 <Perturb_Observe+0x6c>
	else if(P_IN_Current - P_IN_Previous < 0.0f)
 8004c66:	edd1 7a00 	vldr	s15, [r1]
 8004c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	f57f af70 	bpl.w	8004b5a <Perturb_Observe+0x6e>
			if(Duty_Cycle_Current - Duty_Cycle_Previous >= 0)
 8004c7a:	4813      	ldr	r0, [pc, #76]	; (8004cc8 <Perturb_Observe+0x1dc>)
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	8804      	ldrh	r4, [r0, #0]
 8004c80:	b292      	uxth	r2, r2
 8004c82:	b2a4      	uxth	r4, r4
 8004c84:	1b12      	subs	r2, r2, r4
 8004c86:	2a00      	cmp	r2, #0
					Duty_Cycle_Previous = Duty_Cycle_Current;
 8004c88:	881a      	ldrh	r2, [r3, #0]
 8004c8a:	b292      	uxth	r2, r2
			if(Duty_Cycle_Current - Duty_Cycle_Previous >= 0)
 8004c8c:	dae2      	bge.n	8004c54 <Perturb_Observe+0x168>
			else if(Duty_Cycle_Current - Duty_Cycle_Previous < 0)
 8004c8e:	8804      	ldrh	r4, [r0, #0]
 8004c90:	b2a4      	uxth	r4, r4
 8004c92:	1b12      	subs	r2, r2, r4
 8004c94:	2a00      	cmp	r2, #0
 8004c96:	f6bf af60 	bge.w	8004b5a <Perturb_Observe+0x6e>
					Duty_Cycle_Previous = Duty_Cycle_Current;
 8004c9a:	881a      	ldrh	r2, [r3, #0]
 8004c9c:	b292      	uxth	r2, r2
 8004c9e:	e7ce      	b.n	8004c3e <Perturb_Observe+0x152>
					else Duty_Cycle_Current = 0;
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	e759      	b.n	8004b58 <Perturb_Observe+0x6c>
		if(ABS(V_LOAD - I_LOAD*SHUNT_RESISTOR) < SC_VOLT_DIFF) Duty_Cycle_Previous = MAX_PWM_COUNT;
 8004ca4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004ce0 <Perturb_Observe+0x1f4>
 8004ca8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	bfcc      	ite	gt
 8004cb2:	2301      	movgt	r3, #1
 8004cb4:	2300      	movle	r3, #0
 8004cb6:	e778      	b.n	8004baa <Perturb_Observe+0xbe>
 8004cb8:	3e6147ae 	.word	0x3e6147ae
 8004cbc:	20000048 	.word	0x20000048
 8004cc0:	200008f0 	.word	0x200008f0
 8004cc4:	4abebc20 	.word	0x4abebc20
 8004cc8:	2000004a 	.word	0x2000004a
 8004ccc:	476bbe00 	.word	0x476bbe00
 8004cd0:	42c80000 	.word	0x42c80000
 8004cd4:	20000ccc 	.word	0x20000ccc
 8004cd8:	20000b6c 	.word	0x20000b6c
 8004cdc:	3c23d70a 	.word	0x3c23d70a
 8004ce0:	bc23d70a 	.word	0xbc23d70a

08004ce4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <MX_DMA_Init+0x2c>)
{
 8004ce6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004cea:	203c      	movs	r0, #60	; 0x3c
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004cec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004cf2:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004cf6:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004d00:	f7fc fff8 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004d04:	203c      	movs	r0, #60	; 0x3c
 8004d06:	f7fd f82d 	bl	8001d64 <HAL_NVIC_EnableIRQ>

}
 8004d0a:	b003      	add	sp, #12
 8004d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d10:	40023800 	.word	0x40023800

08004d14 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1a:	2214      	movs	r2, #20
 8004d1c:	2100      	movs	r1, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_PLUS_Pin|A_MINUS_Pin, GPIO_PIN_RESET);
 8004d1e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8004fe4 <MX_GPIO_Init+0x2d0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d22:	a80d      	add	r0, sp, #52	; 0x34
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d24:	4faa      	ldr	r7, [pc, #680]	; (8004fd0 <MX_GPIO_Init+0x2bc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d26:	f001 f93f 	bl	8005fa8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d2a:	4baa      	ldr	r3, [pc, #680]	; (8004fd4 <MX_GPIO_Init+0x2c0>)
  HAL_GPIO_WritePin(GPIOC, A_PLUS_Pin|A_MINUS_Pin, GPIO_PIN_RESET);
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d34:	2502      	movs	r5, #2

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d36:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d38:	f042 0210 	orr.w	r2, r2, #16
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d3c:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d40:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8004fe8 <MX_GPIO_Init+0x2d4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
 8004d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = CEC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8004d48:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8004fec <MX_GPIO_Init+0x2d8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d4c:	f002 0210 	and.w	r2, r2, #16
 8004d50:	9202      	str	r2, [sp, #8]
 8004d52:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004d62:	9203      	str	r2, [sp, #12]
 8004d64:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d68:	f042 0202 	orr.w	r2, r2, #2
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d70:	f002 0202 	and.w	r2, r2, #2
 8004d74:	9204      	str	r2, [sp, #16]
 8004d76:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d82:	f002 0208 	and.w	r2, r2, #8
 8004d86:	9205      	str	r2, [sp, #20]
 8004d88:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8c:	f042 0204 	orr.w	r2, r2, #4
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
 8004d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d94:	f002 0204 	and.w	r2, r2, #4
 8004d98:	9206      	str	r2, [sp, #24]
 8004d9a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	f002 0201 	and.w	r2, r2, #1
 8004daa:	9207      	str	r2, [sp, #28]
 8004dac:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
 8004db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004dbc:	9208      	str	r2, [sp, #32]
 8004dbe:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004dce:	9209      	str	r2, [sp, #36]	; 0x24
 8004dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ddc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004de0:	920a      	str	r2, [sp, #40]	; 0x28
 8004de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	f042 0220 	orr.w	r2, r2, #32
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
 8004dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dee:	f002 0220 	and.w	r2, r2, #32
 8004df2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, A_PLUS_Pin|A_MINUS_Pin, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	930c      	str	r3, [sp, #48]	; 0x30
 8004e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, A_PLUS_Pin|A_MINUS_Pin, GPIO_PIN_RESET);
 8004e0a:	f7fd fe97 	bl	8002b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_MINUS_GPIO_Port, B_MINUS_Pin, GPIO_PIN_RESET);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	4871      	ldr	r0, [pc, #452]	; (8004fd8 <MX_GPIO_Init+0x2c4>)
 8004e14:	f7fd fe92 	bl	8002b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_PLUS_GPIO_Port, B_PLUS_Pin, GPIO_PIN_RESET);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	486f      	ldr	r0, [pc, #444]	; (8004fdc <MX_GPIO_Init+0x2c8>)
 8004e1e:	f7fd fe8d 	bl	8002b3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8004e22:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e24:	a90d      	add	r1, sp, #52	; 0x34
 8004e26:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8004e28:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8004e2a:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8004e2e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e32:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e34:	f7fd fd98 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004e38:	2304      	movs	r3, #4
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004e3a:	a90d      	add	r1, sp, #52	; 0x34
 8004e3c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3e:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004e40:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004e42:	2309      	movs	r3, #9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004e46:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e48:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004e4a:	f7fd fd8d 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004e4e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e52:	a90d      	add	r1, sp, #52	; 0x34
 8004e54:	4862      	ldr	r0, [pc, #392]	; (8004fe0 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004e56:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e58:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5a:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e5c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e60:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e62:	f7fd fd81 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8004e66:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e6a:	a90d      	add	r1, sp, #52	; 0x34
 8004e6c:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e6e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8004e72:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e74:	f5a7 6780 	sub.w	r7, r7, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e78:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7c:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e7e:	f7fd fd73 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004e82:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e86:	a90d      	add	r1, sp, #52	; 0x34
 8004e88:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e8a:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004e8c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e8e:	2312      	movs	r3, #18
 8004e90:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e92:	2301      	movs	r3, #1
 8004e94:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e96:	2304      	movs	r3, #4
 8004e98:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9a:	f7fd fd65 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8004e9e:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea2:	a90d      	add	r1, sp, #52	; 0x34
 8004ea4:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8004ea8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004eaa:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eac:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8004eae:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb2:	f7fd fd59 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8004eb6:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb8:	a90d      	add	r1, sp, #52	; 0x34
 8004eba:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8004ebe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8004ec0:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8004ec4:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec6:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec8:	f7fd fd4e 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8004ecc:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ece:	a90d      	add	r1, sp, #52	; 0x34
 8004ed0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed2:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8004ed4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004ed6:	230b      	movs	r3, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004eda:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004edc:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ede:	f7fd fd43 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8004ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8004ee6:	a90d      	add	r1, sp, #52	; 0x34
 8004ee8:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eea:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8004eec:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004eee:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004ef2:	9311      	str	r3, [sp, #68]	; 0x44
 8004ef4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef6:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8004ef8:	f7fd fd36 	bl	8002968 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004efc:	2312      	movs	r3, #18
  GPIO_InitStruct.Pin = CEC_Pin;
 8004efe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8004f02:	a90d      	add	r1, sp, #52	; 0x34
 8004f04:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f06:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8004f08:	2304      	movs	r3, #4
  GPIO_InitStruct.Pin = CEC_Pin;
 8004f0a:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8004f0c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f10:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8004f12:	f7fd fd29 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8004f16:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8004f18:	a90d      	add	r1, sp, #52	; 0x34
 8004f1a:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8004f1e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f20:	2312      	movs	r3, #18
 8004f22:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f24:	2301      	movs	r3, #1
 8004f26:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004f28:	230b      	movs	r3, #11
 8004f2a:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8004f2c:	f7fd fd1c 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004f30:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8004f32:	a90d      	add	r1, sp, #52	; 0x34
 8004f34:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f36:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004f38:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f3a:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004f3e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f40:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8004f42:	f7fd fd11 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8004f46:	f248 1237 	movw	r2, #33079	; 0x8137
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f4a:	a90d      	add	r1, sp, #52	; 0x34
 8004f4c:	4824      	ldr	r0, [pc, #144]	; (8004fe0 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8004f4e:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f50:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f54:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f58:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f5a:	f7fd fd05 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin 
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin 
 8004f5e:	f24f 0229 	movw	r2, #61481	; 0xf029
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004f62:	a90d      	add	r1, sp, #52	; 0x34
 8004f64:	481d      	ldr	r0, [pc, #116]	; (8004fdc <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin 
 8004f66:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f68:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004f6c:	f7fd fcfc 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8004f70:	f24c 7203 	movw	r2, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f74:	a90d      	add	r1, sp, #52	; 0x34
 8004f76:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f78:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8004f7c:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7e:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f80:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f82:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f84:	f7fd fcf0 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8004f88:	f640 0208 	movw	r2, #2056	; 0x808
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8c:	a90d      	add	r1, sp, #52	; 0x34
 8004f8e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8004f92:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f96:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8004f98:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f9a:	f7fd fce5 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8004f9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fa2:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa4:	a90d      	add	r1, sp, #52	; 0x34
 8004fa6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8004fa8:	920d      	str	r2, [sp, #52]	; 0x34
 8004faa:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004fac:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb2:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fb4:	f7fd fcd8 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8004fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8004fbc:	a90d      	add	r1, sp, #52	; 0x34
 8004fbe:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc0:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8004fc2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fc4:	2305      	movs	r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fc8:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	9410      	str	r4, [sp, #64]	; 0x40
 8004fcc:	e010      	b.n	8004ff0 <MX_GPIO_Init+0x2dc>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40021400 	.word	0x40021400
 8004fdc:	40022400 	.word	0x40022400
 8004fe0:	40021800 	.word	0x40021800
 8004fe4:	40020800 	.word	0x40020800
 8004fe8:	40020400 	.word	0x40020400
 8004fec:	40020000 	.word	0x40020000
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8004ff0:	f7fd fcba 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8004ff4:	f44f 4151 	mov.w	r1, #53504	; 0xd100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ff8:	48a2      	ldr	r0, [pc, #648]	; (8005284 <MX_GPIO_Init+0x570>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8004ffc:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ffe:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005002:	f7fd fcb1 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin 
                           PIPin PIPin PIPin PIPin 
                           PIPin PIPin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8005006:	f240 61ff 	movw	r1, #1791	; 0x6ff
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800500a:	489e      	ldr	r0, [pc, #632]	; (8005284 <MX_GPIO_Init+0x570>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800500c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8005010:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005012:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005014:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005016:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005018:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800501a:	f7fd fca5 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin 
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 800501e:	21f8      	movs	r1, #248	; 0xf8
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005020:	4899      	ldr	r0, [pc, #612]	; (8005288 <MX_GPIO_Init+0x574>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005022:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8005024:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005026:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005028:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800502a:	f7fd fc9d 	bl	8002968 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 800502e:	2107      	movs	r1, #7
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8005030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8005034:	4895      	ldr	r0, [pc, #596]	; (800528c <MX_GPIO_Init+0x578>)
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8005036:	9111      	str	r1, [sp, #68]	; 0x44
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8005038:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 800503a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005040:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8005042:	f7fd fc91 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8005046:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005048:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800504a:	a90d      	add	r1, sp, #52	; 0x34
 800504c:	488f      	ldr	r0, [pc, #572]	; (800528c <MX_GPIO_Init+0x578>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800504e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8005050:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005052:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005056:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005058:	f7fd fc86 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 800505c:	2230      	movs	r2, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800505e:	a90d      	add	r1, sp, #52	; 0x34
 8005060:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005062:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8005064:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005068:	f7fd fc7e 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800506c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800506e:	a90d      	add	r1, sp, #52	; 0x34
 8005070:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005072:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8005074:	930d      	str	r3, [sp, #52]	; 0x34
 8005076:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507a:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800507c:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800507e:	f7fd fc73 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8005082:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8005086:	a90d      	add	r1, sp, #52	; 0x34
 8005088:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508a:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800508c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800508e:	2305      	movs	r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005092:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005094:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8005096:	f7fd fc67 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800509a:	f64f 023f 	movw	r2, #63551	; 0xf83f
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800509e:	a90d      	add	r1, sp, #52	; 0x34
 80050a0:	487b      	ldr	r0, [pc, #492]	; (8005290 <MX_GPIO_Init+0x57c>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80050a2:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050a4:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ac:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050ae:	f7fd fc5b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80050b2:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80050b4:	a90d      	add	r1, sp, #52	; 0x34
 80050b6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80050ba:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80050bc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80050c0:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c2:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80050c4:	f7fd fc50 	bl	8002968 <HAL_GPIO_Init>
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050c8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80050cc:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050d0:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80052a0 <MX_GPIO_Init+0x58c>
 80050d4:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80050d6:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050d8:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050da:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050dc:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050de:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050e0:	f7fd fc42 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80050e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80050e8:	a90d      	add	r1, sp, #52	; 0x34
 80050ea:	4866      	ldr	r0, [pc, #408]	; (8005284 <MX_GPIO_Init+0x570>)
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80050ec:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80050ee:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f0:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80050f2:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f6:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80050f8:	f7fd fc36 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 80050fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8005100:	a90d      	add	r1, sp, #52	; 0x34
 8005102:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005104:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8005106:	920d      	str	r2, [sp, #52]	; 0x34
 8005108:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800510e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8005110:	f7fd fc2a 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005114:	495f      	ldr	r1, [pc, #380]	; (8005294 <MX_GPIO_Init+0x580>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8005116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800511a:	485a      	ldr	r0, [pc, #360]	; (8005284 <MX_GPIO_Init+0x570>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800511c:	910e      	str	r1, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800511e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8005120:	930d      	str	r3, [sp, #52]	; 0x34
 8005122:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8005126:	f7fd fc1f 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 800512a:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 800512c:	a90d      	add	r1, sp, #52	; 0x34
 800512e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005130:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8005132:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005134:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005136:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005138:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 800513a:	f7fd fc15 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_PLUS_Pin|A_MINUS_Pin;
 800513e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005140:	a90d      	add	r1, sp, #52	; 0x34
 8005142:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = A_PLUS_Pin|A_MINUS_Pin;
 8005146:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005148:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514a:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800514c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514e:	f7fd fc0b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8005152:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8005154:	a90d      	add	r1, sp, #52	; 0x34
 8005156:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005158:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800515a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800515c:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8005160:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005162:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8005164:	f7fd fc00 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8005168:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800516a:	a90d      	add	r1, sp, #52	; 0x34
 800516c:	4847      	ldr	r0, [pc, #284]	; (800528c <MX_GPIO_Init+0x578>)
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800516e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8005170:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8005174:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005176:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800517a:	f7fd fbf5 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 800517e:	2248      	movs	r2, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005180:	a90d      	add	r1, sp, #52	; 0x34
 8005182:	4842      	ldr	r0, [pc, #264]	; (800528c <MX_GPIO_Init+0x578>)
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8005184:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005186:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800518a:	f7fd fbed 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_MINUS_Pin;
 800518e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(B_MINUS_GPIO_Port, &GPIO_InitStruct);
 8005190:	a90d      	add	r1, sp, #52	; 0x34
 8005192:	483f      	ldr	r0, [pc, #252]	; (8005290 <MX_GPIO_Init+0x57c>)
  GPIO_InitStruct.Pin = B_MINUS_Pin;
 8005194:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005196:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B_MINUS_GPIO_Port, &GPIO_InitStruct);
 800519e:	f7fd fbe3 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80051a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051a6:	a90d      	add	r1, sp, #52	; 0x34
 80051a8:	4839      	ldr	r0, [pc, #228]	; (8005290 <MX_GPIO_Init+0x57c>)
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80051aa:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ac:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051b0:	f7fd fbda 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80051b4:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80051b6:	a90d      	add	r1, sp, #52	; 0x34
 80051b8:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ba:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80051bc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80051be:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80051c2:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c4:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80051c6:	f7fd fbcf 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80051ca:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051cc:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ce:	a90d      	add	r1, sp, #52	; 0x34
 80051d0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80051d2:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051d4:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051da:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051dc:	f7fd fbc4 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051e0:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e2:	a90d      	add	r1, sp, #52	; 0x34
 80051e4:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051e8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80051ea:	2309      	movs	r3, #9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80051ee:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f0:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f2:	f7fd fbb9 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80051f6:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80051f8:	a90d      	add	r1, sp, #52	; 0x34
 80051fa:	4827      	ldr	r0, [pc, #156]	; (8005298 <MX_GPIO_Init+0x584>)
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80051fc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051fe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005200:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005202:	f7fd fbb1 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8005206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800520a:	a90d      	add	r1, sp, #52	; 0x34
 800520c:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800520e:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8005210:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005212:	2312      	movs	r3, #18
 8005214:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005216:	2301      	movs	r3, #1
 8005218:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800521a:	2304      	movs	r3, #4
 800521c:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800521e:	f7fd fba3 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8005222:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8005224:	a90d      	add	r1, sp, #52	; 0x34
 8005226:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 800522a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800522c:	2309      	movs	r3, #9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005230:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005232:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8005234:	f7fd fb98 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005238:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	a90d      	add	r1, sp, #52	; 0x34
 800523c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523e:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005240:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005242:	230b      	movs	r3, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005246:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005248:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524a:	f7fd fb8d 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 800524e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8005250:	a90d      	add	r1, sp, #52	; 0x34
 8005252:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005254:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = B_USER_Pin;
 8005256:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <MX_GPIO_Init+0x588>)
 800525a:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800525c:	f7fd fb84 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8005260:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8005264:	a90d      	add	r1, sp, #52	; 0x34
 8005266:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 800526a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800526c:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005270:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005272:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8005274:	f7fd fb78 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8005278:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800527a:	a90d      	add	r1, sp, #52	; 0x34
 800527c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800527e:	940e      	str	r4, [sp, #56]	; 0x38
 8005280:	e010      	b.n	80052a4 <MX_GPIO_Init+0x590>
 8005282:	bf00      	nop
 8005284:	40022000 	.word	0x40022000
 8005288:	40022800 	.word	0x40022800
 800528c:	40021800 	.word	0x40021800
 8005290:	40021400 	.word	0x40021400
 8005294:	10120000 	.word	0x10120000
 8005298:	40022400 	.word	0x40022400
 800529c:	10110000 	.word	0x10110000
 80052a0:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 80052a4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80052a8:	f7fd fb5e 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80052ac:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ae:	a90d      	add	r1, sp, #52	; 0x34
 80052b0:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80052b4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80052b6:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80052ba:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052bc:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052be:	f7fd fb53 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80052c2:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80052c4:	a90d      	add	r1, sp, #52	; 0x34
 80052c6:	4816      	ldr	r0, [pc, #88]	; (8005320 <MX_GPIO_Init+0x60c>)
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80052c8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80052ca:	230d      	movs	r3, #13
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80052ce:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80052d4:	f7fd fb48 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80052d8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80052da:	a90d      	add	r1, sp, #52	; 0x34
 80052dc:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052de:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80052e0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80052e2:	2309      	movs	r3, #9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80052e6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e8:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80052ea:	f7fd fb3d 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_PLUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ee:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(B_PLUS_GPIO_Port, &GPIO_InitStruct);
 80052f0:	a90d      	add	r1, sp, #52	; 0x34
 80052f2:	480b      	ldr	r0, [pc, #44]	; (8005320 <MX_GPIO_Init+0x60c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052f4:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = B_PLUS_Pin;
 80052f6:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fa:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B_PLUS_GPIO_Port, &GPIO_InitStruct);
 80052fc:	f7fd fb34 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8005300:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005304:	a90d      	add	r1, sp, #52	; 0x34
 8005306:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800530a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800530c:	2305      	movs	r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005310:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005312:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005314:	f7fd fb28 	bl	8002968 <HAL_GPIO_Init>

}
 8005318:	b013      	add	sp, #76	; 0x4c
 800531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	40022400 	.word	0x40022400

08005324 <Get_Touch>:
  * @brief  Check for touch input.
  * @param  None
  * @retval None
  */
void Get_Touch(void)
{
 8005324:	b538      	push	{r3, r4, r5, lr}
	BSP_TS_GetState(&TS_State);
 8005326:	4c28      	ldr	r4, [pc, #160]	; (80053c8 <Get_Touch+0xa4>)
 8005328:	4620      	mov	r0, r4
 800532a:	f7fc f9e7 	bl	80016fc <BSP_TS_GetState>
    if(TS_State.touchDetected)
 800532e:	7823      	ldrb	r3, [r4, #0]
 8005330:	b323      	cbz	r3, 800537c <Get_Touch+0x58>
		{
    	 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	f7fb fdfb 	bl	8000f30 <BSP_LCD_SetTextColor>
    	 BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800533a:	4824      	ldr	r0, [pc, #144]	; (80053cc <Get_Touch+0xa8>)
 800533c:	f7fb fe04 	bl	8000f48 <BSP_LCD_SetBackColor>
		 /* Get X and Y position of the touch position */
		 x = TS_State.touchX[0];
 8005340:	8862      	ldrh	r2, [r4, #2]
 8005342:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <Get_Touch+0xac>)
		 y = TS_State.touchY[0];
 8005344:	4923      	ldr	r1, [pc, #140]	; (80053d4 <Get_Touch+0xb0>)
		 x = TS_State.touchX[0];
 8005346:	801a      	strh	r2, [r3, #0]
		 y = TS_State.touchY[0];
 8005348:	88e3      	ldrh	r3, [r4, #6]
 800534a:	800b      	strh	r3, [r1, #0]
		 if(x >= 180 && x<=320)
 800534c:	f1a2 01b4 	sub.w	r1, r2, #180	; 0xb4
 8005350:	298c      	cmp	r1, #140	; 0x8c
 8005352:	d828      	bhi.n	80053a6 <Get_Touch+0x82>
		 {
			 if(y >= 725 && y<=800)
 8005354:	f46f 7235 	mvn.w	r2, #724	; 0x2d4
 8005358:	4413      	add	r3, r2
 800535a:	2b4b      	cmp	r3, #75	; 0x4b
 800535c:	d80e      	bhi.n	800537c <Get_Touch+0x58>
			 	 {
				 	 if(Turbine_Status == START)
 800535e:	4c1e      	ldr	r4, [pc, #120]	; (80053d8 <Get_Touch+0xb4>)
 8005360:	7825      	ldrb	r5, [r4, #0]
 8005362:	b9a5      	cbnz	r5, 800538e <Get_Touch+0x6a>
				 	 {

				 		 BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()-65, (uint8_t *)"START", CENTER_MODE);
 8005364:	f7fb fda2 	bl	8000eac <BSP_LCD_GetYSize>
 8005368:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800536c:	2301      	movs	r3, #1
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <Get_Touch+0xb8>)
 8005370:	b289      	uxth	r1, r1
 8005372:	4628      	mov	r0, r5
 8005374:	f7fb fff4 	bl	8001360 <BSP_LCD_DisplayStringAt>
				 		 Turbine_Status = STOP;
 8005378:	2301      	movs	r3, #1
				 	 }
				 	 else
				 	 {
				 		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()-65, (uint8_t *)" STOP ", CENTER_MODE);
				 		Turbine_Status = START;
 800537a:	7023      	strb	r3, [r4, #0]
					 {
						 Turbine_Direction = CLOCKWISE;
					 }
				 }
		 }
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800537c:	4818      	ldr	r0, [pc, #96]	; (80053e0 <Get_Touch+0xbc>)
 800537e:	f7fb fdd7 	bl	8000f30 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005382:	f04f 30ff 	mov.w	r0, #4294967295

}
 8005386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800538a:	f7fb bddd 	b.w	8000f48 <BSP_LCD_SetBackColor>
				 		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()-65, (uint8_t *)" STOP ", CENTER_MODE);
 800538e:	f7fb fd8d 	bl	8000eac <BSP_LCD_GetYSize>
 8005392:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8005396:	2301      	movs	r3, #1
 8005398:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <Get_Touch+0xc0>)
 800539a:	b289      	uxth	r1, r1
 800539c:	2000      	movs	r0, #0
 800539e:	f7fb ffdf 	bl	8001360 <BSP_LCD_DisplayStringAt>
				 		Turbine_Status = START;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e7e9      	b.n	800537a <Get_Touch+0x56>
		 else if(y >= 660 && y<=700)
 80053a6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80053aa:	2b28      	cmp	r3, #40	; 0x28
 80053ac:	d8e6      	bhi.n	800537c <Get_Touch+0x58>
					 if(x >= 150 && x<250)
 80053ae:	f1a2 0396 	sub.w	r3, r2, #150	; 0x96
 80053b2:	2b63      	cmp	r3, #99	; 0x63
 80053b4:	d803      	bhi.n	80053be <Get_Touch+0x9a>
						 Turbine_Direction = COUNTER_CLOCKWISE;
 80053b6:	2201      	movs	r2, #1
						 Turbine_Direction = CLOCKWISE;
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <Get_Touch+0xc4>)
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e7de      	b.n	800537c <Get_Touch+0x58>
					 else if(270 >= 250 && x<=345)
 80053be:	f5b2 7fad 	cmp.w	r2, #346	; 0x15a
 80053c2:	d2db      	bcs.n	800537c <Get_Touch+0x58>
						 Turbine_Direction = CLOCKWISE;
 80053c4:	2200      	movs	r2, #0
 80053c6:	e7f7      	b.n	80053b8 <Get_Touch+0x94>
 80053c8:	20000926 	.word	0x20000926
 80053cc:	ff0000ff 	.word	0xff0000ff
 80053d0:	20000b68 	.word	0x20000b68
 80053d4:	20000b6a 	.word	0x20000b6a
 80053d8:	20000b6c 	.word	0x20000b6c
 80053dc:	0800b55f 	.word	0x0800b55f
 80053e0:	ffff0000 	.word	0xffff0000
 80053e4:	0800b565 	.word	0x0800b565
 80053e8:	20000b6d 	.word	0x20000b6d

080053ec <Display_Readings>:
	  sprintf(LCD_String_Buffer, "      V_LOAD =   %2.3f[V]", V_LOAD);
 80053ec:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80053f0:	4939      	ldr	r1, [pc, #228]	; (80054d8 <Display_Readings+0xec>)
{
 80053f2:	b510      	push	{r4, lr}
	  sprintf(LCD_String_Buffer, "      V_LOAD =   %2.3f[V]", V_LOAD);
 80053f4:	4c39      	ldr	r4, [pc, #228]	; (80054dc <Display_Readings+0xf0>)
{
 80053f6:	ed2d 8b04 	vpush	{d8-d9}
 80053fa:	eef0 9a60 	vmov.f32	s19, s1
 80053fe:	ee08 0a10 	vmov	s16, r0
	  sprintf(LCD_String_Buffer, "      V_LOAD =   %2.3f[V]", V_LOAD);
 8005402:	4620      	mov	r0, r4
{
 8005404:	eeb0 9a41 	vmov.f32	s18, s2
 8005408:	eef0 8a61 	vmov.f32	s17, s3
	  sprintf(LCD_String_Buffer, "      V_LOAD =   %2.3f[V]", V_LOAD);
 800540c:	ec53 2b17 	vmov	r2, r3, d7
 8005410:	f000 fdd2 	bl	8005fb8 <sprintf>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, (uint8_t *)LCD_String_Buffer, LEFT_MODE);
 8005414:	f7fb fd4a 	bl	8000eac <BSP_LCD_GetYSize>
 8005418:	4622      	mov	r2, r4
 800541a:	f3c0 014f 	ubfx	r1, r0, #1, #16
 800541e:	2303      	movs	r3, #3
 8005420:	2000      	movs	r0, #0
 8005422:	f7fb ff9d 	bl	8001360 <BSP_LCD_DisplayStringAt>
	  sprintf(LCD_String_Buffer, "      I_LOAD =   %2.3f[A]",I_LOAD);
 8005426:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <Display_Readings+0xf4>)
 800542c:	4620      	mov	r0, r4
 800542e:	ec53 2b17 	vmov	r2, r3, d7
 8005432:	f000 fdc1 	bl	8005fb8 <sprintf>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35, (uint8_t *)LCD_String_Buffer, LEFT_MODE);
 8005436:	f7fb fd39 	bl	8000eac <BSP_LCD_GetYSize>
 800543a:	4622      	mov	r2, r4
 800543c:	0841      	lsrs	r1, r0, #1
 800543e:	2303      	movs	r3, #3
 8005440:	2000      	movs	r0, #0
 8005442:	3123      	adds	r1, #35	; 0x23
 8005444:	b289      	uxth	r1, r1
 8005446:	f7fb ff8b 	bl	8001360 <BSP_LCD_DisplayStringAt>
	  sprintf(LCD_String_Buffer, "      Power  =   %2.3f[W]",P_IN_Previous);
 800544a:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
 800544e:	4925      	ldr	r1, [pc, #148]	; (80054e4 <Display_Readings+0xf8>)
 8005450:	4620      	mov	r0, r4
 8005452:	ec53 2b17 	vmov	r2, r3, d7
 8005456:	f000 fdaf 	bl	8005fb8 <sprintf>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 65, (uint8_t *)LCD_String_Buffer, LEFT_MODE);
 800545a:	f7fb fd27 	bl	8000eac <BSP_LCD_GetYSize>
 800545e:	4622      	mov	r2, r4
 8005460:	0841      	lsrs	r1, r0, #1
 8005462:	2303      	movs	r3, #3
 8005464:	2000      	movs	r0, #0
 8005466:	3141      	adds	r1, #65	; 0x41
 8005468:	b289      	uxth	r1, r1
 800546a:	f7fb ff79 	bl	8001360 <BSP_LCD_DisplayStringAt>
	  sprintf(LCD_String_Buffer, "  Duty Cycle =   %3.2f%%  ",((float)Duty_Cycle_Previous/207.0f)*100.0f);
 800546e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8005472:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80054e8 <Display_Readings+0xfc>
 8005476:	4620      	mov	r0, r4
 8005478:	491c      	ldr	r1, [pc, #112]	; (80054ec <Display_Readings+0x100>)
 800547a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800547e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80054f0 <Display_Readings+0x104>
 8005482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005486:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800548a:	ec53 2b17 	vmov	r2, r3, d7
 800548e:	f000 fd93 	bl	8005fb8 <sprintf>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 95, (uint8_t *)LCD_String_Buffer, LEFT_MODE);
 8005492:	f7fb fd0b 	bl	8000eac <BSP_LCD_GetYSize>
 8005496:	4622      	mov	r2, r4
 8005498:	0841      	lsrs	r1, r0, #1
 800549a:	2303      	movs	r3, #3
 800549c:	2000      	movs	r0, #0
 800549e:	315f      	adds	r1, #95	; 0x5f
 80054a0:	b289      	uxth	r1, r1
 80054a2:	f7fb ff5d 	bl	8001360 <BSP_LCD_DisplayStringAt>
	  sprintf(LCD_String_Buffer, "    Position = %3.2f deg",Position);
 80054a6:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 80054aa:	4912      	ldr	r1, [pc, #72]	; (80054f4 <Display_Readings+0x108>)
 80054ac:	4620      	mov	r0, r4
 80054ae:	ec53 2b17 	vmov	r2, r3, d7
 80054b2:	f000 fd81 	bl	8005fb8 <sprintf>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 125, (uint8_t *)LCD_String_Buffer, LEFT_MODE);
 80054b6:	f7fb fcf9 	bl	8000eac <BSP_LCD_GetYSize>
 80054ba:	4622      	mov	r2, r4
 80054bc:	0841      	lsrs	r1, r0, #1
 80054be:	2303      	movs	r3, #3
 80054c0:	2000      	movs	r0, #0
 80054c2:	317d      	adds	r1, #125	; 0x7d
 80054c4:	b289      	uxth	r1, r1
 80054c6:	f7fb ff4b 	bl	8001360 <BSP_LCD_DisplayStringAt>
}
 80054ca:	ecbd 8b04 	vpop	{d8-d9}
 80054ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  Get_Touch();
 80054d2:	f7ff bf27 	b.w	8005324 <Get_Touch>
 80054d6:	bf00      	nop
 80054d8:	0800b4dd 	.word	0x0800b4dd
 80054dc:	200008f4 	.word	0x200008f4
 80054e0:	0800b4f7 	.word	0x0800b4f7
 80054e4:	0800b511 	.word	0x0800b511
 80054e8:	434f0000 	.word	0x434f0000
 80054ec:	0800b52b 	.word	0x0800b52b
 80054f0:	42c80000 	.word	0x42c80000
 80054f4:	0800b546 	.word	0x0800b546

080054f8 <LCD_Config>:
  * @brief  Configure the LCD for display.
  * @param  None
  * @retval None
  */
void LCD_Config(void)
{
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t  lcd_status = LCD_OK;
  uint32_t	ts_status  = TS_OK;

  /* Initialize the LCD */
  lcd_status = BSP_LCD_InitEx(LCD_ORIENTATION_PORTRAIT);;
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fb fde6 	bl	80010cc <BSP_LCD_InitEx>
 8005500:	4604      	mov	r4, r0
  while(lcd_status != LCD_OK);
 8005502:	2c00      	cmp	r4, #0
 8005504:	d1fd      	bne.n	8005502 <LCD_Config+0xa>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8005506:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800550a:	4620      	mov	r0, r4
 800550c:	f7fb fcd4 	bl	8000eb8 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	f7fb fd30 	bl	8000f78 <BSP_LCD_Clear>

  /* Set LCD Example description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005518:	484f      	ldr	r0, [pc, #316]	; (8005658 <LCD_Config+0x160>)
 800551a:	f7fb fd09 	bl	8000f30 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 120);
  BSP_LCD_FillRect(BSP_LCD_GetXSize()/3,BSP_LCD_GetYSize()-80,BSP_LCD_GetXSize()/3,50);
 800551e:	2503      	movs	r5, #3
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 120);
 8005520:	f7fb fcbe 	bl	8000ea0 <BSP_LCD_GetXSize>
 8005524:	4621      	mov	r1, r4
 8005526:	b282      	uxth	r2, r0
 8005528:	2378      	movs	r3, #120	; 0x78
 800552a:	4620      	mov	r0, r4
 800552c:	f7fb fd40 	bl	8000fb0 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(BSP_LCD_GetXSize()/3,BSP_LCD_GetYSize()-80,BSP_LCD_GetXSize()/3,50);
 8005530:	f7fb fcb6 	bl	8000ea0 <BSP_LCD_GetXSize>
 8005534:	4606      	mov	r6, r0
 8005536:	f7fb fcb9 	bl	8000eac <BSP_LCD_GetYSize>
 800553a:	4607      	mov	r7, r0
 800553c:	f7fb fcb0 	bl	8000ea0 <BSP_LCD_GetXSize>
 8005540:	2332      	movs	r3, #50	; 0x32
 8005542:	f1a7 0150 	sub.w	r1, r7, #80	; 0x50
 8005546:	fbb0 f2f5 	udiv	r2, r0, r5
 800554a:	fbb6 f0f5 	udiv	r0, r6, r5
 800554e:	b292      	uxth	r2, r2
 8005550:	b289      	uxth	r1, r1
 8005552:	b280      	uxth	r0, r0
 8005554:	f7fb fd2c 	bl	8000fb0 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(BSP_LCD_GetXSize()/4,BSP_LCD_GetYSize()-145,BSP_LCD_GetXSize()/4,50);
 8005558:	f7fb fca2 	bl	8000ea0 <BSP_LCD_GetXSize>
 800555c:	4607      	mov	r7, r0
 800555e:	f7fb fca5 	bl	8000eac <BSP_LCD_GetYSize>
 8005562:	4606      	mov	r6, r0
 8005564:	f7fb fc9c 	bl	8000ea0 <BSP_LCD_GetXSize>
 8005568:	2332      	movs	r3, #50	; 0x32
 800556a:	f1a6 0191 	sub.w	r1, r6, #145	; 0x91
 800556e:	f3c0 028f 	ubfx	r2, r0, #2, #16
 8005572:	f3c7 008f 	ubfx	r0, r7, #2, #16
 8005576:	b289      	uxth	r1, r1
 8005578:	f7fb fd1a 	bl	8000fb0 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,BSP_LCD_GetYSize()-145,BSP_LCD_GetXSize()/4,50);
 800557c:	f7fb fc90 	bl	8000ea0 <BSP_LCD_GetXSize>
 8005580:	4607      	mov	r7, r0
 8005582:	f7fb fc93 	bl	8000eac <BSP_LCD_GetYSize>
 8005586:	4606      	mov	r6, r0
 8005588:	f7fb fc8a 	bl	8000ea0 <BSP_LCD_GetXSize>
 800558c:	2332      	movs	r3, #50	; 0x32
 800558e:	f1a6 0191 	sub.w	r1, r6, #145	; 0x91
 8005592:	f3c0 028f 	ubfx	r2, r0, #2, #16
 8005596:	f3c7 004f 	ubfx	r0, r7, #1, #16
 800559a:	b289      	uxth	r1, r1
 800559c:	f7fb fd08 	bl	8000fb0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	f7fb fcc4 	bl	8000f30 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80055a8:	482b      	ldr	r0, [pc, #172]	; (8005658 <LCD_Config+0x160>)
 80055aa:	f7fb fccd 	bl	8000f48 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80055ae:	482b      	ldr	r0, [pc, #172]	; (800565c <LCD_Config+0x164>)
 80055b0:	f7fb fcd6 	bl	8000f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/8, BSP_LCD_GetYSize()-130, (uint8_t *)"RIGHT", CENTER_MODE);
 80055b4:	f7fb fc74 	bl	8000ea0 <BSP_LCD_GetXSize>
 80055b8:	4606      	mov	r6, r0
 80055ba:	f7fb fc77 	bl	8000eac <BSP_LCD_GetYSize>
 80055be:	f1a0 0182 	sub.w	r1, r0, #130	; 0x82
 80055c2:	2301      	movs	r3, #1
 80055c4:	4a26      	ldr	r2, [pc, #152]	; (8005660 <LCD_Config+0x168>)
 80055c6:	b289      	uxth	r1, r1
 80055c8:	f3c6 00cf 	ubfx	r0, r6, #3, #16
 80055cc:	f7fb fec8 	bl	8001360 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/4, BSP_LCD_GetYSize()-130, (uint8_t *)"  LEFT", LEFT_MODE);
 80055d0:	f7fb fc66 	bl	8000ea0 <BSP_LCD_GetXSize>
 80055d4:	4606      	mov	r6, r0
 80055d6:	f7fb fc69 	bl	8000eac <BSP_LCD_GetYSize>
 80055da:	f1a0 0182 	sub.w	r1, r0, #130	; 0x82
 80055de:	462b      	mov	r3, r5
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <LCD_Config+0x16c>)
 80055e2:	b289      	uxth	r1, r1
 80055e4:	f3c6 008f 	ubfx	r0, r6, #2, #16
 80055e8:	f7fb feba 	bl	8001360 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()-65, (uint8_t *)"STOP", CENTER_MODE);
 80055ec:	f7fb fc5e 	bl	8000eac <BSP_LCD_GetYSize>
 80055f0:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80055f4:	2301      	movs	r3, #1
 80055f6:	4620      	mov	r0, r4
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <LCD_Config+0x170>)
 80055fa:	b289      	uxth	r1, r1
 80055fc:	f7fb feb0 	bl	8001360 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"Wind Turbine Controller", CENTER_MODE);
 8005600:	2301      	movs	r3, #1
 8005602:	4a1a      	ldr	r2, [pc, #104]	; (800566c <LCD_Config+0x174>)
 8005604:	210a      	movs	r1, #10
 8005606:	4620      	mov	r0, r4
 8005608:	f7fb feaa 	bl	8001360 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 800560c:	4818      	ldr	r0, [pc, #96]	; (8005670 <LCD_Config+0x178>)
 800560e:	f7fb fca7 	bl	8000f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"ELEC 391", CENTER_MODE);
 8005612:	4620      	mov	r0, r4
 8005614:	2301      	movs	r3, #1
 8005616:	4a17      	ldr	r2, [pc, #92]	; (8005674 <LCD_Config+0x17c>)
 8005618:	213c      	movs	r1, #60	; 0x3c
 800561a:	f7fb fea1 	bl	8001360 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 75, (uint8_t *)"Group: C1", CENTER_MODE);
 800561e:	214b      	movs	r1, #75	; 0x4b
 8005620:	2301      	movs	r3, #1
 8005622:	4a15      	ldr	r2, [pc, #84]	; (8005678 <LCD_Config+0x180>)
 8005624:	4620      	mov	r0, r4
 8005626:	f7fb fe9b 	bl	8001360 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800562a:	4814      	ldr	r0, [pc, #80]	; (800567c <LCD_Config+0x184>)
 800562c:	f7fb fc80 	bl	8000f30 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	f7fb fc88 	bl	8000f48 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <LCD_Config+0x164>)
 800563a:	f7fb fc91 	bl	8000f60 <BSP_LCD_SetFont>

  /* Initialize the LCD Touch Screen */
  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800563e:	f7fb fc2f 	bl	8000ea0 <BSP_LCD_GetXSize>
 8005642:	4604      	mov	r4, r0
 8005644:	f7fb fc32 	bl	8000eac <BSP_LCD_GetYSize>
 8005648:	b281      	uxth	r1, r0
 800564a:	b2a0      	uxth	r0, r4
 800564c:	f7fc f81e 	bl	800168c <BSP_TS_Init>
  while(ts_status != TS_OK);
 8005650:	2800      	cmp	r0, #0
 8005652:	d1fd      	bne.n	8005650 <LCD_Config+0x158>

}
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	bf00      	nop
 8005658:	ff0000ff 	.word	0xff0000ff
 800565c:	20000030 	.word	0x20000030
 8005660:	0800b56c 	.word	0x0800b56c
 8005664:	0800b572 	.word	0x0800b572
 8005668:	0800b579 	.word	0x0800b579
 800566c:	0800b57e 	.word	0x0800b57e
 8005670:	20000028 	.word	0x20000028
 8005674:	0800b596 	.word	0x0800b596
 8005678:	0800b59f 	.word	0x0800b59f
 800567c:	ffff0000 	.word	0xffff0000

08005680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005680:	b530      	push	{r4, r5, lr}
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  HAL_StatusTypeDef ret = HAL_OK;

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005682:	2301      	movs	r3, #1
{
 8005684:	b093      	sub	sp, #76	; 0x4c
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005686:	2402      	movs	r4, #2
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	  RCC_OscInitStruct.PLL.PLLM = 25;
	  RCC_OscInitStruct.PLL.PLLN = 400;
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	  RCC_OscInitStruct.PLL.PLLQ = 9;
	  RCC_OscInitStruct.PLL.PLLR = 7;
 8005688:	2507      	movs	r5, #7
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800568a:	9305      	str	r3, [sp, #20]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800568c:	f44f 3380 	mov.w	r3, #65536	; 0x10000

	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005690:	a805      	add	r0, sp, #20
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005692:	940b      	str	r4, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005694:	9306      	str	r3, [sp, #24]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800569a:	940f      	str	r4, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800569c:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM = 25;
 800569e:	2319      	movs	r3, #25
	  RCC_OscInitStruct.PLL.PLLR = 7;
 80056a0:	9511      	str	r5, [sp, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLM = 25;
 80056a2:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN = 400;
 80056a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80056a8:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 80056aa:	2309      	movs	r3, #9
 80056ac:	9310      	str	r3, [sp, #64]	; 0x40
	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80056ae:	f7fd fee9 	bl	8003484 <HAL_RCC_OscConfig>
	  if(ret != HAL_OK)
 80056b2:	b100      	cbz	r0, 80056b6 <SystemClock_Config+0x36>
 80056b4:	e7fe      	b.n	80056b4 <SystemClock_Config+0x34>
	  {
	    while(1) { ; }
	  }

	  /* Activate the OverDrive to reach the 216 MHz Frequency */
	  ret = HAL_PWREx_EnableOverDrive();
 80056b6:	f7fd fead 	bl	8003414 <HAL_PWREx_EnableOverDrive>
	  if(ret != HAL_OK)
 80056ba:	b100      	cbz	r0, 80056be <SystemClock_Config+0x3e>
 80056bc:	e7fe      	b.n	80056bc <SystemClock_Config+0x3c>
	  {
	    while(1) { ; }
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80056be:	230f      	movs	r3, #15
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056c0:	9002      	str	r0, [sp, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80056c2:	4629      	mov	r1, r5
 80056c4:	4668      	mov	r0, sp
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056c6:	e88d 0018 	stmia.w	sp, {r3, r4}
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056ce:	9303      	str	r3, [sp, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d4:	9304      	str	r3, [sp, #16]
	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80056d6:	f7fe f897 	bl	8003808 <HAL_RCC_ClockConfig>
	  if(ret != HAL_OK)
 80056da:	b100      	cbz	r0, 80056de <SystemClock_Config+0x5e>
 80056dc:	e7fe      	b.n	80056dc <SystemClock_Config+0x5c>
	  {
	    while(1) { ; }
	  }
}
 80056de:	b013      	add	sp, #76	; 0x4c
 80056e0:	bd30      	pop	{r4, r5, pc}
	...

080056e4 <main>:
{
 80056e4:	b508      	push	{r3, lr}
  HAL_Init();
 80056e6:	f7fc f8a5 	bl	8001834 <HAL_Init>
	  Display_Readings(V_LOAD,I_LOAD,P_IN_Previous,Duty_Cycle_Previous,Position);
 80056ea:	4e1b      	ldr	r6, [pc, #108]	; (8005758 <main+0x74>)
  SystemClock_Config();
 80056ec:	f7ff ffc8 	bl	8005680 <SystemClock_Config>
	  Display_Readings(V_LOAD,I_LOAD,P_IN_Previous,Duty_Cycle_Previous,Position);
 80056f0:	4d1a      	ldr	r5, [pc, #104]	; (800575c <main+0x78>)
  LCD_Config();
 80056f2:	f7ff ff01 	bl	80054f8 <LCD_Config>
	  Display_Readings(V_LOAD,I_LOAD,P_IN_Previous,Duty_Cycle_Previous,Position);
 80056f6:	4c1a      	ldr	r4, [pc, #104]	; (8005760 <main+0x7c>)
  MX_GPIO_Init();
 80056f8:	f7ff fb0c 	bl	8004d14 <MX_GPIO_Init>
  MX_DMA_Init();
 80056fc:	f7ff faf2 	bl	8004ce4 <MX_DMA_Init>
  MX_ADC1_Init();
 8005700:	f7ff f93a 	bl	8004978 <MX_ADC1_Init>
  MX_TIM11_Init();
 8005704:	f000 fbc6 	bl	8005e94 <MX_TIM11_Init>
  MX_TIM10_Init();
 8005708:	f000 fb2e 	bl	8005d68 <MX_TIM10_Init>
  MX_TIM8_Init();
 800570c:	f000 faf2 	bl	8005cf4 <MX_TIM8_Init>
  MX_TIM7_Init();
 8005710:	f000 facc 	bl	8005cac <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim8);
 8005714:	4813      	ldr	r0, [pc, #76]	; (8005764 <main+0x80>)
 8005716:	f7fe fcf1 	bl	80040fc <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Unfiltered_ADC_Readings,ADC_CHANNEL_COUNT * ADC_FILTER_SIZE);
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	4912      	ldr	r1, [pc, #72]	; (8005768 <main+0x84>)
 800571e:	4813      	ldr	r0, [pc, #76]	; (800576c <main+0x88>)
 8005720:	f7fc f95e 	bl	80019e0 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 8005724:	2100      	movs	r1, #0
 8005726:	4812      	ldr	r0, [pc, #72]	; (8005770 <main+0x8c>)
 8005728:	f7fe ffb8 	bl	800469c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 800572c:	4811      	ldr	r0, [pc, #68]	; (8005774 <main+0x90>)
 800572e:	f7fe fce5 	bl	80040fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8005732:	4811      	ldr	r0, [pc, #68]	; (8005778 <main+0x94>)
 8005734:	f7fe fce2 	bl	80040fc <HAL_TIM_Base_Start_IT>
	  Display_Readings(V_LOAD,I_LOAD,P_IN_Previous,Duty_Cycle_Previous,Position);
 8005738:	4b10      	ldr	r3, [pc, #64]	; (800577c <main+0x98>)
 800573a:	ed96 1a00 	vldr	s2, [r6]
 800573e:	edd3 0a00 	vldr	s1, [r3]
 8005742:	8828      	ldrh	r0, [r5, #0]
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <main+0x9c>)
 8005746:	edd4 1a00 	vldr	s3, [r4]
 800574a:	b280      	uxth	r0, r0
 800574c:	ed93 0a00 	vldr	s0, [r3]
 8005750:	f7ff fe4c 	bl	80053ec <Display_Readings>
 8005754:	e7f0      	b.n	8005738 <main+0x54>
 8005756:	bf00      	nop
 8005758:	200008f0 	.word	0x200008f0
 800575c:	2000004a 	.word	0x2000004a
 8005760:	20000bf0 	.word	0x20000bf0
 8005764:	20000c4c 	.word	0x20000c4c
 8005768:	20000b70 	.word	0x20000b70
 800576c:	20000ac0 	.word	0x20000ac0
 8005770:	20000ccc 	.word	0x20000ccc
 8005774:	20000c8c 	.word	0x20000c8c
 8005778:	20000d0c 	.word	0x20000d0c
 800577c:	20000c40 	.word	0x20000c40
 8005780:	20000c08 	.word	0x20000c08

08005784 <HAL_ADC_ConvCpltCallback>:
  * @brief Hardware triggered callback once ADC buffer array
  * is filled with 16 samples of each channel.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005784:	b538      	push	{r3, r4, r5, lr}
	Filter_ADC_Readings(ADC_CHANNEL_COUNT, ADC_FILTER_SIZE, Unfiltered_ADC_Readings, Filtered_ADC_Readings);
 8005786:	4c15      	ldr	r4, [pc, #84]	; (80057dc <HAL_ADC_ConvCpltCallback+0x58>)
 8005788:	2110      	movs	r1, #16
 800578a:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800578c:	2004      	movs	r0, #4
 800578e:	4623      	mov	r3, r4

	/* Calculate value of analog voltage supply */
	VDDA = Calc_VDDA(Filtered_ADC_Readings[3]);
 8005790:	4d14      	ldr	r5, [pc, #80]	; (80057e4 <HAL_ADC_ConvCpltCallback+0x60>)
	Filter_ADC_Readings(ADC_CHANNEL_COUNT, ADC_FILTER_SIZE, Unfiltered_ADC_Readings, Filtered_ADC_Readings);
 8005792:	f7ff f8bf 	bl	8004914 <Filter_ADC_Readings>
	VDDA = Calc_VDDA(Filtered_ADC_Readings[3]);
 8005796:	ed94 0a03 	vldr	s0, [r4, #12]
 800579a:	f7ff f875 	bl	8004888 <Calc_VDDA>
 800579e:	eef0 0a40 	vmov.f32	s1, s0
 80057a2:	ed85 0a00 	vstr	s0, [r5]

	V_LOAD = Get_V_LOAD(Filtered_ADC_Readings[0],VDDA);
 80057a6:	ed94 0a00 	vldr	s0, [r4]
 80057aa:	f7ff f87f 	bl	80048ac <Get_V_LOAD>
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <HAL_ADC_ConvCpltCallback+0x64>)
	I_LOAD = Get_I_LOAD(Filtered_ADC_Readings[1],VDDA);
 80057b0:	edd5 0a00 	vldr	s1, [r5]
	V_LOAD = Get_V_LOAD(Filtered_ADC_Readings[0],VDDA);
 80057b4:	ed83 0a00 	vstr	s0, [r3]
	I_LOAD = Get_I_LOAD(Filtered_ADC_Readings[1],VDDA);
 80057b8:	ed94 0a01 	vldr	s0, [r4, #4]
 80057bc:	f7ff f88c 	bl	80048d8 <Get_I_LOAD>
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <HAL_ADC_ConvCpltCallback+0x68>)
 80057c2:	ed83 0a00 	vstr	s0, [r3]

	Position = Get_Position(Filtered_ADC_Readings[2]);
 80057c6:	ed94 0a02 	vldr	s0, [r4, #8]
 80057ca:	f7ff f89b 	bl	8004904 <Get_Position>
 80057ce:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <HAL_ADC_ConvCpltCallback+0x6c>)
 80057d0:	ed83 0a00 	vstr	s0, [r3]

	Stepper_Control_Loop(Position);
}
 80057d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Stepper_Control_Loop(Position);
 80057d8:	f000 b80e 	b.w	80057f8 <Stepper_Control_Loop>
 80057dc:	20000bf4 	.word	0x20000bf4
 80057e0:	20000b70 	.word	0x20000b70
 80057e4:	20000c04 	.word	0x20000c04
 80057e8:	20000c08 	.word	0x20000c08
 80057ec:	20000c40 	.word	0x20000c40
 80057f0:	20000bf0 	.word	0x20000bf0

080057f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057f4:	4770      	bx	lr
	...

080057f8 <Stepper_Control_Loop>:
  */
void Stepper_Control_Loop(float Current_position)
{
	float Delta_Position,Error;

	Delta_Position = Previous_Position - Current_position;
 80057f8:	484f      	ldr	r0, [pc, #316]	; (8005938 <Stepper_Control_Loop+0x140>)
	Error = Desired_Position - Current_position;
	PD = Kp*Error + Kd*(Delta_Position/Delta_t_Readings);
 80057fa:	ed9f 6a50 	vldr	s12, [pc, #320]	; 800593c <Stepper_Control_Loop+0x144>
	Delta_Position = Previous_Position - Current_position;
 80057fe:	edd0 6a00 	vldr	s13, [r0]
	Error = Desired_Position - Current_position;
 8005802:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005940 <Stepper_Control_Loop+0x148>
	Delta_Position = Previous_Position - Current_position;
 8005806:	ee76 6ac0 	vsub.f32	s13, s13, s0
	PD = Kp*Error + Kd*(Delta_Position/Delta_t_Readings);
 800580a:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <Stepper_Control_Loop+0x14c>)
	Error = Desired_Position - Current_position;
 800580c:	ee37 7a40 	vsub.f32	s14, s14, s0
	PD = Kp*Error + Kd*(Delta_Position/Delta_t_Readings);
 8005810:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005814:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8005948 <Stepper_Control_Loop+0x150>
 8005818:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800581c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800594c <Stepper_Control_Loop+0x154>
 8005820:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005824:	edc3 7a00 	vstr	s15, [r3]

	if(ABS(PD) > FMAX)
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	ed93 7a00 	vldr	s14, [r3]
 8005830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005838:	dd16      	ble.n	8005868 <Stepper_Control_Loop+0x70>
 800583a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8005950 <Stepper_Control_Loop+0x158>
 800583e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005846:	bfcc      	ite	gt
 8005848:	2201      	movgt	r2, #1
 800584a:	2200      	movle	r2, #0
	{
		if(PD>0)PD = FMAX;
 800584c:	edd3 7a00 	vldr	s15, [r3]
 8005850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	if(ABS(PD) > FMAX)
 8005858:	b182      	cbz	r2, 800587c <Stepper_Control_Loop+0x84>
		if(PD>0)PD = FMAX;
 800585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585e:	bfcc      	ite	gt
 8005860:	4a3c      	ldrgt	r2, [pc, #240]	; (8005954 <Stepper_Control_Loop+0x15c>)
		else PD = -FMAX;
 8005862:	4a3d      	ldrle	r2, [pc, #244]	; (8005958 <Stepper_Control_Loop+0x160>)
	}
	else if(ABS(PD) < FMIN)
	{
		if(PD>0)PD = FMIN;
		else PD = -FMIN;
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e01f      	b.n	80058a8 <Stepper_Control_Loop+0xb0>
	if(ABS(PD) > FMAX)
 8005868:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800595c <Stepper_Control_Loop+0x164>
 800586c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005874:	bf4c      	ite	mi
 8005876:	2201      	movmi	r2, #1
 8005878:	2200      	movpl	r2, #0
 800587a:	e7e7      	b.n	800584c <Stepper_Control_Loop+0x54>
	else if(ABS(PD) < FMIN)
 800587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005880:	dd47      	ble.n	8005912 <Stepper_Control_Loop+0x11a>
 8005882:	edd3 7a00 	vldr	s15, [r3]
 8005886:	eef4 7ae6 	vcmpe.f32	s15, s13
 800588a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588e:	bf4c      	ite	mi
 8005890:	2201      	movmi	r2, #1
 8005892:	2200      	movpl	r2, #0
 8005894:	b142      	cbz	r2, 80058a8 <Stepper_Control_Loop+0xb0>
		if(PD>0)PD = FMIN;
 8005896:	edd3 7a00 	vldr	s15, [r3]
 800589a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a2:	dd42      	ble.n	800592a <Stepper_Control_Loop+0x132>
 80058a4:	edc3 6a00 	vstr	s13, [r3]
	}
	
	/* Stepper touch screen control */
	if(Turbine_Direction == COUNTER_CLOCKWISE)
 80058a8:	4a2d      	ldr	r2, [pc, #180]	; (8005960 <Stepper_Control_Loop+0x168>)
 80058aa:	7811      	ldrb	r1, [r2, #0]
 80058ac:	2901      	cmp	r1, #1
 80058ae:	d13e      	bne.n	800592e <Stepper_Control_Loop+0x136>
	{
		PD = -FMAX;
 80058b0:	4929      	ldr	r1, [pc, #164]	; (8005958 <Stepper_Control_Loop+0x160>)
		Turbine_Direction = PD_CONTROLLER;
	}
	else if(Turbine_Direction == CLOCKWISE)
	{
		PD = FMAX;
 80058b2:	6019      	str	r1, [r3, #0]
		Turbine_Direction = PD_CONTROLLER;
 80058b4:	2102      	movs	r1, #2
 80058b6:	7011      	strb	r1, [r2, #0]
	}

	__HAL_TIM_SET_AUTORELOAD(&htim10,(TIMER_CLK_FREQ/TIM10_PRESCALER)/ABS(PD)-1);
 80058b8:	edd3 7a00 	vldr	s15, [r3]
 80058bc:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8005964 <Stepper_Control_Loop+0x16c>
 80058c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058c4:	edd3 7a00 	vldr	s15, [r3]
 80058c8:	4a27      	ldr	r2, [pc, #156]	; (8005968 <Stepper_Control_Loop+0x170>)
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	6811      	ldr	r1, [r2, #0]
 80058d0:	bfd8      	it	le
 80058d2:	eef1 7a67 	vnegle.f32	s15, s15
 80058d6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80058da:	ee37 7a66 	vsub.f32	s14, s14, s13
 80058de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80058e2:	ed81 7a0b 	vstr	s14, [r1, #44]	; 0x2c
 80058e6:	edd3 7a00 	vldr	s15, [r3]
 80058ea:	ed93 7a00 	vldr	s14, [r3]
 80058ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	Previous_Position = Current_position;
 80058f2:	ed80 0a00 	vstr	s0, [r0]
	__HAL_TIM_SET_AUTORELOAD(&htim10,(TIMER_CLK_FREQ/TIM10_PRESCALER)/ABS(PD)-1);
 80058f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fa:	bfd8      	it	le
 80058fc:	eeb1 7a47 	vnegle.f32	s14, s14
 8005900:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8005904:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800590c:	edc2 7a03 	vstr	s15, [r2, #12]
	Previous_Position = Current_position;
 8005910:	4770      	bx	lr
	else if(ABS(PD) < FMIN)
 8005912:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8005916:	ed93 7a00 	vldr	s14, [r3]
 800591a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800591e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005922:	bfcc      	ite	gt
 8005924:	2201      	movgt	r2, #1
 8005926:	2200      	movle	r2, #0
 8005928:	e7b4      	b.n	8005894 <Stepper_Control_Loop+0x9c>
		else PD = -FMIN;
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <Stepper_Control_Loop+0x174>)
 800592c:	e79a      	b.n	8005864 <Stepper_Control_Loop+0x6c>
	else if(Turbine_Direction == CLOCKWISE)
 800592e:	2900      	cmp	r1, #0
 8005930:	d1c2      	bne.n	80058b8 <Stepper_Control_Loop+0xc0>
		PD = FMAX;
 8005932:	4908      	ldr	r1, [pc, #32]	; (8005954 <Stepper_Control_Loop+0x15c>)
 8005934:	e7bd      	b.n	80058b2 <Stepper_Control_Loop+0xba>
 8005936:	bf00      	nop
 8005938:	20000c48 	.word	0x20000c48
 800593c:	3dcccccd 	.word	0x3dcccccd
 8005940:	43270000 	.word	0x43270000
 8005944:	20000c44 	.word	0x20000c44
 8005948:	00000000 	.word	0x00000000
 800594c:	4131c28f 	.word	0x4131c28f
 8005950:	43fa0000 	.word	0x43fa0000
 8005954:	43fa0000 	.word	0x43fa0000
 8005958:	c3fa0000 	.word	0xc3fa0000
 800595c:	c3fa0000 	.word	0xc3fa0000
 8005960:	20000b6d 	.word	0x20000b6d
 8005964:	461c4000 	.word	0x461c4000
 8005968:	20000c8c 	.word	0x20000c8c
 800596c:	bf800000 	.word	0xbf800000

08005970 <Step_Clockwise>:
  * 		sequences required to produce 1 clockwise step.
  * @param  none
  * @retval none
  */
void Step_Clockwise(void)
{	
 8005970:	b510      	push	{r4, lr}
	extern volatile uint16_t StepCW;
	
			switch(StepCW)
 8005972:	4c3a      	ldr	r4, [pc, #232]	; (8005a5c <Step_Clockwise+0xec>)
 8005974:	8823      	ldrh	r3, [r4, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b07      	cmp	r3, #7
 800597a:	d859      	bhi.n	8005a30 <Step_Clockwise+0xc0>
 800597c:	e8df f003 	tbb	[pc, r3]
 8005980:	26241d04 	.word	0x26241d04
 8005984:	564a3932 	.word	0x564a3932
			{
				case 0:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005988:	2201      	movs	r2, #1
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	4834      	ldr	r0, [pc, #208]	; (8005a60 <Step_Clockwise+0xf0>)
 800598e:	f7fd f8d5 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005992:	2200      	movs	r2, #0
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
						StepCW++;
						break;
				
				case 1:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_SET);
 8005994:	2140      	movs	r1, #64	; 0x40
 8005996:	4832      	ldr	r0, [pc, #200]	; (8005a60 <Step_Clockwise+0xf0>)
 8005998:	f7fd f8d0 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 800599c:	2200      	movs	r2, #0
 800599e:	2102      	movs	r1, #2
 80059a0:	4830      	ldr	r0, [pc, #192]	; (8005a64 <Step_Clockwise+0xf4>)
 80059a2:	f7fd f8cb 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
 80059a6:	2200      	movs	r2, #0
						break;
				  
				case 7:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_SET);
 80059a8:	2140      	movs	r1, #64	; 0x40
 80059aa:	482f      	ldr	r0, [pc, #188]	; (8005a68 <Step_Clockwise+0xf8>)
 80059ac:	f7fd f8c6 	bl	8002b3c <HAL_GPIO_WritePin>
						StepCW++;
 80059b0:	8823      	ldrh	r3, [r4, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	b29b      	uxth	r3, r3
				  
				default:HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
						StepCW = 0;
 80059b6:	8023      	strh	r3, [r4, #0]
 80059b8:	bd10      	pop	{r4, pc}
				case 1:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 80059ba:	2201      	movs	r2, #1
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	4828      	ldr	r0, [pc, #160]	; (8005a60 <Step_Clockwise+0xf0>)
 80059c0:	f7fd f8bc 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_SET);
 80059c4:	2201      	movs	r2, #1
 80059c6:	e7e5      	b.n	8005994 <Step_Clockwise+0x24>
				case 2:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 80059c8:	2200      	movs	r2, #0
 80059ca:	e7f7      	b.n	80059bc <Step_Clockwise+0x4c>
				case 3:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 80059cc:	2200      	movs	r2, #0
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	4823      	ldr	r0, [pc, #140]	; (8005a60 <Step_Clockwise+0xf0>)
 80059d2:	f7fd f8b3 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_SET);
 80059d6:	2201      	movs	r2, #1
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 80059d8:	2140      	movs	r1, #64	; 0x40
 80059da:	4821      	ldr	r0, [pc, #132]	; (8005a60 <Step_Clockwise+0xf0>)
 80059dc:	f7fd f8ae 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_SET);
 80059e0:	2201      	movs	r2, #1
 80059e2:	e7dc      	b.n	800599e <Step_Clockwise+0x2e>
				case 4:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 80059e4:	2200      	movs	r2, #0
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	481d      	ldr	r0, [pc, #116]	; (8005a60 <Step_Clockwise+0xf0>)
 80059ea:	f7fd f8a7 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 80059ee:	2200      	movs	r2, #0
 80059f0:	e7f2      	b.n	80059d8 <Step_Clockwise+0x68>
				case 5:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	481a      	ldr	r0, [pc, #104]	; (8005a60 <Step_Clockwise+0xf0>)
 80059f8:	f7fd f8a0 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 80059fc:	2200      	movs	r2, #0
 80059fe:	2140      	movs	r1, #64	; 0x40
 8005a00:	4817      	ldr	r0, [pc, #92]	; (8005a60 <Step_Clockwise+0xf0>)
 8005a02:	f7fd f89b 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_SET);
 8005a06:	2201      	movs	r2, #1
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005a08:	2102      	movs	r1, #2
 8005a0a:	4816      	ldr	r0, [pc, #88]	; (8005a64 <Step_Clockwise+0xf4>)
 8005a0c:	f7fd f896 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_SET);
 8005a10:	2201      	movs	r2, #1
 8005a12:	e7c9      	b.n	80059a8 <Step_Clockwise+0x38>
				case 6:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005a14:	2200      	movs	r2, #0
				case 7:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	4811      	ldr	r0, [pc, #68]	; (8005a60 <Step_Clockwise+0xf0>)
 8005a1a:	f7fd f88f 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	480f      	ldr	r0, [pc, #60]	; (8005a60 <Step_Clockwise+0xf0>)
 8005a24:	f7fd f88a 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005a28:	2200      	movs	r2, #0
 8005a2a:	e7ed      	b.n	8005a08 <Step_Clockwise+0x98>
				case 7:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	e7f2      	b.n	8005a16 <Step_Clockwise+0xa6>
				default:HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	480a      	ldr	r0, [pc, #40]	; (8005a60 <Step_Clockwise+0xf0>)
 8005a36:	f7fd f881 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2140      	movs	r1, #64	; 0x40
 8005a3e:	4808      	ldr	r0, [pc, #32]	; (8005a60 <Step_Clockwise+0xf0>)
 8005a40:	f7fd f87c 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2102      	movs	r1, #2
 8005a48:	4806      	ldr	r0, [pc, #24]	; (8005a64 <Step_Clockwise+0xf4>)
 8005a4a:	f7fd f877 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	4805      	ldr	r0, [pc, #20]	; (8005a68 <Step_Clockwise+0xf8>)
 8005a54:	f7fd f872 	bl	8002b3c <HAL_GPIO_WritePin>
						StepCW = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e7ac      	b.n	80059b6 <Step_Clockwise+0x46>
 8005a5c:	20000936 	.word	0x20000936
 8005a60:	40020800 	.word	0x40020800
 8005a64:	40022400 	.word	0x40022400
 8005a68:	40021400 	.word	0x40021400

08005a6c <Step_Counter_Clockwise>:
  * 		sequences required to produce 1 counter-clockwise step.
  * @param  none
  * @retval none
  */
void Step_Counter_Clockwise(void)										
{
 8005a6c:	b510      	push	{r4, lr}
	extern volatile uint16_t StepCCW;
	
			switch(StepCCW)
 8005a6e:	4c3a      	ldr	r4, [pc, #232]	; (8005b58 <Step_Counter_Clockwise+0xec>)
 8005a70:	8823      	ldrh	r3, [r4, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b07      	cmp	r3, #7
 8005a76:	d859      	bhi.n	8005b2c <Step_Counter_Clockwise+0xc0>
 8005a78:	e8df f003 	tbb	[pc, r3]
 8005a7c:	3a211004 	.word	0x3a211004
 8005a80:	564f4d41 	.word	0x564f4d41
			{
				case 0:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005a84:	2200      	movs	r2, #0
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
						StepCCW++;
						break;
				  
				case 7:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	4834      	ldr	r0, [pc, #208]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005a8a:	f7fd f857 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2140      	movs	r1, #64	; 0x40
 8005a92:	4832      	ldr	r0, [pc, #200]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005a94:	f7fd f852 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005a98:	2200      	movs	r2, #0
 8005a9a:	e00a      	b.n	8005ab2 <Step_Counter_Clockwise+0x46>
				case 1:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	482e      	ldr	r0, [pc, #184]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005aa2:	f7fd f84b 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2140      	movs	r1, #64	; 0x40
 8005aaa:	482c      	ldr	r0, [pc, #176]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005aac:	f7fd f846 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_SET);
 8005ab0:	2201      	movs	r2, #1
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	482a      	ldr	r0, [pc, #168]	; (8005b60 <Step_Counter_Clockwise+0xf4>)
 8005ab6:	f7fd f841 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_SET);
 8005aba:	2201      	movs	r2, #1
 8005abc:	e00f      	b.n	8005ade <Step_Counter_Clockwise+0x72>
				case 2:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	4826      	ldr	r0, [pc, #152]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005ac4:	f7fd f83a 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005ac8:	2200      	movs	r2, #0
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_SET);
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	4823      	ldr	r0, [pc, #140]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005ace:	f7fd f835 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_SET);
 8005ad2:	2201      	movs	r2, #1
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	4822      	ldr	r0, [pc, #136]	; (8005b60 <Step_Counter_Clockwise+0xf4>)
 8005ad8:	f7fd f830 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
 8005adc:	2200      	movs	r2, #0
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_SET);
 8005ade:	2140      	movs	r1, #64	; 0x40
 8005ae0:	4820      	ldr	r0, [pc, #128]	; (8005b64 <Step_Counter_Clockwise+0xf8>)
 8005ae2:	f7fd f82b 	bl	8002b3c <HAL_GPIO_WritePin>
						StepCCW++;
 8005ae6:	8823      	ldrh	r3, [r4, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	b29b      	uxth	r3, r3
				  
				default:HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
						StepCCW = 0;
 8005aec:	8023      	strh	r3, [r4, #0]
 8005aee:	bd10      	pop	{r4, pc}
				case 3:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005af0:	2200      	movs	r2, #0
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	4819      	ldr	r0, [pc, #100]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005af6:	f7fd f821 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_SET);
 8005afa:	2201      	movs	r2, #1
 8005afc:	e7e5      	b.n	8005aca <Step_Counter_Clockwise+0x5e>
				case 4:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005afe:	2200      	movs	r2, #0
				case 5:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	4816      	ldr	r0, [pc, #88]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005b04:	f7fd f81a 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_SET);
 8005b08:	2201      	movs	r2, #1
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005b0a:	2140      	movs	r1, #64	; 0x40
 8005b0c:	4813      	ldr	r0, [pc, #76]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005b0e:	f7fd f815 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005b12:	2200      	movs	r2, #0
 8005b14:	e7de      	b.n	8005ad4 <Step_Counter_Clockwise+0x68>
				case 5:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005b16:	2201      	movs	r2, #1
 8005b18:	e7f2      	b.n	8005b00 <Step_Counter_Clockwise+0x94>
				case 6:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	480f      	ldr	r0, [pc, #60]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005b20:	f7fd f80c 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005b24:	2200      	movs	r2, #0
 8005b26:	e7f0      	b.n	8005b0a <Step_Counter_Clockwise+0x9e>
				case 7:	HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_SET);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	e7ac      	b.n	8005a86 <Step_Counter_Clockwise+0x1a>
				default:HAL_GPIO_WritePin(A_PLUS_GPIO_Port,A_PLUS_Pin,GPIO_PIN_RESET);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2180      	movs	r1, #128	; 0x80
 8005b30:	480a      	ldr	r0, [pc, #40]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005b32:	f7fd f803 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(A_MINUS_GPIO_Port,A_MINUS_Pin,GPIO_PIN_RESET);
 8005b36:	2200      	movs	r2, #0
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	4808      	ldr	r0, [pc, #32]	; (8005b5c <Step_Counter_Clockwise+0xf0>)
 8005b3c:	f7fc fffe 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_PLUS_GPIO_Port,B_PLUS_Pin,GPIO_PIN_RESET);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2102      	movs	r1, #2
 8005b44:	4806      	ldr	r0, [pc, #24]	; (8005b60 <Step_Counter_Clockwise+0xf4>)
 8005b46:	f7fc fff9 	bl	8002b3c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(B_MINUS_GPIO_Port,B_MINUS_Pin,GPIO_PIN_RESET);
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	4805      	ldr	r0, [pc, #20]	; (8005b64 <Step_Counter_Clockwise+0xf8>)
 8005b50:	f7fc fff4 	bl	8002b3c <HAL_GPIO_WritePin>
						StepCCW = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e7c9      	b.n	8005aec <Step_Counter_Clockwise+0x80>
 8005b58:	20000934 	.word	0x20000934
 8005b5c:	40020800 	.word	0x40020800
 8005b60:	40022400 	.word	0x40022400
 8005b64:	40021400 	.word	0x40021400

08005b68 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_MspInit+0x2c>)
{
 8005b6a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
 8005b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b76:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005b7a:	9200      	str	r2, [sp, #0]
 8005b7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	9b01      	ldr	r3, [sp, #4]
}
 8005b90:	b002      	add	sp, #8
 8005b92:	4770      	bx	lr
 8005b94:	40023800 	.word	0x40023800

08005b98 <NMI_Handler>:
 8005b98:	4770      	bx	lr

08005b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b9a:	e7fe      	b.n	8005b9a <HardFault_Handler>

08005b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b9c:	e7fe      	b.n	8005b9c <MemManage_Handler>

08005b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b9e:	e7fe      	b.n	8005b9e <BusFault_Handler>

08005ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ba0:	e7fe      	b.n	8005ba0 <UsageFault_Handler>

08005ba2 <SVC_Handler>:
 8005ba2:	4770      	bx	lr

08005ba4 <DebugMon_Handler>:
 8005ba4:	4770      	bx	lr

08005ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ba6:	4770      	bx	lr

08005ba8 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8005ba8:	f7fb be50 	b.w	800184c <HAL_IncTick>

08005bac <TIM1_UP_TIM10_IRQHandler>:
/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim10);
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8005bae:	f7fe bac0 	b.w	8004132 <HAL_TIM_IRQHandler>
 8005bb2:	bf00      	nop
 8005bb4:	20000c8c 	.word	0x20000c8c

08005bb8 <TIM7_IRQHandler>:
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim7);
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <TIM7_IRQHandler+0x8>)
 8005bba:	f7fe baba 	b.w	8004132 <HAL_TIM_IRQHandler>
 8005bbe:	bf00      	nop
 8005bc0:	20000d0c 	.word	0x20000d0c

08005bc4 <DMA2_Stream4_IRQHandler>:
/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <DMA2_Stream4_IRQHandler+0x8>)
 8005bc6:	f7fc b9ed 	b.w	8001fa4 <HAL_DMA_IRQHandler>
 8005bca:	bf00      	nop
 8005bcc:	20000b08 	.word	0x20000b08

08005bd0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005bd0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <_sbrk+0x2c>)
{
 8005bd4:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005bd6:	6819      	ldr	r1, [r3, #0]
 8005bd8:	b909      	cbnz	r1, 8005bde <_sbrk+0xe>
		heap_end = &end;
 8005bda:	4909      	ldr	r1, [pc, #36]	; (8005c00 <_sbrk+0x30>)
 8005bdc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8005bde:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005be0:	4669      	mov	r1, sp
 8005be2:	4402      	add	r2, r0
 8005be4:	428a      	cmp	r2, r1
 8005be6:	d906      	bls.n	8005bf6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005be8:	f000 f9b4 	bl	8005f54 <__errno>
 8005bec:	230c      	movs	r3, #12
 8005bee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005bf6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005bf8:	bd08      	pop	{r3, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000930 	.word	0x20000930
 8005c00:	20000d5c 	.word	0x20000d5c

08005c04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c04:	490f      	ldr	r1, [pc, #60]	; (8005c44 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c06:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c08:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <SystemInit+0x44>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005c1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005c26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c2c:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <SystemInit+0x48>)
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c36:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c38:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c3e:	608b      	str	r3, [r1, #8]
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	24003010 	.word	0x24003010

08005c50 <HAL_TIM_PeriodElapsedCallback>:
TIM_HandleTypeDef htim11;

/* Timer interrupt call back */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM7)
 8005c50:	6803      	ldr	r3, [r0, #0]
 8005c52:	4a11      	ldr	r2, [pc, #68]	; (8005c98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d107      	bne.n	8005c68 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		Perturb_Observe(V_LOAD, I_LOAD);
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005c5a:	edd3 0a00 	vldr	s1, [r3]
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005c60:	ed93 0a00 	vldr	s0, [r3]
 8005c64:	f7fe bf42 	b.w	8004aec <Perturb_Observe>
	}
	else if(htim->Instance == TIM10)                    //Stepper motor interrupt
 8005c68:	4a0e      	ldr	r2, [pc, #56]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d112      	bne.n	8005c94 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		if(PD > 0)                                      //If PD>0 spin clockwise
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7c:	dd01      	ble.n	8005c82 <HAL_TIM_PeriodElapsedCallback+0x32>
			{
				Step_Clockwise();
 8005c7e:	f7ff be77 	b.w	8005970 <Step_Clockwise>
			}
		else if(PD < 0)                                 //If PD<0 spin counter clockwise
 8005c82:	edd3 7a00 	vldr	s15, [r3]
 8005c86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8e:	d501      	bpl.n	8005c94 <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				Step_Counter_Clockwise();
 8005c90:	f7ff beec 	b.w	8005a6c <Step_Counter_Clockwise>
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40001400 	.word	0x40001400
 8005c9c:	20000c40 	.word	0x20000c40
 8005ca0:	20000c08 	.word	0x20000c08
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	20000c44 	.word	0x20000c44

08005cac <MX_TIM7_Init>:
	
}

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 8005cae:	480f      	ldr	r0, [pc, #60]	; (8005cec <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = TIM7_PRESCALER - 1;
 8005cb0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8005cb4:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <MX_TIM7_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cb6:	2400      	movs	r4, #0
  htim7.Init.Prescaler = TIM7_PRESCALER - 1;
 8005cb8:	e880 000c 	stmia.w	r0, {r2, r3}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = (TIMER_CLK_FREQ/TIM7_PRESCALER)/MPPT_CONTROL_LOOP_FREQ-1;
 8005cbc:	f640 739f 	movw	r3, #3999	; 0xf9f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cc0:	9401      	str	r4, [sp, #4]
 8005cc2:	9402      	str	r4, [sp, #8]
 8005cc4:	9403      	str	r4, [sp, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc6:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = (TIMER_CLK_FREQ/TIM7_PRESCALER)/MPPT_CONTROL_LOOP_FREQ-1;
 8005cc8:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cca:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ccc:	f7fe fb48 	bl	8004360 <HAL_TIM_Base_Init>
 8005cd0:	b108      	cbz	r0, 8005cd6 <MX_TIM7_Init+0x2a>
  {
    Error_Handler();
 8005cd2:	f7ff fd8f 	bl	80057f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005cd6:	a901      	add	r1, sp, #4
 8005cd8:	4804      	ldr	r0, [pc, #16]	; (8005cec <MX_TIM7_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cda:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cdc:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005cde:	f7fe fd03 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ce2:	b108      	cbz	r0, 8005ce8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005ce4:	f7ff fd86 	bl	80057f4 <Error_Handler>
  }
}
 8005ce8:	b004      	add	sp, #16
 8005cea:	bd10      	pop	{r4, pc}
 8005cec:	20000d0c 	.word	0x20000d0c
 8005cf0:	40001400 	.word	0x40001400

08005cf4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005cf4:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cf6:	2210      	movs	r2, #16
{
 8005cf8:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	eb0d 0002 	add.w	r0, sp, r2
 8005d00:	f000 f952 	bl	8005fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim8.Instance = TIM8;
 8005d04:	4816      	ldr	r0, [pc, #88]	; (8005d60 <MX_TIM8_Init+0x6c>)
  htim8.Init.Prescaler = TIM8_PRESCALER - 1;
 8005d06:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005d0a:	4916      	ldr	r1, [pc, #88]	; (8005d64 <MX_TIM8_Init+0x70>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d0c:	2300      	movs	r3, #0
  htim8.Init.Prescaler = TIM8_PRESCALER - 1;
 8005d0e:	e880 0006 	stmia.w	r0, {r1, r2}
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = (TIMER_CLK_FREQ/TIM8_PRESCALER)/ADC_FREQ-1;
 8005d12:	22c7      	movs	r2, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	9303      	str	r3, [sp, #12]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1a:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = (TIMER_CLK_FREQ/TIM8_PRESCALER)/ADC_FREQ-1;
 8005d1c:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d1e:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8005d20:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d22:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005d24:	f7fe fb1c 	bl	8004360 <HAL_TIM_Base_Init>
 8005d28:	b108      	cbz	r0, 8005d2e <MX_TIM8_Init+0x3a>
  {
    Error_Handler();
 8005d2a:	f7ff fd63 	bl	80057f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005d32:	a904      	add	r1, sp, #16
 8005d34:	480a      	ldr	r0, [pc, #40]	; (8005d60 <MX_TIM8_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d36:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005d38:	f7fe fc0e 	bl	8004558 <HAL_TIM_ConfigClockSource>
 8005d3c:	b108      	cbz	r0, 8005d42 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8005d3e:	f7ff fd59 	bl	80057f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d42:	2320      	movs	r3, #32
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d44:	a901      	add	r1, sp, #4
 8005d46:	4806      	ldr	r0, [pc, #24]	; (8005d60 <MX_TIM8_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d48:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d4e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d50:	f7fe fcca 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005d54:	b108      	cbz	r0, 8005d5a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8005d56:	f7ff fd4d 	bl	80057f4 <Error_Handler>
  }

}
 8005d5a:	b009      	add	sp, #36	; 0x24
 8005d5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d60:	20000c4c 	.word	0x20000c4c
 8005d64:	40010400 	.word	0x40010400

08005d68 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005d68:	b508      	push	{r3, lr}

  htim10.Instance = TIM10;
 8005d6a:	480a      	ldr	r0, [pc, #40]	; (8005d94 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = TIM10_PRESCALER-1;
 8005d6c:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d70:	4909      	ldr	r1, [pc, #36]	; (8005d98 <MX_TIM10_Init+0x30>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = (TIMER_CLK_FREQ/TIM10_PRESCALER)/STEPPER_FREQ-1;
 8005d72:	2213      	movs	r2, #19
  htim10.Init.Prescaler = TIM10_PRESCALER-1;
 8005d74:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d78:	2300      	movs	r3, #0
  htim10.Init.Period = (TIMER_CLK_FREQ/TIM10_PRESCALER)/STEPPER_FREQ-1;
 8005d7a:	60c2      	str	r2, [r0, #12]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d7c:	6083      	str	r3, [r0, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d7e:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d80:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005d82:	f7fe faed 	bl	8004360 <HAL_TIM_Base_Init>
 8005d86:	b118      	cbz	r0, 8005d90 <MX_TIM10_Init+0x28>
  {
    Error_Handler();
  }

}
 8005d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005d8c:	f7ff bd32 	b.w	80057f4 <Error_Handler>
 8005d90:	bd08      	pop	{r3, pc}
 8005d92:	bf00      	nop
 8005d94:	20000c8c 	.word	0x20000c8c
 8005d98:	40014400 	.word	0x40014400

08005d9c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(tim_baseHandle->Instance==TIM7)
 8005d9e:	6803      	ldr	r3, [r0, #0]
 8005da0:	4a23      	ldr	r2, [pc, #140]	; (8005e30 <HAL_TIM_Base_MspInit+0x94>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d112      	bne.n	8005dcc <HAL_TIM_Base_MspInit+0x30>
  {
	/* TIM7 clock enable */
	__HAL_RCC_TIM7_CLK_ENABLE();
 8005da6:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <HAL_TIM_Base_MspInit+0x98>)

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005da8:	2037      	movs	r0, #55	; 0x37
	__HAL_RCC_TIM7_CLK_ENABLE();
 8005daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dac:	f042 0220 	orr.w	r2, r2, #32
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005db2:	2200      	movs	r2, #0
	__HAL_RCC_TIM7_CLK_ENABLE();
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005db6:	4611      	mov	r1, r2
	__HAL_RCC_TIM7_CLK_ENABLE();
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005dc0:	f7fb ff98 	bl	8001cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005dc4:	2037      	movs	r0, #55	; 0x37
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005dc6:	f7fb ffcd 	bl	8001d64 <HAL_NVIC_EnableIRQ>
 8005dca:	e00c      	b.n	8005de6 <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM8)
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <HAL_TIM_Base_MspInit+0x9c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10c      	bne.n	8005dec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005dd2:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <HAL_TIM_Base_MspInit+0x98>)
 8005dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd6:	f042 0202 	orr.w	r2, r2, #2
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	9b01      	ldr	r3, [sp, #4]
  else if(tim_baseHandle->Instance==TIM11)
  {
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
  }
}
 8005de6:	b005      	add	sp, #20
 8005de8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM10)
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <HAL_TIM_Base_MspInit+0xa0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d110      	bne.n	8005e14 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005df2:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <HAL_TIM_Base_MspInit+0x98>)
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005df4:	2019      	movs	r0, #25
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005dfe:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005e02:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e08:	9302      	str	r3, [sp, #8]
 8005e0a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005e0c:	f7fb ff72 	bl	8001cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e10:	2019      	movs	r0, #25
 8005e12:	e7d8      	b.n	8005dc6 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM11)
 8005e14:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <HAL_TIM_Base_MspInit+0xa4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d1e5      	bne.n	8005de6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <HAL_TIM_Base_MspInit+0x98>)
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e2a:	9303      	str	r3, [sp, #12]
 8005e2c:	9b03      	ldr	r3, [sp, #12]
}
 8005e2e:	e7da      	b.n	8005de6 <HAL_TIM_Base_MspInit+0x4a>
 8005e30:	40001400 	.word	0x40001400
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40010400 	.word	0x40010400
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e44:	b510      	push	{r4, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e4a:	2214      	movs	r2, #20
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	a801      	add	r0, sp, #4
 8005e50:	f000 f8aa 	bl	8005fa8 <memset>
  if(timHandle->Instance==TIM11)
 8005e54:	6822      	ldr	r2, [r4, #0]
 8005e56:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <HAL_TIM_MspPostInit+0x48>)
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d114      	bne.n	8005e86 <HAL_TIM_MspPostInit+0x42>
  {
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e5c:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8005e60:	a901      	add	r1, sp, #4
 8005e62:	480b      	ldr	r0, [pc, #44]	; (8005e90 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e66:	f042 0220 	orr.w	r2, r2, #32
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8005e82:	f7fc fd71 	bl	8002968 <HAL_GPIO_Init>
  }

}
 8005e86:	b006      	add	sp, #24
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40014800 	.word	0x40014800
 8005e90:	40021400 	.word	0x40021400

08005e94 <MX_TIM11_Init>:
{
 8005e94:	b500      	push	{lr}
 8005e96:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e98:	221c      	movs	r2, #28
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	a801      	add	r0, sp, #4
 8005e9e:	f000 f883 	bl	8005fa8 <memset>
  htim11.Instance = TIM11;
 8005ea2:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <MX_TIM11_Init+0x64>)
  htim11.Init.Prescaler = TIM11_PRESCALER - 1;
 8005ea4:	230f      	movs	r3, #15
 8005ea6:	4915      	ldr	r1, [pc, #84]	; (8005efc <MX_TIM11_Init+0x68>)
  htim11.Init.Period = 2*(TIMER_CLK_FREQ/TIM11_PRESCALER)/PWM_FREQ - 1;
 8005ea8:	22ce      	movs	r2, #206	; 0xce
  htim11.Init.Prescaler = TIM11_PRESCALER - 1;
 8005eaa:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eae:	2300      	movs	r3, #0
  htim11.Init.Period = 2*(TIMER_CLK_FREQ/TIM11_PRESCALER)/PWM_FREQ - 1;
 8005eb0:	60c2      	str	r2, [r0, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb2:	6083      	str	r3, [r0, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb4:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eb6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005eb8:	f7fe fa52 	bl	8004360 <HAL_TIM_Base_Init>
 8005ebc:	b108      	cbz	r0, 8005ec2 <MX_TIM11_Init+0x2e>
    Error_Handler();
 8005ebe:	f7ff fc99 	bl	80057f4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005ec2:	480d      	ldr	r0, [pc, #52]	; (8005ef8 <MX_TIM11_Init+0x64>)
 8005ec4:	f7fe fa66 	bl	8004394 <HAL_TIM_PWM_Init>
 8005ec8:	b108      	cbz	r0, 8005ece <MX_TIM11_Init+0x3a>
    Error_Handler();
 8005eca:	f7ff fc93 	bl	80057f4 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ece:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ed0:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ed2:	a901      	add	r1, sp, #4
 8005ed4:	4808      	ldr	r0, [pc, #32]	; (8005ef8 <MX_TIM11_Init+0x64>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ed6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = (TIMER_CLK_FREQ/TIM11_PRESCALER)/PWM_FREQ;
 8005ed8:	2367      	movs	r3, #103	; 0x67
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005eda:	9203      	str	r2, [sp, #12]
  sConfigOC.Pulse = (TIMER_CLK_FREQ/TIM11_PRESCALER)/PWM_FREQ;
 8005edc:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ede:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ee0:	f7fe faaa 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8005ee4:	b108      	cbz	r0, 8005eea <MX_TIM11_Init+0x56>
    Error_Handler();
 8005ee6:	f7ff fc85 	bl	80057f4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 8005eea:	4803      	ldr	r0, [pc, #12]	; (8005ef8 <MX_TIM11_Init+0x64>)
 8005eec:	f7ff ffaa 	bl	8005e44 <HAL_TIM_MspPostInit>
}
 8005ef0:	b009      	add	sp, #36	; 0x24
 8005ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ef6:	bf00      	nop
 8005ef8:	20000ccc 	.word	0x20000ccc
 8005efc:	40014800 	.word	0x40014800

08005f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f06:	e003      	b.n	8005f10 <LoopCopyDataInit>

08005f08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f0e:	3104      	adds	r1, #4

08005f10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f10:	480b      	ldr	r0, [pc, #44]	; (8005f40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f18:	d3f6      	bcc.n	8005f08 <CopyDataInit>
  ldr  r2, =_sbss
 8005f1a:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f1c:	e002      	b.n	8005f24 <LoopFillZerobss>

08005f1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f20:	f842 3b04 	str.w	r3, [r2], #4

08005f24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f28:	d3f9      	bcc.n	8005f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f2a:	f7ff fe6b 	bl	8005c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f2e:	f000 f817 	bl	8005f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f32:	f7ff fbd7 	bl	80056e4 <main>
  bx  lr    
 8005f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f38:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005f3c:	0800b838 	.word	0x0800b838
  ldr  r0, =_sdata
 8005f40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f44:	200006c0 	.word	0x200006c0
  ldr  r2, =_sbss
 8005f48:	200006c0 	.word	0x200006c0
  ldr  r3, = _ebss
 8005f4c:	20000d5c 	.word	0x20000d5c

08005f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f50:	e7fe      	b.n	8005f50 <ADC_IRQHandler>
	...

08005f54 <__errno>:
 8005f54:	4b01      	ldr	r3, [pc, #4]	; (8005f5c <__errno+0x8>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000050 	.word	0x20000050

08005f60 <__libc_init_array>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4e0d      	ldr	r6, [pc, #52]	; (8005f98 <__libc_init_array+0x38>)
 8005f64:	4c0d      	ldr	r4, [pc, #52]	; (8005f9c <__libc_init_array+0x3c>)
 8005f66:	1ba4      	subs	r4, r4, r6
 8005f68:	10a4      	asrs	r4, r4, #2
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d109      	bne.n	8005f84 <__libc_init_array+0x24>
 8005f70:	4e0b      	ldr	r6, [pc, #44]	; (8005fa0 <__libc_init_array+0x40>)
 8005f72:	4c0c      	ldr	r4, [pc, #48]	; (8005fa4 <__libc_init_array+0x44>)
 8005f74:	f002 fe8a 	bl	8008c8c <_init>
 8005f78:	1ba4      	subs	r4, r4, r6
 8005f7a:	10a4      	asrs	r4, r4, #2
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	42a5      	cmp	r5, r4
 8005f80:	d105      	bne.n	8005f8e <__libc_init_array+0x2e>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f88:	4798      	blx	r3
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	e7ee      	b.n	8005f6c <__libc_init_array+0xc>
 8005f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f92:	4798      	blx	r3
 8005f94:	3501      	adds	r5, #1
 8005f96:	e7f2      	b.n	8005f7e <__libc_init_array+0x1e>
 8005f98:	0800b830 	.word	0x0800b830
 8005f9c:	0800b830 	.word	0x0800b830
 8005fa0:	0800b830 	.word	0x0800b830
 8005fa4:	0800b834 	.word	0x0800b834

08005fa8 <memset>:
 8005fa8:	4402      	add	r2, r0
 8005faa:	4603      	mov	r3, r0
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <sprintf>:
 8005fb8:	b40e      	push	{r1, r2, r3}
 8005fba:	b500      	push	{lr}
 8005fbc:	b09c      	sub	sp, #112	; 0x70
 8005fbe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fc4:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005fc8:	9002      	str	r0, [sp, #8]
 8005fca:	9006      	str	r0, [sp, #24]
 8005fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fd0:	480a      	ldr	r0, [pc, #40]	; (8005ffc <sprintf+0x44>)
 8005fd2:	9104      	str	r1, [sp, #16]
 8005fd4:	9107      	str	r1, [sp, #28]
 8005fd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fde:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	a902      	add	r1, sp, #8
 8005fe8:	f000 f80a 	bl	8006000 <_svfprintf_r>
 8005fec:	9b02      	ldr	r3, [sp, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	b01c      	add	sp, #112	; 0x70
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	20000050 	.word	0x20000050

08006000 <_svfprintf_r>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	ed2d 8b04 	vpush	{d8-d9}
 8006008:	b0b7      	sub	sp, #220	; 0xdc
 800600a:	468b      	mov	fp, r1
 800600c:	4615      	mov	r5, r2
 800600e:	461e      	mov	r6, r3
 8006010:	4682      	mov	sl, r0
 8006012:	f001 fda9 	bl	8007b68 <_localeconv_r>
 8006016:	6803      	ldr	r3, [r0, #0]
 8006018:	930a      	str	r3, [sp, #40]	; 0x28
 800601a:	4618      	mov	r0, r3
 800601c:	f7fa f960 	bl	80002e0 <strlen>
 8006020:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006024:	9006      	str	r0, [sp, #24]
 8006026:	0619      	lsls	r1, r3, #24
 8006028:	d51a      	bpl.n	8006060 <_svfprintf_r+0x60>
 800602a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800602e:	b9bb      	cbnz	r3, 8006060 <_svfprintf_r+0x60>
 8006030:	2140      	movs	r1, #64	; 0x40
 8006032:	4650      	mov	r0, sl
 8006034:	f001 fdae 	bl	8007b94 <_malloc_r>
 8006038:	f8cb 0000 	str.w	r0, [fp]
 800603c:	f8cb 0010 	str.w	r0, [fp, #16]
 8006040:	b958      	cbnz	r0, 800605a <_svfprintf_r+0x5a>
 8006042:	230c      	movs	r3, #12
 8006044:	f8ca 3000 	str.w	r3, [sl]
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	9307      	str	r3, [sp, #28]
 800604e:	9807      	ldr	r0, [sp, #28]
 8006050:	b037      	add	sp, #220	; 0xdc
 8006052:	ecbd 8b04 	vpop	{d8-d9}
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605a:	2340      	movs	r3, #64	; 0x40
 800605c:	f8cb 3014 	str.w	r3, [fp, #20]
 8006060:	ed9f 8b99 	vldr	d8, [pc, #612]	; 80062c8 <_svfprintf_r+0x2c8>
 8006064:	2300      	movs	r3, #0
 8006066:	ac26      	add	r4, sp, #152	; 0x98
 8006068:	9419      	str	r4, [sp, #100]	; 0x64
 800606a:	931b      	str	r3, [sp, #108]	; 0x6c
 800606c:	931a      	str	r3, [sp, #104]	; 0x68
 800606e:	9505      	str	r5, [sp, #20]
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	930c      	str	r3, [sp, #48]	; 0x30
 8006074:	930b      	str	r3, [sp, #44]	; 0x2c
 8006076:	9307      	str	r3, [sp, #28]
 8006078:	9f05      	ldr	r7, [sp, #20]
 800607a:	463d      	mov	r5, r7
 800607c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006080:	b113      	cbz	r3, 8006088 <_svfprintf_r+0x88>
 8006082:	2b25      	cmp	r3, #37	; 0x25
 8006084:	f040 8086 	bne.w	8006194 <_svfprintf_r+0x194>
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	ebb7 0803 	subs.w	r8, r7, r3
 800608e:	d00d      	beq.n	80060ac <_svfprintf_r+0xac>
 8006090:	e884 0108 	stmia.w	r4, {r3, r8}
 8006094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006096:	4443      	add	r3, r8
 8006098:	931b      	str	r3, [sp, #108]	; 0x6c
 800609a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800609c:	3301      	adds	r3, #1
 800609e:	2b07      	cmp	r3, #7
 80060a0:	931a      	str	r3, [sp, #104]	; 0x68
 80060a2:	dc79      	bgt.n	8006198 <_svfprintf_r+0x198>
 80060a4:	3408      	adds	r4, #8
 80060a6:	9b07      	ldr	r3, [sp, #28]
 80060a8:	4443      	add	r3, r8
 80060aa:	9307      	str	r3, [sp, #28]
 80060ac:	783b      	ldrb	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8711 	beq.w	8006ed6 <_svfprintf_r+0xed6>
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80060bc:	2300      	movs	r3, #0
 80060be:	4629      	mov	r1, r5
 80060c0:	461a      	mov	r2, r3
 80060c2:	f04f 39ff 	mov.w	r9, #4294967295
 80060c6:	9308      	str	r3, [sp, #32]
 80060c8:	461d      	mov	r5, r3
 80060ca:	200a      	movs	r0, #10
 80060cc:	1c4f      	adds	r7, r1, #1
 80060ce:	7809      	ldrb	r1, [r1, #0]
 80060d0:	9705      	str	r7, [sp, #20]
 80060d2:	9102      	str	r1, [sp, #8]
 80060d4:	9902      	ldr	r1, [sp, #8]
 80060d6:	3920      	subs	r1, #32
 80060d8:	2958      	cmp	r1, #88	; 0x58
 80060da:	f200 83fa 	bhi.w	80068d2 <_svfprintf_r+0x8d2>
 80060de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80060e2:	00a6      	.short	0x00a6
 80060e4:	03f803f8 	.word	0x03f803f8
 80060e8:	03f800ab 	.word	0x03f800ab
 80060ec:	03f803f8 	.word	0x03f803f8
 80060f0:	03f803f8 	.word	0x03f803f8
 80060f4:	00ae03f8 	.word	0x00ae03f8
 80060f8:	03f80065 	.word	0x03f80065
 80060fc:	00b900b6 	.word	0x00b900b6
 8006100:	00d603f8 	.word	0x00d603f8
 8006104:	00d900d9 	.word	0x00d900d9
 8006108:	00d900d9 	.word	0x00d900d9
 800610c:	00d900d9 	.word	0x00d900d9
 8006110:	00d900d9 	.word	0x00d900d9
 8006114:	03f800d9 	.word	0x03f800d9
 8006118:	03f803f8 	.word	0x03f803f8
 800611c:	03f803f8 	.word	0x03f803f8
 8006120:	03f803f8 	.word	0x03f803f8
 8006124:	03f803f8 	.word	0x03f803f8
 8006128:	011603f8 	.word	0x011603f8
 800612c:	03f8012c 	.word	0x03f8012c
 8006130:	03f8012c 	.word	0x03f8012c
 8006134:	03f803f8 	.word	0x03f803f8
 8006138:	00ec03f8 	.word	0x00ec03f8
 800613c:	03f803f8 	.word	0x03f803f8
 8006140:	03f80320 	.word	0x03f80320
 8006144:	03f803f8 	.word	0x03f803f8
 8006148:	03f803f8 	.word	0x03f803f8
 800614c:	03f8038a 	.word	0x03f8038a
 8006150:	008603f8 	.word	0x008603f8
 8006154:	03f803f8 	.word	0x03f803f8
 8006158:	03f803f8 	.word	0x03f803f8
 800615c:	03f803f8 	.word	0x03f803f8
 8006160:	03f803f8 	.word	0x03f803f8
 8006164:	03f803f8 	.word	0x03f803f8
 8006168:	006b0106 	.word	0x006b0106
 800616c:	012c012c 	.word	0x012c012c
 8006170:	00ef012c 	.word	0x00ef012c
 8006174:	03f8006b 	.word	0x03f8006b
 8006178:	00f903f8 	.word	0x00f903f8
 800617c:	030203f8 	.word	0x030203f8
 8006180:	03570322 	.word	0x03570322
 8006184:	03f80100 	.word	0x03f80100
 8006188:	03f80368 	.word	0x03f80368
 800618c:	03f8038c 	.word	0x03f8038c
 8006190:	03a403f8 	.word	0x03a403f8
 8006194:	462f      	mov	r7, r5
 8006196:	e770      	b.n	800607a <_svfprintf_r+0x7a>
 8006198:	aa19      	add	r2, sp, #100	; 0x64
 800619a:	4659      	mov	r1, fp
 800619c:	4650      	mov	r0, sl
 800619e:	f002 f9ff 	bl	80085a0 <__ssprint_r>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f040 8678 	bne.w	8006e98 <_svfprintf_r+0xe98>
 80061a8:	ac26      	add	r4, sp, #152	; 0x98
 80061aa:	e77c      	b.n	80060a6 <_svfprintf_r+0xa6>
 80061ac:	2301      	movs	r3, #1
 80061ae:	222b      	movs	r2, #43	; 0x2b
 80061b0:	9905      	ldr	r1, [sp, #20]
 80061b2:	e78b      	b.n	80060cc <_svfprintf_r+0xcc>
 80061b4:	460e      	mov	r6, r1
 80061b6:	e7fb      	b.n	80061b0 <_svfprintf_r+0x1b0>
 80061b8:	b10b      	cbz	r3, 80061be <_svfprintf_r+0x1be>
 80061ba:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80061be:	06aa      	lsls	r2, r5, #26
 80061c0:	f140 80ab 	bpl.w	800631a <_svfprintf_r+0x31a>
 80061c4:	3607      	adds	r6, #7
 80061c6:	f026 0607 	bic.w	r6, r6, #7
 80061ca:	f106 0308 	add.w	r3, r6, #8
 80061ce:	e9d6 6700 	ldrd	r6, r7, [r6]
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	2e00      	cmp	r6, #0
 80061d6:	f177 0300 	sbcs.w	r3, r7, #0
 80061da:	da06      	bge.n	80061ea <_svfprintf_r+0x1ea>
 80061dc:	4276      	negs	r6, r6
 80061de:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80061e2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80061e6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80061ea:	2301      	movs	r3, #1
 80061ec:	e2ab      	b.n	8006746 <_svfprintf_r+0x746>
 80061ee:	b10b      	cbz	r3, 80061f4 <_svfprintf_r+0x1f4>
 80061f0:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80061f4:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <_svfprintf_r+0x2d0>)
 80061f6:	930c      	str	r3, [sp, #48]	; 0x30
 80061f8:	06ab      	lsls	r3, r5, #26
 80061fa:	f140 831b 	bpl.w	8006834 <_svfprintf_r+0x834>
 80061fe:	3607      	adds	r6, #7
 8006200:	f026 0607 	bic.w	r6, r6, #7
 8006204:	f106 0308 	add.w	r3, r6, #8
 8006208:	e9d6 6700 	ldrd	r6, r7, [r6]
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	07e8      	lsls	r0, r5, #31
 8006210:	d50b      	bpl.n	800622a <_svfprintf_r+0x22a>
 8006212:	ea56 0307 	orrs.w	r3, r6, r7
 8006216:	d008      	beq.n	800622a <_svfprintf_r+0x22a>
 8006218:	2330      	movs	r3, #48	; 0x30
 800621a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800621e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006222:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8006226:	f045 0502 	orr.w	r5, r5, #2
 800622a:	2302      	movs	r3, #2
 800622c:	e287      	b.n	800673e <_svfprintf_r+0x73e>
 800622e:	2a00      	cmp	r2, #0
 8006230:	d1be      	bne.n	80061b0 <_svfprintf_r+0x1b0>
 8006232:	2301      	movs	r3, #1
 8006234:	2220      	movs	r2, #32
 8006236:	e7bb      	b.n	80061b0 <_svfprintf_r+0x1b0>
 8006238:	f045 0501 	orr.w	r5, r5, #1
 800623c:	e7b8      	b.n	80061b0 <_svfprintf_r+0x1b0>
 800623e:	1d31      	adds	r1, r6, #4
 8006240:	6836      	ldr	r6, [r6, #0]
 8006242:	9608      	str	r6, [sp, #32]
 8006244:	2e00      	cmp	r6, #0
 8006246:	dab5      	bge.n	80061b4 <_svfprintf_r+0x1b4>
 8006248:	4276      	negs	r6, r6
 800624a:	9608      	str	r6, [sp, #32]
 800624c:	460e      	mov	r6, r1
 800624e:	f045 0504 	orr.w	r5, r5, #4
 8006252:	e7ad      	b.n	80061b0 <_svfprintf_r+0x1b0>
 8006254:	9905      	ldr	r1, [sp, #20]
 8006256:	1c4f      	adds	r7, r1, #1
 8006258:	7809      	ldrb	r1, [r1, #0]
 800625a:	9102      	str	r1, [sp, #8]
 800625c:	292a      	cmp	r1, #42	; 0x2a
 800625e:	d010      	beq.n	8006282 <_svfprintf_r+0x282>
 8006260:	f04f 0900 	mov.w	r9, #0
 8006264:	9705      	str	r7, [sp, #20]
 8006266:	9902      	ldr	r1, [sp, #8]
 8006268:	3930      	subs	r1, #48	; 0x30
 800626a:	2909      	cmp	r1, #9
 800626c:	f63f af32 	bhi.w	80060d4 <_svfprintf_r+0xd4>
 8006270:	fb00 1909 	mla	r9, r0, r9, r1
 8006274:	9905      	ldr	r1, [sp, #20]
 8006276:	460f      	mov	r7, r1
 8006278:	f817 1b01 	ldrb.w	r1, [r7], #1
 800627c:	9102      	str	r1, [sp, #8]
 800627e:	9705      	str	r7, [sp, #20]
 8006280:	e7f1      	b.n	8006266 <_svfprintf_r+0x266>
 8006282:	6831      	ldr	r1, [r6, #0]
 8006284:	9705      	str	r7, [sp, #20]
 8006286:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800628a:	3604      	adds	r6, #4
 800628c:	e790      	b.n	80061b0 <_svfprintf_r+0x1b0>
 800628e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8006292:	e78d      	b.n	80061b0 <_svfprintf_r+0x1b0>
 8006294:	2100      	movs	r1, #0
 8006296:	9108      	str	r1, [sp, #32]
 8006298:	9902      	ldr	r1, [sp, #8]
 800629a:	9f08      	ldr	r7, [sp, #32]
 800629c:	3930      	subs	r1, #48	; 0x30
 800629e:	fb00 1107 	mla	r1, r0, r7, r1
 80062a2:	9108      	str	r1, [sp, #32]
 80062a4:	9905      	ldr	r1, [sp, #20]
 80062a6:	460f      	mov	r7, r1
 80062a8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062ac:	9102      	str	r1, [sp, #8]
 80062ae:	9902      	ldr	r1, [sp, #8]
 80062b0:	9705      	str	r7, [sp, #20]
 80062b2:	3930      	subs	r1, #48	; 0x30
 80062b4:	2909      	cmp	r1, #9
 80062b6:	d9ef      	bls.n	8006298 <_svfprintf_r+0x298>
 80062b8:	e70c      	b.n	80060d4 <_svfprintf_r+0xd4>
 80062ba:	f045 0508 	orr.w	r5, r5, #8
 80062be:	e777      	b.n	80061b0 <_svfprintf_r+0x1b0>
 80062c0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80062c4:	e774      	b.n	80061b0 <_svfprintf_r+0x1b0>
 80062c6:	bf00      	nop
	...
 80062d0:	0800b5c9 	.word	0x0800b5c9
 80062d4:	9905      	ldr	r1, [sp, #20]
 80062d6:	7809      	ldrb	r1, [r1, #0]
 80062d8:	296c      	cmp	r1, #108	; 0x6c
 80062da:	d105      	bne.n	80062e8 <_svfprintf_r+0x2e8>
 80062dc:	9905      	ldr	r1, [sp, #20]
 80062de:	3101      	adds	r1, #1
 80062e0:	9105      	str	r1, [sp, #20]
 80062e2:	f045 0520 	orr.w	r5, r5, #32
 80062e6:	e763      	b.n	80061b0 <_svfprintf_r+0x1b0>
 80062e8:	f045 0510 	orr.w	r5, r5, #16
 80062ec:	e760      	b.n	80061b0 <_svfprintf_r+0x1b0>
 80062ee:	1d33      	adds	r3, r6, #4
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	6833      	ldr	r3, [r6, #0]
 80062f4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8006300:	2600      	movs	r6, #0
 8006302:	f04f 0901 	mov.w	r9, #1
 8006306:	4637      	mov	r7, r6
 8006308:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 800630c:	e0f3      	b.n	80064f6 <_svfprintf_r+0x4f6>
 800630e:	b10b      	cbz	r3, 8006314 <_svfprintf_r+0x314>
 8006310:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8006314:	f045 0510 	orr.w	r5, r5, #16
 8006318:	e751      	b.n	80061be <_svfprintf_r+0x1be>
 800631a:	f015 0f10 	tst.w	r5, #16
 800631e:	f106 0304 	add.w	r3, r6, #4
 8006322:	d003      	beq.n	800632c <_svfprintf_r+0x32c>
 8006324:	6836      	ldr	r6, [r6, #0]
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	17f7      	asrs	r7, r6, #31
 800632a:	e753      	b.n	80061d4 <_svfprintf_r+0x1d4>
 800632c:	6836      	ldr	r6, [r6, #0]
 800632e:	9304      	str	r3, [sp, #16]
 8006330:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006334:	bf18      	it	ne
 8006336:	b236      	sxthne	r6, r6
 8006338:	e7f6      	b.n	8006328 <_svfprintf_r+0x328>
 800633a:	b10b      	cbz	r3, 8006340 <_svfprintf_r+0x340>
 800633c:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8006340:	3607      	adds	r6, #7
 8006342:	f026 0607 	bic.w	r6, r6, #7
 8006346:	f106 0308 	add.w	r3, r6, #8
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	ed96 8b00 	vldr	d8, [r6]
 8006350:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80063e8 <_svfprintf_r+0x3e8>
 8006354:	eeb0 7bc8 	vabs.f64	d7, d8
 8006358:	eeb4 7b46 	vcmp.f64	d7, d6
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	f340 85c2 	ble.w	8006ee8 <_svfprintf_r+0xee8>
 8006364:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8006368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636c:	d502      	bpl.n	8006374 <_svfprintf_r+0x374>
 800636e:	232d      	movs	r3, #45	; 0x2d
 8006370:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8006374:	4b1e      	ldr	r3, [pc, #120]	; (80063f0 <_svfprintf_r+0x3f0>)
 8006376:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <_svfprintf_r+0x3f4>)
 8006378:	9902      	ldr	r1, [sp, #8]
 800637a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800637e:	2947      	cmp	r1, #71	; 0x47
 8006380:	bfcc      	ite	gt
 8006382:	4690      	movgt	r8, r2
 8006384:	4698      	movle	r8, r3
 8006386:	f04f 0903 	mov.w	r9, #3
 800638a:	2600      	movs	r6, #0
 800638c:	4637      	mov	r7, r6
 800638e:	e0b2      	b.n	80064f6 <_svfprintf_r+0x4f6>
 8006390:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006394:	d020      	beq.n	80063d8 <_svfprintf_r+0x3d8>
 8006396:	9b02      	ldr	r3, [sp, #8]
 8006398:	f023 0320 	bic.w	r3, r3, #32
 800639c:	2b47      	cmp	r3, #71	; 0x47
 800639e:	d104      	bne.n	80063aa <_svfprintf_r+0x3aa>
 80063a0:	f1b9 0f00 	cmp.w	r9, #0
 80063a4:	bf08      	it	eq
 80063a6:	f04f 0901 	moveq.w	r9, #1
 80063aa:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80063ae:	930d      	str	r3, [sp, #52]	; 0x34
 80063b0:	ee18 3a90 	vmov	r3, s17
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da12      	bge.n	80063de <_svfprintf_r+0x3de>
 80063b8:	eeb1 9b48 	vneg.f64	d9, d8
 80063bc:	232d      	movs	r3, #45	; 0x2d
 80063be:	9309      	str	r3, [sp, #36]	; 0x24
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	f023 0720 	bic.w	r7, r3, #32
 80063c6:	2f46      	cmp	r7, #70	; 0x46
 80063c8:	d016      	beq.n	80063f8 <_svfprintf_r+0x3f8>
 80063ca:	2f45      	cmp	r7, #69	; 0x45
 80063cc:	f040 813d 	bne.w	800664a <_svfprintf_r+0x64a>
 80063d0:	f109 0601 	add.w	r6, r9, #1
 80063d4:	2102      	movs	r1, #2
 80063d6:	e011      	b.n	80063fc <_svfprintf_r+0x3fc>
 80063d8:	f04f 0906 	mov.w	r9, #6
 80063dc:	e7e5      	b.n	80063aa <_svfprintf_r+0x3aa>
 80063de:	eeb0 9b48 	vmov.f64	d9, d8
 80063e2:	2300      	movs	r3, #0
 80063e4:	e7eb      	b.n	80063be <_svfprintf_r+0x3be>
 80063e6:	bf00      	nop
 80063e8:	ffffffff 	.word	0xffffffff
 80063ec:	7fefffff 	.word	0x7fefffff
 80063f0:	0800b5b9 	.word	0x0800b5b9
 80063f4:	0800b5bd 	.word	0x0800b5bd
 80063f8:	464e      	mov	r6, r9
 80063fa:	2103      	movs	r1, #3
 80063fc:	ab17      	add	r3, sp, #92	; 0x5c
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	ab14      	add	r3, sp, #80	; 0x50
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	4632      	mov	r2, r6
 8006406:	ab13      	add	r3, sp, #76	; 0x4c
 8006408:	eeb0 0b49 	vmov.f64	d0, d9
 800640c:	4650      	mov	r0, sl
 800640e:	f000 fe3f 	bl	8007090 <_dtoa_r>
 8006412:	2f47      	cmp	r7, #71	; 0x47
 8006414:	4680      	mov	r8, r0
 8006416:	d102      	bne.n	800641e <_svfprintf_r+0x41e>
 8006418:	07eb      	lsls	r3, r5, #31
 800641a:	f140 856f 	bpl.w	8006efc <_svfprintf_r+0xefc>
 800641e:	2f46      	cmp	r7, #70	; 0x46
 8006420:	eb08 0306 	add.w	r3, r8, r6
 8006424:	d10d      	bne.n	8006442 <_svfprintf_r+0x442>
 8006426:	f898 2000 	ldrb.w	r2, [r8]
 800642a:	2a30      	cmp	r2, #48	; 0x30
 800642c:	d107      	bne.n	800643e <_svfprintf_r+0x43e>
 800642e:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8006432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006436:	bf1c      	itt	ne
 8006438:	f1c6 0601 	rsbne	r6, r6, #1
 800643c:	9613      	strne	r6, [sp, #76]	; 0x4c
 800643e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006440:	4413      	add	r3, r2
 8006442:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8006446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644a:	f040 8107 	bne.w	800665c <_svfprintf_r+0x65c>
 800644e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006452:	2f47      	cmp	r7, #71	; 0x47
 8006454:	eba3 0308 	sub.w	r3, r3, r8
 8006458:	9303      	str	r3, [sp, #12]
 800645a:	f040 8101 	bne.w	8006660 <_svfprintf_r+0x660>
 800645e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006460:	1cd8      	adds	r0, r3, #3
 8006462:	db02      	blt.n	800646a <_svfprintf_r+0x46a>
 8006464:	4599      	cmp	r9, r3
 8006466:	f280 8127 	bge.w	80066b8 <_svfprintf_r+0x6b8>
 800646a:	9b02      	ldr	r3, [sp, #8]
 800646c:	3b02      	subs	r3, #2
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006472:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8006476:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
 800647a:	1e53      	subs	r3, r2, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006480:	bfb6      	itet	lt
 8006482:	f1c2 0301 	rsblt	r3, r2, #1
 8006486:	222b      	movge	r2, #43	; 0x2b
 8006488:	222d      	movlt	r2, #45	; 0x2d
 800648a:	2b09      	cmp	r3, #9
 800648c:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
 8006490:	f340 8102 	ble.w	8006698 <_svfprintf_r+0x698>
 8006494:	f10d 0263 	add.w	r2, sp, #99	; 0x63
 8006498:	260a      	movs	r6, #10
 800649a:	fb93 f0f6 	sdiv	r0, r3, r6
 800649e:	fb06 3310 	mls	r3, r6, r0, r3
 80064a2:	3330      	adds	r3, #48	; 0x30
 80064a4:	2809      	cmp	r0, #9
 80064a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064aa:	f102 31ff 	add.w	r1, r2, #4294967295
 80064ae:	4603      	mov	r3, r0
 80064b0:	f300 80eb 	bgt.w	800668a <_svfprintf_r+0x68a>
 80064b4:	3330      	adds	r3, #48	; 0x30
 80064b6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80064ba:	3a02      	subs	r2, #2
 80064bc:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 80064c0:	f10d 0063 	add.w	r0, sp, #99	; 0x63
 80064c4:	4282      	cmp	r2, r0
 80064c6:	4619      	mov	r1, r3
 80064c8:	f0c0 80e1 	bcc.w	800668e <_svfprintf_r+0x68e>
 80064cc:	9a03      	ldr	r2, [sp, #12]
 80064ce:	ab15      	add	r3, sp, #84	; 0x54
 80064d0:	1acb      	subs	r3, r1, r3
 80064d2:	2a01      	cmp	r2, #1
 80064d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d6:	eb03 0902 	add.w	r9, r3, r2
 80064da:	dc02      	bgt.n	80064e2 <_svfprintf_r+0x4e2>
 80064dc:	f015 0701 	ands.w	r7, r5, #1
 80064e0:	d002      	beq.n	80064e8 <_svfprintf_r+0x4e8>
 80064e2:	9b06      	ldr	r3, [sp, #24]
 80064e4:	2700      	movs	r7, #0
 80064e6:	4499      	add	r9, r3
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	b113      	cbz	r3, 80064f2 <_svfprintf_r+0x4f2>
 80064ec:	232d      	movs	r3, #45	; 0x2d
 80064ee:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80064f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80064f4:	2600      	movs	r6, #0
 80064f6:	454e      	cmp	r6, r9
 80064f8:	4633      	mov	r3, r6
 80064fa:	bfb8      	it	lt
 80064fc:	464b      	movlt	r3, r9
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8006504:	b113      	cbz	r3, 800650c <_svfprintf_r+0x50c>
 8006506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006508:	3301      	adds	r3, #1
 800650a:	9309      	str	r3, [sp, #36]	; 0x24
 800650c:	f015 0302 	ands.w	r3, r5, #2
 8006510:	930d      	str	r3, [sp, #52]	; 0x34
 8006512:	bf1e      	ittt	ne
 8006514:	9b09      	ldrne	r3, [sp, #36]	; 0x24
 8006516:	3302      	addne	r3, #2
 8006518:	9309      	strne	r3, [sp, #36]	; 0x24
 800651a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800651e:	930e      	str	r3, [sp, #56]	; 0x38
 8006520:	d114      	bne.n	800654c <_svfprintf_r+0x54c>
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	dd0f      	ble.n	800654c <_svfprintf_r+0x54c>
 800652c:	4aac      	ldr	r2, [pc, #688]	; (80067e0 <_svfprintf_r+0x7e0>)
 800652e:	6022      	str	r2, [r4, #0]
 8006530:	2b10      	cmp	r3, #16
 8006532:	f300 81e1 	bgt.w	80068f8 <_svfprintf_r+0x8f8>
 8006536:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006538:	6063      	str	r3, [r4, #4]
 800653a:	4413      	add	r3, r2
 800653c:	931b      	str	r3, [sp, #108]	; 0x6c
 800653e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006540:	3301      	adds	r3, #1
 8006542:	2b07      	cmp	r3, #7
 8006544:	931a      	str	r3, [sp, #104]	; 0x68
 8006546:	f300 81f0 	bgt.w	800692a <_svfprintf_r+0x92a>
 800654a:	3408      	adds	r4, #8
 800654c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8006550:	b173      	cbz	r3, 8006570 <_svfprintf_r+0x570>
 8006552:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	2301      	movs	r3, #1
 800655a:	6063      	str	r3, [r4, #4]
 800655c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800655e:	3301      	adds	r3, #1
 8006560:	931b      	str	r3, [sp, #108]	; 0x6c
 8006562:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006564:	3301      	adds	r3, #1
 8006566:	2b07      	cmp	r3, #7
 8006568:	931a      	str	r3, [sp, #104]	; 0x68
 800656a:	f300 81e8 	bgt.w	800693e <_svfprintf_r+0x93e>
 800656e:	3408      	adds	r4, #8
 8006570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006572:	b16b      	cbz	r3, 8006590 <_svfprintf_r+0x590>
 8006574:	ab12      	add	r3, sp, #72	; 0x48
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	2302      	movs	r3, #2
 800657a:	6063      	str	r3, [r4, #4]
 800657c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800657e:	3302      	adds	r3, #2
 8006580:	931b      	str	r3, [sp, #108]	; 0x6c
 8006582:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006584:	3301      	adds	r3, #1
 8006586:	2b07      	cmp	r3, #7
 8006588:	931a      	str	r3, [sp, #104]	; 0x68
 800658a:	f300 81e2 	bgt.w	8006952 <_svfprintf_r+0x952>
 800658e:	3408      	adds	r4, #8
 8006590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d114      	bne.n	80065c0 <_svfprintf_r+0x5c0>
 8006596:	9b08      	ldr	r3, [sp, #32]
 8006598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	dd0f      	ble.n	80065c0 <_svfprintf_r+0x5c0>
 80065a0:	4a90      	ldr	r2, [pc, #576]	; (80067e4 <_svfprintf_r+0x7e4>)
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	f300 81de 	bgt.w	8006966 <_svfprintf_r+0x966>
 80065aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80065b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80065b4:	3301      	adds	r3, #1
 80065b6:	2b07      	cmp	r3, #7
 80065b8:	931a      	str	r3, [sp, #104]	; 0x68
 80065ba:	f300 81ed 	bgt.w	8006998 <_svfprintf_r+0x998>
 80065be:	3408      	adds	r4, #8
 80065c0:	eba6 0609 	sub.w	r6, r6, r9
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	dd0f      	ble.n	80065e8 <_svfprintf_r+0x5e8>
 80065c8:	4b86      	ldr	r3, [pc, #536]	; (80067e4 <_svfprintf_r+0x7e4>)
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	2e10      	cmp	r6, #16
 80065ce:	f300 81ed 	bgt.w	80069ac <_svfprintf_r+0x9ac>
 80065d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80065d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80065d6:	6066      	str	r6, [r4, #4]
 80065d8:	3301      	adds	r3, #1
 80065da:	4406      	add	r6, r0
 80065dc:	2b07      	cmp	r3, #7
 80065de:	961b      	str	r6, [sp, #108]	; 0x6c
 80065e0:	931a      	str	r3, [sp, #104]	; 0x68
 80065e2:	f300 81fa 	bgt.w	80069da <_svfprintf_r+0x9da>
 80065e6:	3408      	adds	r4, #8
 80065e8:	05eb      	lsls	r3, r5, #23
 80065ea:	f100 8200 	bmi.w	80069ee <_svfprintf_r+0x9ee>
 80065ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065f0:	e884 0300 	stmia.w	r4, {r8, r9}
 80065f4:	444b      	add	r3, r9
 80065f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80065f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80065fa:	3301      	adds	r3, #1
 80065fc:	2b07      	cmp	r3, #7
 80065fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006600:	f340 842a 	ble.w	8006e58 <_svfprintf_r+0xe58>
 8006604:	aa19      	add	r2, sp, #100	; 0x64
 8006606:	4659      	mov	r1, fp
 8006608:	4650      	mov	r0, sl
 800660a:	f001 ffc9 	bl	80085a0 <__ssprint_r>
 800660e:	2800      	cmp	r0, #0
 8006610:	f040 8442 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006614:	ac26      	add	r4, sp, #152	; 0x98
 8006616:	076b      	lsls	r3, r5, #29
 8006618:	f100 8421 	bmi.w	8006e5e <_svfprintf_r+0xe5e>
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	9a08      	ldr	r2, [sp, #32]
 8006620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006622:	428a      	cmp	r2, r1
 8006624:	bfac      	ite	ge
 8006626:	189b      	addge	r3, r3, r2
 8006628:	185b      	addlt	r3, r3, r1
 800662a:	9307      	str	r3, [sp, #28]
 800662c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800662e:	b13b      	cbz	r3, 8006640 <_svfprintf_r+0x640>
 8006630:	aa19      	add	r2, sp, #100	; 0x64
 8006632:	4659      	mov	r1, fp
 8006634:	4650      	mov	r0, sl
 8006636:	f001 ffb3 	bl	80085a0 <__ssprint_r>
 800663a:	2800      	cmp	r0, #0
 800663c:	f040 842c 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006640:	2300      	movs	r3, #0
 8006642:	931a      	str	r3, [sp, #104]	; 0x68
 8006644:	9e04      	ldr	r6, [sp, #16]
 8006646:	ac26      	add	r4, sp, #152	; 0x98
 8006648:	e516      	b.n	8006078 <_svfprintf_r+0x78>
 800664a:	464e      	mov	r6, r9
 800664c:	e6c2      	b.n	80063d4 <_svfprintf_r+0x3d4>
 800664e:	1c50      	adds	r0, r2, #1
 8006650:	9017      	str	r0, [sp, #92]	; 0x5c
 8006652:	7011      	strb	r1, [r2, #0]
 8006654:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006656:	4293      	cmp	r3, r2
 8006658:	d8f9      	bhi.n	800664e <_svfprintf_r+0x64e>
 800665a:	e6f9      	b.n	8006450 <_svfprintf_r+0x450>
 800665c:	2130      	movs	r1, #48	; 0x30
 800665e:	e7f9      	b.n	8006654 <_svfprintf_r+0x654>
 8006660:	9b02      	ldr	r3, [sp, #8]
 8006662:	2b65      	cmp	r3, #101	; 0x65
 8006664:	f77f af04 	ble.w	8006470 <_svfprintf_r+0x470>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	2b66      	cmp	r3, #102	; 0x66
 800666c:	d124      	bne.n	80066b8 <_svfprintf_r+0x6b8>
 800666e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006670:	2b00      	cmp	r3, #0
 8006672:	dd19      	ble.n	80066a8 <_svfprintf_r+0x6a8>
 8006674:	f1b9 0f00 	cmp.w	r9, #0
 8006678:	d101      	bne.n	800667e <_svfprintf_r+0x67e>
 800667a:	07e9      	lsls	r1, r5, #31
 800667c:	d502      	bpl.n	8006684 <_svfprintf_r+0x684>
 800667e:	9a06      	ldr	r2, [sp, #24]
 8006680:	4413      	add	r3, r2
 8006682:	444b      	add	r3, r9
 8006684:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006686:	4699      	mov	r9, r3
 8006688:	e72e      	b.n	80064e8 <_svfprintf_r+0x4e8>
 800668a:	460a      	mov	r2, r1
 800668c:	e705      	b.n	800649a <_svfprintf_r+0x49a>
 800668e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006692:	f803 1b01 	strb.w	r1, [r3], #1
 8006696:	e715      	b.n	80064c4 <_svfprintf_r+0x4c4>
 8006698:	2230      	movs	r2, #48	; 0x30
 800669a:	4413      	add	r3, r2
 800669c:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
 80066a0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 80066a4:	a916      	add	r1, sp, #88	; 0x58
 80066a6:	e711      	b.n	80064cc <_svfprintf_r+0x4cc>
 80066a8:	f1b9 0f00 	cmp.w	r9, #0
 80066ac:	d101      	bne.n	80066b2 <_svfprintf_r+0x6b2>
 80066ae:	07ea      	lsls	r2, r5, #31
 80066b0:	d515      	bpl.n	80066de <_svfprintf_r+0x6de>
 80066b2:	9b06      	ldr	r3, [sp, #24]
 80066b4:	3301      	adds	r3, #1
 80066b6:	e7e4      	b.n	8006682 <_svfprintf_r+0x682>
 80066b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	db06      	blt.n	80066ce <_svfprintf_r+0x6ce>
 80066c0:	07eb      	lsls	r3, r5, #31
 80066c2:	d50e      	bpl.n	80066e2 <_svfprintf_r+0x6e2>
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	4413      	add	r3, r2
 80066c8:	2267      	movs	r2, #103	; 0x67
 80066ca:	9202      	str	r2, [sp, #8]
 80066cc:	e7da      	b.n	8006684 <_svfprintf_r+0x684>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	9906      	ldr	r1, [sp, #24]
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	440b      	add	r3, r1
 80066d6:	dcf7      	bgt.n	80066c8 <_svfprintf_r+0x6c8>
 80066d8:	f1c2 0201 	rsb	r2, r2, #1
 80066dc:	e7f3      	b.n	80066c6 <_svfprintf_r+0x6c6>
 80066de:	2301      	movs	r3, #1
 80066e0:	e7d0      	b.n	8006684 <_svfprintf_r+0x684>
 80066e2:	4613      	mov	r3, r2
 80066e4:	e7f0      	b.n	80066c8 <_svfprintf_r+0x6c8>
 80066e6:	b10b      	cbz	r3, 80066ec <_svfprintf_r+0x6ec>
 80066e8:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80066ec:	f015 0f20 	tst.w	r5, #32
 80066f0:	f106 0304 	add.w	r3, r6, #4
 80066f4:	d008      	beq.n	8006708 <_svfprintf_r+0x708>
 80066f6:	9907      	ldr	r1, [sp, #28]
 80066f8:	6832      	ldr	r2, [r6, #0]
 80066fa:	17ce      	asrs	r6, r1, #31
 80066fc:	4608      	mov	r0, r1
 80066fe:	4631      	mov	r1, r6
 8006700:	e9c2 0100 	strd	r0, r1, [r2]
 8006704:	461e      	mov	r6, r3
 8006706:	e4b7      	b.n	8006078 <_svfprintf_r+0x78>
 8006708:	06ef      	lsls	r7, r5, #27
 800670a:	d503      	bpl.n	8006714 <_svfprintf_r+0x714>
 800670c:	6832      	ldr	r2, [r6, #0]
 800670e:	9907      	ldr	r1, [sp, #28]
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	e7f7      	b.n	8006704 <_svfprintf_r+0x704>
 8006714:	0668      	lsls	r0, r5, #25
 8006716:	d5f9      	bpl.n	800670c <_svfprintf_r+0x70c>
 8006718:	6832      	ldr	r2, [r6, #0]
 800671a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800671e:	8011      	strh	r1, [r2, #0]
 8006720:	e7f0      	b.n	8006704 <_svfprintf_r+0x704>
 8006722:	f045 0510 	orr.w	r5, r5, #16
 8006726:	f015 0320 	ands.w	r3, r5, #32
 800672a:	d023      	beq.n	8006774 <_svfprintf_r+0x774>
 800672c:	3607      	adds	r6, #7
 800672e:	f026 0607 	bic.w	r6, r6, #7
 8006732:	f106 0308 	add.w	r3, r6, #8
 8006736:	e9d6 6700 	ldrd	r6, r7, [r6]
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	2300      	movs	r3, #0
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8006746:	f1b9 3fff 	cmp.w	r9, #4294967295
 800674a:	f000 83dc 	beq.w	8006f06 <_svfprintf_r+0xf06>
 800674e:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8006752:	9209      	str	r2, [sp, #36]	; 0x24
 8006754:	ea56 0207 	orrs.w	r2, r6, r7
 8006758:	f040 83da 	bne.w	8006f10 <_svfprintf_r+0xf10>
 800675c:	f1b9 0f00 	cmp.w	r9, #0
 8006760:	f000 80ab 	beq.w	80068ba <_svfprintf_r+0x8ba>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d077      	beq.n	8006858 <_svfprintf_r+0x858>
 8006768:	2b02      	cmp	r3, #2
 800676a:	f000 8092 	beq.w	8006892 <_svfprintf_r+0x892>
 800676e:	2600      	movs	r6, #0
 8006770:	2700      	movs	r7, #0
 8006772:	e3d3      	b.n	8006f1c <_svfprintf_r+0xf1c>
 8006774:	1d32      	adds	r2, r6, #4
 8006776:	f015 0110 	ands.w	r1, r5, #16
 800677a:	9204      	str	r2, [sp, #16]
 800677c:	d002      	beq.n	8006784 <_svfprintf_r+0x784>
 800677e:	6836      	ldr	r6, [r6, #0]
 8006780:	2700      	movs	r7, #0
 8006782:	e7dc      	b.n	800673e <_svfprintf_r+0x73e>
 8006784:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8006788:	d0f9      	beq.n	800677e <_svfprintf_r+0x77e>
 800678a:	8836      	ldrh	r6, [r6, #0]
 800678c:	2700      	movs	r7, #0
 800678e:	e7d5      	b.n	800673c <_svfprintf_r+0x73c>
 8006790:	1d33      	adds	r3, r6, #4
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	2330      	movs	r3, #48	; 0x30
 8006796:	2278      	movs	r2, #120	; 0x78
 8006798:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800679c:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <_svfprintf_r+0x7e8>)
 800679e:	930c      	str	r3, [sp, #48]	; 0x30
 80067a0:	6836      	ldr	r6, [r6, #0]
 80067a2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
 80067a6:	2700      	movs	r7, #0
 80067a8:	f045 0502 	orr.w	r5, r5, #2
 80067ac:	2302      	movs	r3, #2
 80067ae:	9202      	str	r2, [sp, #8]
 80067b0:	e7c5      	b.n	800673e <_svfprintf_r+0x73e>
 80067b2:	1d33      	adds	r3, r6, #4
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	f8d6 8000 	ldr.w	r8, [r6]
 80067c2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80067c6:	d011      	beq.n	80067ec <_svfprintf_r+0x7ec>
 80067c8:	464a      	mov	r2, r9
 80067ca:	2100      	movs	r1, #0
 80067cc:	4640      	mov	r0, r8
 80067ce:	f7f9 fd37 	bl	8000240 <memchr>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f000 808e 	beq.w	80068f4 <_svfprintf_r+0x8f4>
 80067d8:	eba0 0908 	sub.w	r9, r0, r8
 80067dc:	e5d5      	b.n	800638a <_svfprintf_r+0x38a>
 80067de:	bf00      	nop
 80067e0:	0800b5ed 	.word	0x0800b5ed
 80067e4:	0800b5fd 	.word	0x0800b5fd
 80067e8:	0800b5da 	.word	0x0800b5da
 80067ec:	4640      	mov	r0, r8
 80067ee:	f7f9 fd77 	bl	80002e0 <strlen>
 80067f2:	4681      	mov	r9, r0
 80067f4:	e5c9      	b.n	800638a <_svfprintf_r+0x38a>
 80067f6:	f045 0510 	orr.w	r5, r5, #16
 80067fa:	06a9      	lsls	r1, r5, #26
 80067fc:	d509      	bpl.n	8006812 <_svfprintf_r+0x812>
 80067fe:	3607      	adds	r6, #7
 8006800:	f026 0607 	bic.w	r6, r6, #7
 8006804:	f106 0308 	add.w	r3, r6, #8
 8006808:	e9d6 6700 	ldrd	r6, r7, [r6]
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	2301      	movs	r3, #1
 8006810:	e795      	b.n	800673e <_svfprintf_r+0x73e>
 8006812:	1d33      	adds	r3, r6, #4
 8006814:	f015 0f10 	tst.w	r5, #16
 8006818:	9304      	str	r3, [sp, #16]
 800681a:	d001      	beq.n	8006820 <_svfprintf_r+0x820>
 800681c:	6836      	ldr	r6, [r6, #0]
 800681e:	e002      	b.n	8006826 <_svfprintf_r+0x826>
 8006820:	066a      	lsls	r2, r5, #25
 8006822:	d5fb      	bpl.n	800681c <_svfprintf_r+0x81c>
 8006824:	8836      	ldrh	r6, [r6, #0]
 8006826:	2700      	movs	r7, #0
 8006828:	e7f1      	b.n	800680e <_svfprintf_r+0x80e>
 800682a:	b10b      	cbz	r3, 8006830 <_svfprintf_r+0x830>
 800682c:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8006830:	4ba2      	ldr	r3, [pc, #648]	; (8006abc <_svfprintf_r+0xabc>)
 8006832:	e4e0      	b.n	80061f6 <_svfprintf_r+0x1f6>
 8006834:	1d33      	adds	r3, r6, #4
 8006836:	f015 0f10 	tst.w	r5, #16
 800683a:	9304      	str	r3, [sp, #16]
 800683c:	d001      	beq.n	8006842 <_svfprintf_r+0x842>
 800683e:	6836      	ldr	r6, [r6, #0]
 8006840:	e002      	b.n	8006848 <_svfprintf_r+0x848>
 8006842:	066f      	lsls	r7, r5, #25
 8006844:	d5fb      	bpl.n	800683e <_svfprintf_r+0x83e>
 8006846:	8836      	ldrh	r6, [r6, #0]
 8006848:	2700      	movs	r7, #0
 800684a:	e4e0      	b.n	800620e <_svfprintf_r+0x20e>
 800684c:	4643      	mov	r3, r8
 800684e:	e366      	b.n	8006f1e <_svfprintf_r+0xf1e>
 8006850:	2f00      	cmp	r7, #0
 8006852:	bf08      	it	eq
 8006854:	2e0a      	cmpeq	r6, #10
 8006856:	d205      	bcs.n	8006864 <_svfprintf_r+0x864>
 8006858:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 800685c:	3630      	adds	r6, #48	; 0x30
 800685e:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006862:	e377      	b.n	8006f54 <_svfprintf_r+0xf54>
 8006864:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	220a      	movs	r2, #10
 800686e:	2300      	movs	r3, #0
 8006870:	f7f9 fd3e 	bl	80002f0 <__aeabi_uldivmod>
 8006874:	3230      	adds	r2, #48	; 0x30
 8006876:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800687a:	2300      	movs	r3, #0
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	220a      	movs	r2, #10
 8006882:	f7f9 fd35 	bl	80002f0 <__aeabi_uldivmod>
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	ea56 0307 	orrs.w	r3, r6, r7
 800688e:	d1eb      	bne.n	8006868 <_svfprintf_r+0x868>
 8006890:	e360      	b.n	8006f54 <_svfprintf_r+0xf54>
 8006892:	2600      	movs	r6, #0
 8006894:	2700      	movs	r7, #0
 8006896:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 800689a:	f006 030f 	and.w	r3, r6, #15
 800689e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a0:	5cd3      	ldrb	r3, [r2, r3]
 80068a2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80068a6:	0933      	lsrs	r3, r6, #4
 80068a8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80068ac:	093a      	lsrs	r2, r7, #4
 80068ae:	461e      	mov	r6, r3
 80068b0:	4617      	mov	r7, r2
 80068b2:	ea56 0307 	orrs.w	r3, r6, r7
 80068b6:	d1f0      	bne.n	800689a <_svfprintf_r+0x89a>
 80068b8:	e34c      	b.n	8006f54 <_svfprintf_r+0xf54>
 80068ba:	b93b      	cbnz	r3, 80068cc <_svfprintf_r+0x8cc>
 80068bc:	07ea      	lsls	r2, r5, #31
 80068be:	d505      	bpl.n	80068cc <_svfprintf_r+0x8cc>
 80068c0:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 80068c4:	2330      	movs	r3, #48	; 0x30
 80068c6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80068ca:	e343      	b.n	8006f54 <_svfprintf_r+0xf54>
 80068cc:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 80068d0:	e340      	b.n	8006f54 <_svfprintf_r+0xf54>
 80068d2:	b10b      	cbz	r3, 80068d8 <_svfprintf_r+0x8d8>
 80068d4:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 82fb 	beq.w	8006ed6 <_svfprintf_r+0xed6>
 80068e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80068e4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 80068f0:	9604      	str	r6, [sp, #16]
 80068f2:	e505      	b.n	8006300 <_svfprintf_r+0x300>
 80068f4:	4606      	mov	r6, r0
 80068f6:	e549      	b.n	800638c <_svfprintf_r+0x38c>
 80068f8:	2210      	movs	r2, #16
 80068fa:	6062      	str	r2, [r4, #4]
 80068fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80068fe:	3210      	adds	r2, #16
 8006900:	921b      	str	r2, [sp, #108]	; 0x6c
 8006902:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006904:	3201      	adds	r2, #1
 8006906:	2a07      	cmp	r2, #7
 8006908:	921a      	str	r2, [sp, #104]	; 0x68
 800690a:	dc02      	bgt.n	8006912 <_svfprintf_r+0x912>
 800690c:	3408      	adds	r4, #8
 800690e:	3b10      	subs	r3, #16
 8006910:	e60c      	b.n	800652c <_svfprintf_r+0x52c>
 8006912:	aa19      	add	r2, sp, #100	; 0x64
 8006914:	4659      	mov	r1, fp
 8006916:	4650      	mov	r0, sl
 8006918:	930f      	str	r3, [sp, #60]	; 0x3c
 800691a:	f001 fe41 	bl	80085a0 <__ssprint_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	f040 82ba 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006924:	ac26      	add	r4, sp, #152	; 0x98
 8006926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006928:	e7f1      	b.n	800690e <_svfprintf_r+0x90e>
 800692a:	aa19      	add	r2, sp, #100	; 0x64
 800692c:	4659      	mov	r1, fp
 800692e:	4650      	mov	r0, sl
 8006930:	f001 fe36 	bl	80085a0 <__ssprint_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	f040 82af 	bne.w	8006e98 <_svfprintf_r+0xe98>
 800693a:	ac26      	add	r4, sp, #152	; 0x98
 800693c:	e606      	b.n	800654c <_svfprintf_r+0x54c>
 800693e:	aa19      	add	r2, sp, #100	; 0x64
 8006940:	4659      	mov	r1, fp
 8006942:	4650      	mov	r0, sl
 8006944:	f001 fe2c 	bl	80085a0 <__ssprint_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	f040 82a5 	bne.w	8006e98 <_svfprintf_r+0xe98>
 800694e:	ac26      	add	r4, sp, #152	; 0x98
 8006950:	e60e      	b.n	8006570 <_svfprintf_r+0x570>
 8006952:	aa19      	add	r2, sp, #100	; 0x64
 8006954:	4659      	mov	r1, fp
 8006956:	4650      	mov	r0, sl
 8006958:	f001 fe22 	bl	80085a0 <__ssprint_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	f040 829b 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006962:	ac26      	add	r4, sp, #152	; 0x98
 8006964:	e614      	b.n	8006590 <_svfprintf_r+0x590>
 8006966:	2210      	movs	r2, #16
 8006968:	6062      	str	r2, [r4, #4]
 800696a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800696c:	3210      	adds	r2, #16
 800696e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006970:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006972:	3201      	adds	r2, #1
 8006974:	2a07      	cmp	r2, #7
 8006976:	921a      	str	r2, [sp, #104]	; 0x68
 8006978:	dc02      	bgt.n	8006980 <_svfprintf_r+0x980>
 800697a:	3408      	adds	r4, #8
 800697c:	3b10      	subs	r3, #16
 800697e:	e60f      	b.n	80065a0 <_svfprintf_r+0x5a0>
 8006980:	aa19      	add	r2, sp, #100	; 0x64
 8006982:	4659      	mov	r1, fp
 8006984:	4650      	mov	r0, sl
 8006986:	930d      	str	r3, [sp, #52]	; 0x34
 8006988:	f001 fe0a 	bl	80085a0 <__ssprint_r>
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 8283 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006992:	ac26      	add	r4, sp, #152	; 0x98
 8006994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006996:	e7f1      	b.n	800697c <_svfprintf_r+0x97c>
 8006998:	aa19      	add	r2, sp, #100	; 0x64
 800699a:	4659      	mov	r1, fp
 800699c:	4650      	mov	r0, sl
 800699e:	f001 fdff 	bl	80085a0 <__ssprint_r>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f040 8278 	bne.w	8006e98 <_svfprintf_r+0xe98>
 80069a8:	ac26      	add	r4, sp, #152	; 0x98
 80069aa:	e609      	b.n	80065c0 <_svfprintf_r+0x5c0>
 80069ac:	2310      	movs	r3, #16
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069b2:	3310      	adds	r3, #16
 80069b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80069b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80069b8:	3301      	adds	r3, #1
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	931a      	str	r3, [sp, #104]	; 0x68
 80069be:	dc02      	bgt.n	80069c6 <_svfprintf_r+0x9c6>
 80069c0:	3408      	adds	r4, #8
 80069c2:	3e10      	subs	r6, #16
 80069c4:	e600      	b.n	80065c8 <_svfprintf_r+0x5c8>
 80069c6:	aa19      	add	r2, sp, #100	; 0x64
 80069c8:	4659      	mov	r1, fp
 80069ca:	4650      	mov	r0, sl
 80069cc:	f001 fde8 	bl	80085a0 <__ssprint_r>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f040 8261 	bne.w	8006e98 <_svfprintf_r+0xe98>
 80069d6:	ac26      	add	r4, sp, #152	; 0x98
 80069d8:	e7f3      	b.n	80069c2 <_svfprintf_r+0x9c2>
 80069da:	aa19      	add	r2, sp, #100	; 0x64
 80069dc:	4659      	mov	r1, fp
 80069de:	4650      	mov	r0, sl
 80069e0:	f001 fdde 	bl	80085a0 <__ssprint_r>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 8257 	bne.w	8006e98 <_svfprintf_r+0xe98>
 80069ea:	ac26      	add	r4, sp, #152	; 0x98
 80069ec:	e5fc      	b.n	80065e8 <_svfprintf_r+0x5e8>
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	2b65      	cmp	r3, #101	; 0x65
 80069f2:	f340 81a7 	ble.w	8006d44 <_svfprintf_r+0xd44>
 80069f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	d163      	bne.n	8006ac8 <_svfprintf_r+0xac8>
 8006a00:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <_svfprintf_r+0xac0>)
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	2301      	movs	r3, #1
 8006a06:	6063      	str	r3, [r4, #4]
 8006a08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006a10:	3301      	adds	r3, #1
 8006a12:	2b07      	cmp	r3, #7
 8006a14:	931a      	str	r3, [sp, #104]	; 0x68
 8006a16:	dc25      	bgt.n	8006a64 <_svfprintf_r+0xa64>
 8006a18:	3408      	adds	r4, #8
 8006a1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a1c:	9a03      	ldr	r2, [sp, #12]
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	db02      	blt.n	8006a28 <_svfprintf_r+0xa28>
 8006a22:	07ee      	lsls	r6, r5, #31
 8006a24:	f57f adf7 	bpl.w	8006616 <_svfprintf_r+0x616>
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	9a06      	ldr	r2, [sp, #24]
 8006a32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a34:	4413      	add	r3, r2
 8006a36:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	2b07      	cmp	r3, #7
 8006a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006a40:	dc1a      	bgt.n	8006a78 <_svfprintf_r+0xa78>
 8006a42:	3408      	adds	r4, #8
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	1e5e      	subs	r6, r3, #1
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	f77f ade4 	ble.w	8006616 <_svfprintf_r+0x616>
 8006a4e:	4f1d      	ldr	r7, [pc, #116]	; (8006ac4 <_svfprintf_r+0xac4>)
 8006a50:	f04f 0810 	mov.w	r8, #16
 8006a54:	2e10      	cmp	r6, #16
 8006a56:	6027      	str	r7, [r4, #0]
 8006a58:	dc18      	bgt.n	8006a8c <_svfprintf_r+0xa8c>
 8006a5a:	6066      	str	r6, [r4, #4]
 8006a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a5e:	441e      	add	r6, r3
 8006a60:	961b      	str	r6, [sp, #108]	; 0x6c
 8006a62:	e5c9      	b.n	80065f8 <_svfprintf_r+0x5f8>
 8006a64:	aa19      	add	r2, sp, #100	; 0x64
 8006a66:	4659      	mov	r1, fp
 8006a68:	4650      	mov	r0, sl
 8006a6a:	f001 fd99 	bl	80085a0 <__ssprint_r>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f040 8212 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006a74:	ac26      	add	r4, sp, #152	; 0x98
 8006a76:	e7d0      	b.n	8006a1a <_svfprintf_r+0xa1a>
 8006a78:	aa19      	add	r2, sp, #100	; 0x64
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	f001 fd8f 	bl	80085a0 <__ssprint_r>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 8208 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006a88:	ac26      	add	r4, sp, #152	; 0x98
 8006a8a:	e7db      	b.n	8006a44 <_svfprintf_r+0xa44>
 8006a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a8e:	f8c4 8004 	str.w	r8, [r4, #4]
 8006a92:	3310      	adds	r3, #16
 8006a94:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006a98:	3301      	adds	r3, #1
 8006a9a:	2b07      	cmp	r3, #7
 8006a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a9e:	dc02      	bgt.n	8006aa6 <_svfprintf_r+0xaa6>
 8006aa0:	3408      	adds	r4, #8
 8006aa2:	3e10      	subs	r6, #16
 8006aa4:	e7d6      	b.n	8006a54 <_svfprintf_r+0xa54>
 8006aa6:	aa19      	add	r2, sp, #100	; 0x64
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	4650      	mov	r0, sl
 8006aac:	f001 fd78 	bl	80085a0 <__ssprint_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	f040 81f1 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006ab6:	ac26      	add	r4, sp, #152	; 0x98
 8006ab8:	e7f3      	b.n	8006aa2 <_svfprintf_r+0xaa2>
 8006aba:	bf00      	nop
 8006abc:	0800b5da 	.word	0x0800b5da
 8006ac0:	0800b5eb 	.word	0x0800b5eb
 8006ac4:	0800b5fd 	.word	0x0800b5fd
 8006ac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dc7a      	bgt.n	8006bc4 <_svfprintf_r+0xbc4>
 8006ace:	4b9b      	ldr	r3, [pc, #620]	; (8006d3c <_svfprintf_r+0xd3c>)
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ad8:	3301      	adds	r3, #1
 8006ada:	931b      	str	r3, [sp, #108]	; 0x6c
 8006adc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ade:	3301      	adds	r3, #1
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ae4:	dc44      	bgt.n	8006b70 <_svfprintf_r+0xb70>
 8006ae6:	3408      	adds	r4, #8
 8006ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aea:	b923      	cbnz	r3, 8006af6 <_svfprintf_r+0xaf6>
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	b913      	cbnz	r3, 8006af6 <_svfprintf_r+0xaf6>
 8006af0:	07e8      	lsls	r0, r5, #31
 8006af2:	f57f ad90 	bpl.w	8006616 <_svfprintf_r+0x616>
 8006af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	9b06      	ldr	r3, [sp, #24]
 8006afc:	6063      	str	r3, [r4, #4]
 8006afe:	9a06      	ldr	r2, [sp, #24]
 8006b00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b02:	4413      	add	r3, r2
 8006b04:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006b08:	3301      	adds	r3, #1
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b0e:	dc39      	bgt.n	8006b84 <_svfprintf_r+0xb84>
 8006b10:	f104 0308 	add.w	r3, r4, #8
 8006b14:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	da19      	bge.n	8006b4e <_svfprintf_r+0xb4e>
 8006b1a:	4f89      	ldr	r7, [pc, #548]	; (8006d40 <_svfprintf_r+0xd40>)
 8006b1c:	4276      	negs	r6, r6
 8006b1e:	2410      	movs	r4, #16
 8006b20:	2e10      	cmp	r6, #16
 8006b22:	601f      	str	r7, [r3, #0]
 8006b24:	dc38      	bgt.n	8006b98 <_svfprintf_r+0xb98>
 8006b26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b28:	605e      	str	r6, [r3, #4]
 8006b2a:	4416      	add	r6, r2
 8006b2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b2e:	961b      	str	r6, [sp, #108]	; 0x6c
 8006b30:	3201      	adds	r2, #1
 8006b32:	2a07      	cmp	r2, #7
 8006b34:	f103 0308 	add.w	r3, r3, #8
 8006b38:	921a      	str	r2, [sp, #104]	; 0x68
 8006b3a:	dd08      	ble.n	8006b4e <_svfprintf_r+0xb4e>
 8006b3c:	aa19      	add	r2, sp, #100	; 0x64
 8006b3e:	4659      	mov	r1, fp
 8006b40:	4650      	mov	r0, sl
 8006b42:	f001 fd2d 	bl	80085a0 <__ssprint_r>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f040 81a6 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006b4c:	ab26      	add	r3, sp, #152	; 0x98
 8006b4e:	9a03      	ldr	r2, [sp, #12]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	9903      	ldr	r1, [sp, #12]
 8006b54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b56:	f8c3 8000 	str.w	r8, [r3]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b60:	3201      	adds	r2, #1
 8006b62:	2a07      	cmp	r2, #7
 8006b64:	921a      	str	r2, [sp, #104]	; 0x68
 8006b66:	f73f ad4d 	bgt.w	8006604 <_svfprintf_r+0x604>
 8006b6a:	f103 0408 	add.w	r4, r3, #8
 8006b6e:	e552      	b.n	8006616 <_svfprintf_r+0x616>
 8006b70:	aa19      	add	r2, sp, #100	; 0x64
 8006b72:	4659      	mov	r1, fp
 8006b74:	4650      	mov	r0, sl
 8006b76:	f001 fd13 	bl	80085a0 <__ssprint_r>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f040 818c 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006b80:	ac26      	add	r4, sp, #152	; 0x98
 8006b82:	e7b1      	b.n	8006ae8 <_svfprintf_r+0xae8>
 8006b84:	aa19      	add	r2, sp, #100	; 0x64
 8006b86:	4659      	mov	r1, fp
 8006b88:	4650      	mov	r0, sl
 8006b8a:	f001 fd09 	bl	80085a0 <__ssprint_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f040 8182 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006b94:	ab26      	add	r3, sp, #152	; 0x98
 8006b96:	e7bd      	b.n	8006b14 <_svfprintf_r+0xb14>
 8006b98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b9a:	605c      	str	r4, [r3, #4]
 8006b9c:	3210      	adds	r2, #16
 8006b9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ba0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ba2:	3201      	adds	r2, #1
 8006ba4:	2a07      	cmp	r2, #7
 8006ba6:	921a      	str	r2, [sp, #104]	; 0x68
 8006ba8:	dc02      	bgt.n	8006bb0 <_svfprintf_r+0xbb0>
 8006baa:	3308      	adds	r3, #8
 8006bac:	3e10      	subs	r6, #16
 8006bae:	e7b7      	b.n	8006b20 <_svfprintf_r+0xb20>
 8006bb0:	aa19      	add	r2, sp, #100	; 0x64
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	f001 fcf3 	bl	80085a0 <__ssprint_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f040 816c 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006bc0:	ab26      	add	r3, sp, #152	; 0x98
 8006bc2:	e7f3      	b.n	8006bac <_svfprintf_r+0xbac>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	bfa8      	it	ge
 8006bca:	463b      	movge	r3, r7
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	461e      	mov	r6, r3
 8006bd0:	dd0b      	ble.n	8006bea <_svfprintf_r+0xbea>
 8006bd2:	6063      	str	r3, [r4, #4]
 8006bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bd6:	f8c4 8000 	str.w	r8, [r4]
 8006bda:	4433      	add	r3, r6
 8006bdc:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006be0:	3301      	adds	r3, #1
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	931a      	str	r3, [sp, #104]	; 0x68
 8006be6:	dc5f      	bgt.n	8006ca8 <_svfprintf_r+0xca8>
 8006be8:	3408      	adds	r4, #8
 8006bea:	2e00      	cmp	r6, #0
 8006bec:	bfac      	ite	ge
 8006bee:	1bbe      	subge	r6, r7, r6
 8006bf0:	463e      	movlt	r6, r7
 8006bf2:	2e00      	cmp	r6, #0
 8006bf4:	dd0f      	ble.n	8006c16 <_svfprintf_r+0xc16>
 8006bf6:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8006d40 <_svfprintf_r+0xd40>
 8006bfa:	f8c4 9000 	str.w	r9, [r4]
 8006bfe:	2e10      	cmp	r6, #16
 8006c00:	dc5c      	bgt.n	8006cbc <_svfprintf_r+0xcbc>
 8006c02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c04:	6066      	str	r6, [r4, #4]
 8006c06:	441e      	add	r6, r3
 8006c08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	931a      	str	r3, [sp, #104]	; 0x68
 8006c12:	dc6a      	bgt.n	8006cea <_svfprintf_r+0xcea>
 8006c14:	3408      	adds	r4, #8
 8006c16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c18:	9a03      	ldr	r2, [sp, #12]
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	db01      	blt.n	8006c22 <_svfprintf_r+0xc22>
 8006c1e:	07e9      	lsls	r1, r5, #31
 8006c20:	d50d      	bpl.n	8006c3e <_svfprintf_r+0xc3e>
 8006c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	9a06      	ldr	r2, [sp, #24]
 8006c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c2e:	4413      	add	r3, r2
 8006c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c34:	3301      	adds	r3, #1
 8006c36:	2b07      	cmp	r3, #7
 8006c38:	931a      	str	r3, [sp, #104]	; 0x68
 8006c3a:	dc60      	bgt.n	8006cfe <_svfprintf_r+0xcfe>
 8006c3c:	3408      	adds	r4, #8
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	9a03      	ldr	r2, [sp, #12]
 8006c42:	1bde      	subs	r6, r3, r7
 8006c44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	429e      	cmp	r6, r3
 8006c4a:	bfa8      	it	ge
 8006c4c:	461e      	movge	r6, r3
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	dd0b      	ble.n	8006c6a <_svfprintf_r+0xc6a>
 8006c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c54:	6066      	str	r6, [r4, #4]
 8006c56:	4433      	add	r3, r6
 8006c58:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	4447      	add	r7, r8
 8006c60:	2b07      	cmp	r3, #7
 8006c62:	6027      	str	r7, [r4, #0]
 8006c64:	931a      	str	r3, [sp, #104]	; 0x68
 8006c66:	dc54      	bgt.n	8006d12 <_svfprintf_r+0xd12>
 8006c68:	3408      	adds	r4, #8
 8006c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c6c:	9a03      	ldr	r2, [sp, #12]
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	eba2 0303 	sub.w	r3, r2, r3
 8006c74:	bfac      	ite	ge
 8006c76:	1b9e      	subge	r6, r3, r6
 8006c78:	461e      	movlt	r6, r3
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	f77f accb 	ble.w	8006616 <_svfprintf_r+0x616>
 8006c80:	4f2f      	ldr	r7, [pc, #188]	; (8006d40 <_svfprintf_r+0xd40>)
 8006c82:	f04f 0810 	mov.w	r8, #16
 8006c86:	2e10      	cmp	r6, #16
 8006c88:	6027      	str	r7, [r4, #0]
 8006c8a:	f77f aee6 	ble.w	8006a5a <_svfprintf_r+0xa5a>
 8006c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c90:	f8c4 8004 	str.w	r8, [r4, #4]
 8006c94:	3310      	adds	r3, #16
 8006c96:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca0:	dc41      	bgt.n	8006d26 <_svfprintf_r+0xd26>
 8006ca2:	3408      	adds	r4, #8
 8006ca4:	3e10      	subs	r6, #16
 8006ca6:	e7ee      	b.n	8006c86 <_svfprintf_r+0xc86>
 8006ca8:	aa19      	add	r2, sp, #100	; 0x64
 8006caa:	4659      	mov	r1, fp
 8006cac:	4650      	mov	r0, sl
 8006cae:	f001 fc77 	bl	80085a0 <__ssprint_r>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f040 80f0 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006cb8:	ac26      	add	r4, sp, #152	; 0x98
 8006cba:	e796      	b.n	8006bea <_svfprintf_r+0xbea>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cc2:	3310      	adds	r3, #16
 8006cc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006cc8:	3301      	adds	r3, #1
 8006cca:	2b07      	cmp	r3, #7
 8006ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8006cce:	dc02      	bgt.n	8006cd6 <_svfprintf_r+0xcd6>
 8006cd0:	3408      	adds	r4, #8
 8006cd2:	3e10      	subs	r6, #16
 8006cd4:	e791      	b.n	8006bfa <_svfprintf_r+0xbfa>
 8006cd6:	aa19      	add	r2, sp, #100	; 0x64
 8006cd8:	4659      	mov	r1, fp
 8006cda:	4650      	mov	r0, sl
 8006cdc:	f001 fc60 	bl	80085a0 <__ssprint_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	f040 80d9 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006ce6:	ac26      	add	r4, sp, #152	; 0x98
 8006ce8:	e7f3      	b.n	8006cd2 <_svfprintf_r+0xcd2>
 8006cea:	aa19      	add	r2, sp, #100	; 0x64
 8006cec:	4659      	mov	r1, fp
 8006cee:	4650      	mov	r0, sl
 8006cf0:	f001 fc56 	bl	80085a0 <__ssprint_r>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f040 80cf 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006cfa:	ac26      	add	r4, sp, #152	; 0x98
 8006cfc:	e78b      	b.n	8006c16 <_svfprintf_r+0xc16>
 8006cfe:	aa19      	add	r2, sp, #100	; 0x64
 8006d00:	4659      	mov	r1, fp
 8006d02:	4650      	mov	r0, sl
 8006d04:	f001 fc4c 	bl	80085a0 <__ssprint_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f040 80c5 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006d0e:	ac26      	add	r4, sp, #152	; 0x98
 8006d10:	e795      	b.n	8006c3e <_svfprintf_r+0xc3e>
 8006d12:	aa19      	add	r2, sp, #100	; 0x64
 8006d14:	4659      	mov	r1, fp
 8006d16:	4650      	mov	r0, sl
 8006d18:	f001 fc42 	bl	80085a0 <__ssprint_r>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f040 80bb 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006d22:	ac26      	add	r4, sp, #152	; 0x98
 8006d24:	e7a1      	b.n	8006c6a <_svfprintf_r+0xc6a>
 8006d26:	aa19      	add	r2, sp, #100	; 0x64
 8006d28:	4659      	mov	r1, fp
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f001 fc38 	bl	80085a0 <__ssprint_r>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f040 80b1 	bne.w	8006e98 <_svfprintf_r+0xe98>
 8006d36:	ac26      	add	r4, sp, #152	; 0x98
 8006d38:	e7b4      	b.n	8006ca4 <_svfprintf_r+0xca4>
 8006d3a:	bf00      	nop
 8006d3c:	0800b5eb 	.word	0x0800b5eb
 8006d40:	0800b5fd 	.word	0x0800b5fd
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	dc01      	bgt.n	8006d4e <_svfprintf_r+0xd4e>
 8006d4a:	07ea      	lsls	r2, r5, #31
 8006d4c:	d573      	bpl.n	8006e36 <_svfprintf_r+0xe36>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d54:	f8c4 8000 	str.w	r8, [r4]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006d5e:	3301      	adds	r3, #1
 8006d60:	2b07      	cmp	r3, #7
 8006d62:	931a      	str	r3, [sp, #104]	; 0x68
 8006d64:	dc34      	bgt.n	8006dd0 <_svfprintf_r+0xdd0>
 8006d66:	3408      	adds	r4, #8
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	9b06      	ldr	r3, [sp, #24]
 8006d6e:	6063      	str	r3, [r4, #4]
 8006d70:	9a06      	ldr	r2, [sp, #24]
 8006d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d74:	4413      	add	r3, r2
 8006d76:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	2b07      	cmp	r3, #7
 8006d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d80:	dc2f      	bgt.n	8006de2 <_svfprintf_r+0xde2>
 8006d82:	f104 0308 	add.w	r3, r4, #8
 8006d86:	9a03      	ldr	r2, [sp, #12]
 8006d88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d90:	f102 36ff 	add.w	r6, r2, #4294967295
 8006d94:	d02e      	beq.n	8006df4 <_svfprintf_r+0xdf4>
 8006d96:	f108 0201 	add.w	r2, r8, #1
 8006d9a:	e883 0044 	stmia.w	r3, {r2, r6}
 8006d9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006da0:	9903      	ldr	r1, [sp, #12]
 8006da2:	3a01      	subs	r2, #1
 8006da4:	440a      	add	r2, r1
 8006da6:	921b      	str	r2, [sp, #108]	; 0x6c
 8006da8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006daa:	3201      	adds	r2, #1
 8006dac:	2a07      	cmp	r2, #7
 8006dae:	921a      	str	r2, [sp, #104]	; 0x68
 8006db0:	dd50      	ble.n	8006e54 <_svfprintf_r+0xe54>
 8006db2:	aa19      	add	r2, sp, #100	; 0x64
 8006db4:	4659      	mov	r1, fp
 8006db6:	4650      	mov	r0, sl
 8006db8:	f001 fbf2 	bl	80085a0 <__ssprint_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d16b      	bne.n	8006e98 <_svfprintf_r+0xe98>
 8006dc0:	ab26      	add	r3, sp, #152	; 0x98
 8006dc2:	aa15      	add	r2, sp, #84	; 0x54
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006dce:	e6c4      	b.n	8006b5a <_svfprintf_r+0xb5a>
 8006dd0:	aa19      	add	r2, sp, #100	; 0x64
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	f001 fbe3 	bl	80085a0 <__ssprint_r>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d15c      	bne.n	8006e98 <_svfprintf_r+0xe98>
 8006dde:	ac26      	add	r4, sp, #152	; 0x98
 8006de0:	e7c2      	b.n	8006d68 <_svfprintf_r+0xd68>
 8006de2:	aa19      	add	r2, sp, #100	; 0x64
 8006de4:	4659      	mov	r1, fp
 8006de6:	4650      	mov	r0, sl
 8006de8:	f001 fbda 	bl	80085a0 <__ssprint_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d153      	bne.n	8006e98 <_svfprintf_r+0xe98>
 8006df0:	ab26      	add	r3, sp, #152	; 0x98
 8006df2:	e7c8      	b.n	8006d86 <_svfprintf_r+0xd86>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	dde4      	ble.n	8006dc2 <_svfprintf_r+0xdc2>
 8006df8:	4f5b      	ldr	r7, [pc, #364]	; (8006f68 <_svfprintf_r+0xf68>)
 8006dfa:	2410      	movs	r4, #16
 8006dfc:	2e10      	cmp	r6, #16
 8006dfe:	601f      	str	r7, [r3, #0]
 8006e00:	dc04      	bgt.n	8006e0c <_svfprintf_r+0xe0c>
 8006e02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e04:	605e      	str	r6, [r3, #4]
 8006e06:	4416      	add	r6, r2
 8006e08:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e0a:	e7cd      	b.n	8006da8 <_svfprintf_r+0xda8>
 8006e0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e0e:	605c      	str	r4, [r3, #4]
 8006e10:	3210      	adds	r2, #16
 8006e12:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e16:	3201      	adds	r2, #1
 8006e18:	2a07      	cmp	r2, #7
 8006e1a:	921a      	str	r2, [sp, #104]	; 0x68
 8006e1c:	dc02      	bgt.n	8006e24 <_svfprintf_r+0xe24>
 8006e1e:	3308      	adds	r3, #8
 8006e20:	3e10      	subs	r6, #16
 8006e22:	e7eb      	b.n	8006dfc <_svfprintf_r+0xdfc>
 8006e24:	aa19      	add	r2, sp, #100	; 0x64
 8006e26:	4659      	mov	r1, fp
 8006e28:	4650      	mov	r0, sl
 8006e2a:	f001 fbb9 	bl	80085a0 <__ssprint_r>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d132      	bne.n	8006e98 <_svfprintf_r+0xe98>
 8006e32:	ab26      	add	r3, sp, #152	; 0x98
 8006e34:	e7f4      	b.n	8006e20 <_svfprintf_r+0xe20>
 8006e36:	2301      	movs	r3, #1
 8006e38:	6063      	str	r3, [r4, #4]
 8006e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e3c:	f8c4 8000 	str.w	r8, [r4]
 8006e40:	3301      	adds	r3, #1
 8006e42:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e46:	3301      	adds	r3, #1
 8006e48:	2b07      	cmp	r3, #7
 8006e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e4c:	dcb1      	bgt.n	8006db2 <_svfprintf_r+0xdb2>
 8006e4e:	f104 0308 	add.w	r3, r4, #8
 8006e52:	e7b6      	b.n	8006dc2 <_svfprintf_r+0xdc2>
 8006e54:	3308      	adds	r3, #8
 8006e56:	e7b4      	b.n	8006dc2 <_svfprintf_r+0xdc2>
 8006e58:	3408      	adds	r4, #8
 8006e5a:	f7ff bbdc 	b.w	8006616 <_svfprintf_r+0x616>
 8006e5e:	9b08      	ldr	r3, [sp, #32]
 8006e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e62:	1a9d      	subs	r5, r3, r2
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	f77f abd9 	ble.w	800661c <_svfprintf_r+0x61c>
 8006e6a:	4e40      	ldr	r6, [pc, #256]	; (8006f6c <_svfprintf_r+0xf6c>)
 8006e6c:	2710      	movs	r7, #16
 8006e6e:	2d10      	cmp	r5, #16
 8006e70:	6026      	str	r6, [r4, #0]
 8006e72:	dc1b      	bgt.n	8006eac <_svfprintf_r+0xeac>
 8006e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e76:	6065      	str	r5, [r4, #4]
 8006e78:	441d      	add	r5, r3
 8006e7a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e7c:	951b      	str	r5, [sp, #108]	; 0x6c
 8006e7e:	3301      	adds	r3, #1
 8006e80:	2b07      	cmp	r3, #7
 8006e82:	931a      	str	r3, [sp, #104]	; 0x68
 8006e84:	f77f abca 	ble.w	800661c <_svfprintf_r+0x61c>
 8006e88:	aa19      	add	r2, sp, #100	; 0x64
 8006e8a:	4659      	mov	r1, fp
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f001 fb87 	bl	80085a0 <__ssprint_r>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f43f abc2 	beq.w	800661c <_svfprintf_r+0x61c>
 8006e98:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006e9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ea0:	9b07      	ldr	r3, [sp, #28]
 8006ea2:	bf18      	it	ne
 8006ea4:	f04f 33ff 	movne.w	r3, #4294967295
 8006ea8:	f7ff b8d0 	b.w	800604c <_svfprintf_r+0x4c>
 8006eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eae:	6067      	str	r7, [r4, #4]
 8006eb0:	3310      	adds	r3, #16
 8006eb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8006eb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	2b07      	cmp	r3, #7
 8006eba:	931a      	str	r3, [sp, #104]	; 0x68
 8006ebc:	dc02      	bgt.n	8006ec4 <_svfprintf_r+0xec4>
 8006ebe:	3408      	adds	r4, #8
 8006ec0:	3d10      	subs	r5, #16
 8006ec2:	e7d4      	b.n	8006e6e <_svfprintf_r+0xe6e>
 8006ec4:	aa19      	add	r2, sp, #100	; 0x64
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	4650      	mov	r0, sl
 8006eca:	f001 fb69 	bl	80085a0 <__ssprint_r>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d1e2      	bne.n	8006e98 <_svfprintf_r+0xe98>
 8006ed2:	ac26      	add	r4, sp, #152	; 0x98
 8006ed4:	e7f4      	b.n	8006ec0 <_svfprintf_r+0xec0>
 8006ed6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0dd      	beq.n	8006e98 <_svfprintf_r+0xe98>
 8006edc:	aa19      	add	r2, sp, #100	; 0x64
 8006ede:	4659      	mov	r1, fp
 8006ee0:	4650      	mov	r0, sl
 8006ee2:	f001 fb5d 	bl	80085a0 <__ssprint_r>
 8006ee6:	e7d7      	b.n	8006e98 <_svfprintf_r+0xe98>
 8006ee8:	eeb4 8b48 	vcmp.f64	d8, d8
 8006eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef0:	f5ff aa4e 	bvc.w	8006390 <_svfprintf_r+0x390>
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <_svfprintf_r+0xf70>)
 8006ef6:	4a1f      	ldr	r2, [pc, #124]	; (8006f74 <_svfprintf_r+0xf74>)
 8006ef8:	f7ff ba3e 	b.w	8006378 <_svfprintf_r+0x378>
 8006efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006efe:	1a1b      	subs	r3, r3, r0
 8006f00:	9303      	str	r3, [sp, #12]
 8006f02:	f7ff baac 	b.w	800645e <_svfprintf_r+0x45e>
 8006f06:	ea56 0207 	orrs.w	r2, r6, r7
 8006f0a:	9509      	str	r5, [sp, #36]	; 0x24
 8006f0c:	f43f ac2a 	beq.w	8006764 <_svfprintf_r+0x764>
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f43f ac9d 	beq.w	8006850 <_svfprintf_r+0x850>
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	f43f acbd 	beq.w	8006896 <_svfprintf_r+0x896>
 8006f1c:	ab26      	add	r3, sp, #152	; 0x98
 8006f1e:	08f1      	lsrs	r1, r6, #3
 8006f20:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006f24:	08f8      	lsrs	r0, r7, #3
 8006f26:	f006 0207 	and.w	r2, r6, #7
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	3230      	adds	r2, #48	; 0x30
 8006f30:	ea56 0107 	orrs.w	r1, r6, r7
 8006f34:	f103 38ff 	add.w	r8, r3, #4294967295
 8006f38:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006f3c:	f47f ac86 	bne.w	800684c <_svfprintf_r+0x84c>
 8006f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f42:	07c9      	lsls	r1, r1, #31
 8006f44:	d506      	bpl.n	8006f54 <_svfprintf_r+0xf54>
 8006f46:	2a30      	cmp	r2, #48	; 0x30
 8006f48:	d004      	beq.n	8006f54 <_svfprintf_r+0xf54>
 8006f4a:	2230      	movs	r2, #48	; 0x30
 8006f4c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006f50:	f1a3 0802 	sub.w	r8, r3, #2
 8006f54:	464e      	mov	r6, r9
 8006f56:	f10d 0998 	add.w	r9, sp, #152	; 0x98
 8006f5a:	eba9 0908 	sub.w	r9, r9, r8
 8006f5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f60:	2700      	movs	r7, #0
 8006f62:	f7ff bac8 	b.w	80064f6 <_svfprintf_r+0x4f6>
 8006f66:	bf00      	nop
 8006f68:	0800b5fd 	.word	0x0800b5fd
 8006f6c:	0800b5ed 	.word	0x0800b5ed
 8006f70:	0800b5c1 	.word	0x0800b5c1
 8006f74:	0800b5c5 	.word	0x0800b5c5

08006f78 <quorem>:
 8006f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	6903      	ldr	r3, [r0, #16]
 8006f7e:	690c      	ldr	r4, [r1, #16]
 8006f80:	429c      	cmp	r4, r3
 8006f82:	4680      	mov	r8, r0
 8006f84:	f300 8082 	bgt.w	800708c <quorem+0x114>
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	f101 0714 	add.w	r7, r1, #20
 8006f8e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006f92:	f100 0614 	add.w	r6, r0, #20
 8006f96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006f9e:	eb06 030e 	add.w	r3, r6, lr
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	eb07 090e 	add.w	r9, r7, lr
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	fbb0 f5f5 	udiv	r5, r0, r5
 8006fae:	b395      	cbz	r5, 8007016 <quorem+0x9e>
 8006fb0:	f04f 0a00 	mov.w	sl, #0
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	46b4      	mov	ip, r6
 8006fb8:	46d3      	mov	fp, sl
 8006fba:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fbe:	b293      	uxth	r3, r2
 8006fc0:	fb05 a303 	mla	r3, r5, r3, sl
 8006fc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ebab 0303 	sub.w	r3, fp, r3
 8006fce:	0c12      	lsrs	r2, r2, #16
 8006fd0:	f8bc b000 	ldrh.w	fp, [ip]
 8006fd4:	fb05 a202 	mla	r2, r5, r2, sl
 8006fd8:	fa13 f38b 	uxtah	r3, r3, fp
 8006fdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006fe0:	fa1f fb82 	uxth.w	fp, r2
 8006fe4:	f8dc 2000 	ldr.w	r2, [ip]
 8006fe8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ff6:	4581      	cmp	r9, r0
 8006ff8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006ffc:	f84c 3b04 	str.w	r3, [ip], #4
 8007000:	d2db      	bcs.n	8006fba <quorem+0x42>
 8007002:	f856 300e 	ldr.w	r3, [r6, lr]
 8007006:	b933      	cbnz	r3, 8007016 <quorem+0x9e>
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	3b04      	subs	r3, #4
 800700c:	429e      	cmp	r6, r3
 800700e:	461a      	mov	r2, r3
 8007010:	d330      	bcc.n	8007074 <quorem+0xfc>
 8007012:	f8c8 4010 	str.w	r4, [r8, #16]
 8007016:	4640      	mov	r0, r8
 8007018:	f001 f9eb 	bl	80083f2 <__mcmp>
 800701c:	2800      	cmp	r0, #0
 800701e:	db25      	blt.n	800706c <quorem+0xf4>
 8007020:	3501      	adds	r5, #1
 8007022:	4630      	mov	r0, r6
 8007024:	f04f 0e00 	mov.w	lr, #0
 8007028:	f857 2b04 	ldr.w	r2, [r7], #4
 800702c:	f8d0 c000 	ldr.w	ip, [r0]
 8007030:	b293      	uxth	r3, r2
 8007032:	ebae 0303 	sub.w	r3, lr, r3
 8007036:	0c12      	lsrs	r2, r2, #16
 8007038:	fa13 f38c 	uxtah	r3, r3, ip
 800703c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800704a:	45b9      	cmp	r9, r7
 800704c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007050:	f840 3b04 	str.w	r3, [r0], #4
 8007054:	d2e8      	bcs.n	8007028 <quorem+0xb0>
 8007056:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800705a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800705e:	b92a      	cbnz	r2, 800706c <quorem+0xf4>
 8007060:	3b04      	subs	r3, #4
 8007062:	429e      	cmp	r6, r3
 8007064:	461a      	mov	r2, r3
 8007066:	d30b      	bcc.n	8007080 <quorem+0x108>
 8007068:	f8c8 4010 	str.w	r4, [r8, #16]
 800706c:	4628      	mov	r0, r5
 800706e:	b003      	add	sp, #12
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	3b04      	subs	r3, #4
 8007078:	2a00      	cmp	r2, #0
 800707a:	d1ca      	bne.n	8007012 <quorem+0x9a>
 800707c:	3c01      	subs	r4, #1
 800707e:	e7c5      	b.n	800700c <quorem+0x94>
 8007080:	6812      	ldr	r2, [r2, #0]
 8007082:	3b04      	subs	r3, #4
 8007084:	2a00      	cmp	r2, #0
 8007086:	d1ef      	bne.n	8007068 <quorem+0xf0>
 8007088:	3c01      	subs	r4, #1
 800708a:	e7ea      	b.n	8007062 <quorem+0xea>
 800708c:	2000      	movs	r0, #0
 800708e:	e7ee      	b.n	800706e <quorem+0xf6>

08007090 <_dtoa_r>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	ec57 6b10 	vmov	r6, r7, d0
 8007098:	b095      	sub	sp, #84	; 0x54
 800709a:	e9cd 6700 	strd	r6, r7, [sp]
 800709e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070a0:	9107      	str	r1, [sp, #28]
 80070a2:	4605      	mov	r5, r0
 80070a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80070a6:	9310      	str	r3, [sp, #64]	; 0x40
 80070a8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80070aa:	b93e      	cbnz	r6, 80070bc <_dtoa_r+0x2c>
 80070ac:	2010      	movs	r0, #16
 80070ae:	f000 fd69 	bl	8007b84 <malloc>
 80070b2:	6268      	str	r0, [r5, #36]	; 0x24
 80070b4:	6046      	str	r6, [r0, #4]
 80070b6:	6086      	str	r6, [r0, #8]
 80070b8:	6006      	str	r6, [r0, #0]
 80070ba:	60c6      	str	r6, [r0, #12]
 80070bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	b151      	cbz	r1, 80070d8 <_dtoa_r+0x48>
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	604a      	str	r2, [r1, #4]
 80070c6:	2301      	movs	r3, #1
 80070c8:	4093      	lsls	r3, r2
 80070ca:	608b      	str	r3, [r1, #8]
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 ffbb 	bl	8008048 <_Bfree>
 80070d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	9b01      	ldr	r3, [sp, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bfbf      	itttt	lt
 80070de:	2301      	movlt	r3, #1
 80070e0:	6023      	strlt	r3, [r4, #0]
 80070e2:	9b01      	ldrlt	r3, [sp, #4]
 80070e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	bfb2      	itee	lt
 80070ea:	9301      	strlt	r3, [sp, #4]
 80070ec:	2300      	movge	r3, #0
 80070ee:	6023      	strge	r3, [r4, #0]
 80070f0:	9c01      	ldr	r4, [sp, #4]
 80070f2:	4b73      	ldr	r3, [pc, #460]	; (80072c0 <_dtoa_r+0x230>)
 80070f4:	43a3      	bics	r3, r4
 80070f6:	d118      	bne.n	800712a <_dtoa_r+0x9a>
 80070f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	9b00      	ldr	r3, [sp, #0]
 8007102:	b923      	cbnz	r3, 800710e <_dtoa_r+0x7e>
 8007104:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007108:	2c00      	cmp	r4, #0
 800710a:	f000 8518 	beq.w	8007b3e <_dtoa_r+0xaae>
 800710e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007110:	b93b      	cbnz	r3, 8007122 <_dtoa_r+0x92>
 8007112:	4b6c      	ldr	r3, [pc, #432]	; (80072c4 <_dtoa_r+0x234>)
 8007114:	e01d      	b.n	8007152 <_dtoa_r+0xc2>
 8007116:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <_dtoa_r+0x238>)
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	3308      	adds	r3, #8
 800711c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e2a6      	b.n	8007670 <_dtoa_r+0x5e0>
 8007122:	4b68      	ldr	r3, [pc, #416]	; (80072c4 <_dtoa_r+0x234>)
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	3303      	adds	r3, #3
 8007128:	e7f8      	b.n	800711c <_dtoa_r+0x8c>
 800712a:	ed9d 7b00 	vldr	d7, [sp]
 800712e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007136:	ed8d 7b04 	vstr	d7, [sp, #16]
 800713a:	d10c      	bne.n	8007156 <_dtoa_r+0xc6>
 800713c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800713e:	2301      	movs	r3, #1
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 84f7 	beq.w	8007b38 <_dtoa_r+0xaa8>
 800714a:	4b60      	ldr	r3, [pc, #384]	; (80072cc <_dtoa_r+0x23c>)
 800714c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	3b01      	subs	r3, #1
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	e28c      	b.n	8007670 <_dtoa_r+0x5e0>
 8007156:	a913      	add	r1, sp, #76	; 0x4c
 8007158:	aa12      	add	r2, sp, #72	; 0x48
 800715a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800715e:	4628      	mov	r0, r5
 8007160:	f001 f9bf 	bl	80084e2 <__d2b>
 8007164:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007168:	9003      	str	r0, [sp, #12]
 800716a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800716c:	2900      	cmp	r1, #0
 800716e:	d046      	beq.n	80071fe <_dtoa_r+0x16e>
 8007170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007174:	f3c3 0413 	ubfx	r4, r3, #0, #20
 8007178:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800717c:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 8007180:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007184:	2100      	movs	r1, #0
 8007186:	ee07 aa90 	vmov	s15, sl
 800718a:	ec43 2b16 	vmov	d6, r2, r3
 800718e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007192:	ed9f 4b45 	vldr	d4, [pc, #276]	; 80072a8 <_dtoa_r+0x218>
 8007196:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800719a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800719e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80072b0 <_dtoa_r+0x220>
 80071a2:	eea7 6b04 	vfma.f64	d6, d7, d4
 80071a6:	eeb0 7b46 	vmov.f64	d7, d6
 80071aa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80072b8 <_dtoa_r+0x228>
 80071ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80071b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80071b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	9111      	str	r1, [sp, #68]	; 0x44
 80071c0:	ee16 ba90 	vmov	fp, s13
 80071c4:	d508      	bpl.n	80071d8 <_dtoa_r+0x148>
 80071c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80071ca:	eeb4 7b46 	vcmp.f64	d7, d6
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d2:	bf18      	it	ne
 80071d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80071d8:	f1bb 0f16 	cmp.w	fp, #22
 80071dc:	d831      	bhi.n	8007242 <_dtoa_r+0x1b2>
 80071de:	4b3c      	ldr	r3, [pc, #240]	; (80072d0 <_dtoa_r+0x240>)
 80071e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071e4:	ed93 7b00 	vldr	d7, [r3]
 80071e8:	ed9d 6b00 	vldr	d6, [sp]
 80071ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f4:	dd01      	ble.n	80071fa <_dtoa_r+0x16a>
 80071f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071fa:	2300      	movs	r3, #0
 80071fc:	e022      	b.n	8007244 <_dtoa_r+0x1b4>
 80071fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007200:	4401      	add	r1, r0
 8007202:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007206:	2b20      	cmp	r3, #32
 8007208:	dd15      	ble.n	8007236 <_dtoa_r+0x1a6>
 800720a:	9e00      	ldr	r6, [sp, #0]
 800720c:	f201 4212 	addw	r2, r1, #1042	; 0x412
 8007210:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007214:	fa26 f202 	lsr.w	r2, r6, r2
 8007218:	fa04 f303 	lsl.w	r3, r4, r3
 800721c:	431a      	orrs	r2, r3
 800721e:	ee07 2a90 	vmov	s15, r2
 8007222:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007226:	f101 3aff 	add.w	sl, r1, #4294967295
 800722a:	ec53 2b17 	vmov	r2, r3, d7
 800722e:	2101      	movs	r1, #1
 8007230:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8007234:	e7a7      	b.n	8007186 <_dtoa_r+0xf6>
 8007236:	f1c3 0220 	rsb	r2, r3, #32
 800723a:	9b00      	ldr	r3, [sp, #0]
 800723c:	fa03 f202 	lsl.w	r2, r3, r2
 8007240:	e7ed      	b.n	800721e <_dtoa_r+0x18e>
 8007242:	2301      	movs	r3, #1
 8007244:	eba0 0a0a 	sub.w	sl, r0, sl
 8007248:	f1ba 0701 	subs.w	r7, sl, #1
 800724c:	bf46      	itte	mi
 800724e:	f1ca 0a01 	rsbmi	sl, sl, #1
 8007252:	2700      	movmi	r7, #0
 8007254:	f04f 0a00 	movpl.w	sl, #0
 8007258:	f1bb 0f00 	cmp.w	fp, #0
 800725c:	930d      	str	r3, [sp, #52]	; 0x34
 800725e:	bfbc      	itt	lt
 8007260:	2300      	movlt	r3, #0
 8007262:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007264:	9b07      	ldr	r3, [sp, #28]
 8007266:	bfa3      	ittte	ge
 8007268:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 800726c:	445f      	addge	r7, fp
 800726e:	f04f 0800 	movge.w	r8, #0
 8007272:	ebaa 0a0b 	sublt.w	sl, sl, fp
 8007276:	bfb8      	it	lt
 8007278:	f1cb 0800 	rsblt	r8, fp, #0
 800727c:	2b09      	cmp	r3, #9
 800727e:	f200 80f8 	bhi.w	8007472 <_dtoa_r+0x3e2>
 8007282:	2b05      	cmp	r3, #5
 8007284:	bfc4      	itt	gt
 8007286:	3b04      	subgt	r3, #4
 8007288:	9307      	strgt	r3, [sp, #28]
 800728a:	9b07      	ldr	r3, [sp, #28]
 800728c:	f1a3 0302 	sub.w	r3, r3, #2
 8007290:	bfcc      	ite	gt
 8007292:	2400      	movgt	r4, #0
 8007294:	2401      	movle	r4, #1
 8007296:	2b03      	cmp	r3, #3
 8007298:	f200 80f7 	bhi.w	800748a <_dtoa_r+0x3fa>
 800729c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80072a0:	00e700e5 	.word	0x00e700e5
 80072a4:	00d9001a 	.word	0x00d9001a
 80072a8:	636f4361 	.word	0x636f4361
 80072ac:	3fd287a7 	.word	0x3fd287a7
 80072b0:	8b60c8b3 	.word	0x8b60c8b3
 80072b4:	3fc68a28 	.word	0x3fc68a28
 80072b8:	509f79fb 	.word	0x509f79fb
 80072bc:	3fd34413 	.word	0x3fd34413
 80072c0:	7ff00000 	.word	0x7ff00000
 80072c4:	0800b616 	.word	0x0800b616
 80072c8:	0800b60d 	.word	0x0800b60d
 80072cc:	0800b5ec 	.word	0x0800b5ec
 80072d0:	0800b648 	.word	0x0800b648
 80072d4:	2301      	movs	r3, #1
 80072d6:	930a      	str	r3, [sp, #40]	; 0x28
 80072d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f340 80d8 	ble.w	8007490 <_dtoa_r+0x400>
 80072e0:	9306      	str	r3, [sp, #24]
 80072e2:	4699      	mov	r9, r3
 80072e4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80072e6:	2200      	movs	r2, #0
 80072e8:	6072      	str	r2, [r6, #4]
 80072ea:	2104      	movs	r1, #4
 80072ec:	f101 0214 	add.w	r2, r1, #20
 80072f0:	429a      	cmp	r2, r3
 80072f2:	f240 80d2 	bls.w	800749a <_dtoa_r+0x40a>
 80072f6:	6871      	ldr	r1, [r6, #4]
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 fe71 	bl	8007fe0 <_Balloc>
 80072fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007300:	6030      	str	r0, [r6, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	f1b9 0f0e 	cmp.w	r9, #14
 800730a:	d875      	bhi.n	80073f8 <_dtoa_r+0x368>
 800730c:	2c00      	cmp	r4, #0
 800730e:	d073      	beq.n	80073f8 <_dtoa_r+0x368>
 8007310:	ed9d 7b00 	vldr	d7, [sp]
 8007314:	f1bb 0f00 	cmp.w	fp, #0
 8007318:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800731c:	f340 80ce 	ble.w	80074bc <_dtoa_r+0x42c>
 8007320:	4ab5      	ldr	r2, [pc, #724]	; (80075f8 <_dtoa_r+0x568>)
 8007322:	f00b 030f 	and.w	r3, fp, #15
 8007326:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800732a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800732e:	ed93 7b00 	vldr	d7, [r3]
 8007332:	06d3      	lsls	r3, r2, #27
 8007334:	f140 80b6 	bpl.w	80074a4 <_dtoa_r+0x414>
 8007338:	4bb0      	ldr	r3, [pc, #704]	; (80075fc <_dtoa_r+0x56c>)
 800733a:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 800733e:	ed93 6b08 	vldr	d6, [r3, #32]
 8007342:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8007346:	ed8d 5b00 	vstr	d5, [sp]
 800734a:	f002 020f 	and.w	r2, r2, #15
 800734e:	2303      	movs	r3, #3
 8007350:	49aa      	ldr	r1, [pc, #680]	; (80075fc <_dtoa_r+0x56c>)
 8007352:	2a00      	cmp	r2, #0
 8007354:	f040 80a8 	bne.w	80074a8 <_dtoa_r+0x418>
 8007358:	ed9d 5b00 	vldr	d5, [sp]
 800735c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8007360:	ed8d 6b00 	vstr	d6, [sp]
 8007364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007366:	2a00      	cmp	r2, #0
 8007368:	f000 80da 	beq.w	8007520 <_dtoa_r+0x490>
 800736c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007370:	ed9d 7b00 	vldr	d7, [sp]
 8007374:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	f140 80d0 	bpl.w	8007520 <_dtoa_r+0x490>
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	f000 80cc 	beq.w	8007520 <_dtoa_r+0x490>
 8007388:	9a06      	ldr	r2, [sp, #24]
 800738a:	2a00      	cmp	r2, #0
 800738c:	dd30      	ble.n	80073f0 <_dtoa_r+0x360>
 800738e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007396:	ed8d 7b00 	vstr	d7, [sp]
 800739a:	9c06      	ldr	r4, [sp, #24]
 800739c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80073a0:	3301      	adds	r3, #1
 80073a2:	ed9d 6b00 	vldr	d6, [sp]
 80073a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80073b6:	ed8d 5b00 	vstr	d5, [sp]
 80073ba:	9b01      	ldr	r3, [sp, #4]
 80073bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2c00      	cmp	r4, #0
 80073c4:	f040 80af 	bne.w	8007526 <_dtoa_r+0x496>
 80073c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80073cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80073d0:	ed9d 7b00 	vldr	d7, [sp]
 80073d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073dc:	f300 8300 	bgt.w	80079e0 <_dtoa_r+0x950>
 80073e0:	eeb1 7b47 	vneg.f64	d7, d7
 80073e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	f100 82f6 	bmi.w	80079dc <_dtoa_r+0x94c>
 80073f0:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80073f4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80073f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f2c0 8158 	blt.w	80076b0 <_dtoa_r+0x620>
 8007400:	f1bb 0f0e 	cmp.w	fp, #14
 8007404:	f300 8154 	bgt.w	80076b0 <_dtoa_r+0x620>
 8007408:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <_dtoa_r+0x568>)
 800740a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800740e:	ed93 6b00 	vldr	d6, [r3]
 8007412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007414:	2b00      	cmp	r3, #0
 8007416:	f280 80f3 	bge.w	8007600 <_dtoa_r+0x570>
 800741a:	f1b9 0f00 	cmp.w	r9, #0
 800741e:	f300 80ef 	bgt.w	8007600 <_dtoa_r+0x570>
 8007422:	f040 82da 	bne.w	80079da <_dtoa_r+0x94a>
 8007426:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800742a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800742e:	ed9d 7b00 	vldr	d7, [sp]
 8007432:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743a:	464c      	mov	r4, r9
 800743c:	464e      	mov	r6, r9
 800743e:	f280 82ac 	bge.w	800799a <_dtoa_r+0x90a>
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	9904      	ldr	r1, [sp, #16]
 8007446:	2231      	movs	r2, #49	; 0x31
 8007448:	3301      	adds	r3, #1
 800744a:	700a      	strb	r2, [r1, #0]
 800744c:	f10b 0b01 	add.w	fp, fp, #1
 8007450:	e2a7      	b.n	80079a2 <_dtoa_r+0x912>
 8007452:	2301      	movs	r3, #1
 8007454:	930a      	str	r3, [sp, #40]	; 0x28
 8007456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007458:	445b      	add	r3, fp
 800745a:	f103 0901 	add.w	r9, r3, #1
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	464b      	mov	r3, r9
 8007462:	2b01      	cmp	r3, #1
 8007464:	bfb8      	it	lt
 8007466:	2301      	movlt	r3, #1
 8007468:	e73c      	b.n	80072e4 <_dtoa_r+0x254>
 800746a:	2300      	movs	r3, #0
 800746c:	e733      	b.n	80072d6 <_dtoa_r+0x246>
 800746e:	2300      	movs	r3, #0
 8007470:	e7f0      	b.n	8007454 <_dtoa_r+0x3c4>
 8007472:	2401      	movs	r4, #1
 8007474:	2300      	movs	r3, #0
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	940a      	str	r4, [sp, #40]	; 0x28
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	9306      	str	r3, [sp, #24]
 8007480:	4699      	mov	r9, r3
 8007482:	2200      	movs	r2, #0
 8007484:	2312      	movs	r3, #18
 8007486:	920b      	str	r2, [sp, #44]	; 0x2c
 8007488:	e72c      	b.n	80072e4 <_dtoa_r+0x254>
 800748a:	2301      	movs	r3, #1
 800748c:	930a      	str	r3, [sp, #40]	; 0x28
 800748e:	e7f4      	b.n	800747a <_dtoa_r+0x3ea>
 8007490:	2301      	movs	r3, #1
 8007492:	9306      	str	r3, [sp, #24]
 8007494:	4699      	mov	r9, r3
 8007496:	461a      	mov	r2, r3
 8007498:	e7f5      	b.n	8007486 <_dtoa_r+0x3f6>
 800749a:	6872      	ldr	r2, [r6, #4]
 800749c:	3201      	adds	r2, #1
 800749e:	6072      	str	r2, [r6, #4]
 80074a0:	0049      	lsls	r1, r1, #1
 80074a2:	e723      	b.n	80072ec <_dtoa_r+0x25c>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e753      	b.n	8007350 <_dtoa_r+0x2c0>
 80074a8:	07d6      	lsls	r6, r2, #31
 80074aa:	d504      	bpl.n	80074b6 <_dtoa_r+0x426>
 80074ac:	ed91 6b00 	vldr	d6, [r1]
 80074b0:	3301      	adds	r3, #1
 80074b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074b6:	1052      	asrs	r2, r2, #1
 80074b8:	3108      	adds	r1, #8
 80074ba:	e74a      	b.n	8007352 <_dtoa_r+0x2c2>
 80074bc:	d02e      	beq.n	800751c <_dtoa_r+0x48c>
 80074be:	f1cb 0200 	rsb	r2, fp, #0
 80074c2:	4b4d      	ldr	r3, [pc, #308]	; (80075f8 <_dtoa_r+0x568>)
 80074c4:	f002 010f 	and.w	r1, r2, #15
 80074c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80074cc:	ed93 7b00 	vldr	d7, [r3]
 80074d0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80074d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80074d8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074dc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80074e0:	4946      	ldr	r1, [pc, #280]	; (80075fc <_dtoa_r+0x56c>)
 80074e2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80074e6:	1112      	asrs	r2, r2, #4
 80074e8:	2000      	movs	r0, #0
 80074ea:	2302      	movs	r3, #2
 80074ec:	b93a      	cbnz	r2, 80074fe <_dtoa_r+0x46e>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f43f af38 	beq.w	8007364 <_dtoa_r+0x2d4>
 80074f4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80074f8:	e88d 0006 	stmia.w	sp, {r1, r2}
 80074fc:	e732      	b.n	8007364 <_dtoa_r+0x2d4>
 80074fe:	07d4      	lsls	r4, r2, #31
 8007500:	d509      	bpl.n	8007516 <_dtoa_r+0x486>
 8007502:	ed9d 6b08 	vldr	d6, [sp, #32]
 8007506:	ed91 7b00 	vldr	d7, [r1]
 800750a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800750e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007512:	3301      	adds	r3, #1
 8007514:	2001      	movs	r0, #1
 8007516:	1052      	asrs	r2, r2, #1
 8007518:	3108      	adds	r1, #8
 800751a:	e7e7      	b.n	80074ec <_dtoa_r+0x45c>
 800751c:	2302      	movs	r3, #2
 800751e:	e721      	b.n	8007364 <_dtoa_r+0x2d4>
 8007520:	465a      	mov	r2, fp
 8007522:	464c      	mov	r4, r9
 8007524:	e73d      	b.n	80073a2 <_dtoa_r+0x312>
 8007526:	9804      	ldr	r0, [sp, #16]
 8007528:	4b33      	ldr	r3, [pc, #204]	; (80075f8 <_dtoa_r+0x568>)
 800752a:	1e61      	subs	r1, r4, #1
 800752c:	4404      	add	r4, r0
 800752e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007530:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007534:	ed93 5b00 	vldr	d5, [r3]
 8007538:	b358      	cbz	r0, 8007592 <_dtoa_r+0x502>
 800753a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800753e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8007542:	ed9d 5b00 	vldr	d5, [sp]
 8007546:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800754a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007554:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007558:	ee14 1a90 	vmov	r1, s9
 800755c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007560:	3130      	adds	r1, #48	; 0x30
 8007562:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756e:	f803 1b01 	strb.w	r1, [r3], #1
 8007572:	d439      	bmi.n	80075e8 <_dtoa_r+0x558>
 8007574:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007578:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	d47b      	bmi.n	800767a <_dtoa_r+0x5ea>
 8007582:	42a3      	cmp	r3, r4
 8007584:	f43f af34 	beq.w	80073f0 <_dtoa_r+0x360>
 8007588:	ee27 7b03 	vmul.f64	d7, d7, d3
 800758c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007590:	e7e0      	b.n	8007554 <_dtoa_r+0x4c4>
 8007592:	ed9d 7b00 	vldr	d7, [sp]
 8007596:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800759a:	9b04      	ldr	r3, [sp, #16]
 800759c:	ee25 5b07 	vmul.f64	d5, d5, d7
 80075a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80075a4:	ee14 1a90 	vmov	r1, s9
 80075a8:	3130      	adds	r1, #48	; 0x30
 80075aa:	f803 1b01 	strb.w	r1, [r3], #1
 80075ae:	429c      	cmp	r4, r3
 80075b0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 80075b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80075b8:	d11a      	bne.n	80075f0 <_dtoa_r+0x560>
 80075ba:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80075be:	ee35 4b07 	vadd.f64	d4, d5, d7
 80075c2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80075c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ca:	dc56      	bgt.n	800767a <_dtoa_r+0x5ea>
 80075cc:	ee37 5b45 	vsub.f64	d5, d7, d5
 80075d0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80075d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d8:	f57f af0a 	bpl.w	80073f0 <_dtoa_r+0x360>
 80075dc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80075e0:	2930      	cmp	r1, #48	; 0x30
 80075e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80075e6:	d001      	beq.n	80075ec <_dtoa_r+0x55c>
 80075e8:	4693      	mov	fp, r2
 80075ea:	e031      	b.n	8007650 <_dtoa_r+0x5c0>
 80075ec:	4603      	mov	r3, r0
 80075ee:	e7f5      	b.n	80075dc <_dtoa_r+0x54c>
 80075f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80075f4:	e7d4      	b.n	80075a0 <_dtoa_r+0x510>
 80075f6:	bf00      	nop
 80075f8:	0800b648 	.word	0x0800b648
 80075fc:	0800b620 	.word	0x0800b620
 8007600:	ed9d 7b00 	vldr	d7, [sp]
 8007604:	eeb1 3b46 	vneg.f64	d3, d6
 8007608:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800760c:	9b04      	ldr	r3, [sp, #16]
 800760e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007612:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007616:	ee15 2a10 	vmov	r2, s10
 800761a:	3230      	adds	r2, #48	; 0x30
 800761c:	f803 2b01 	strb.w	r2, [r3], #1
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	1a9a      	subs	r2, r3, r2
 8007624:	4591      	cmp	r9, r2
 8007626:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 800762a:	eea3 7b02 	vfma.f64	d7, d3, d2
 800762e:	d137      	bne.n	80076a0 <_dtoa_r+0x610>
 8007630:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007634:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763c:	d41c      	bmi.n	8007678 <_dtoa_r+0x5e8>
 800763e:	eeb4 6b47 	vcmp.f64	d6, d7
 8007642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007646:	d103      	bne.n	8007650 <_dtoa_r+0x5c0>
 8007648:	ee15 2a10 	vmov	r2, s10
 800764c:	07d2      	lsls	r2, r2, #31
 800764e:	d413      	bmi.n	8007678 <_dtoa_r+0x5e8>
 8007650:	9903      	ldr	r1, [sp, #12]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	4628      	mov	r0, r5
 8007656:	f000 fcf7 	bl	8008048 <_Bfree>
 800765a:	9b00      	ldr	r3, [sp, #0]
 800765c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	f10b 0201 	add.w	r2, fp, #1
 8007666:	600a      	str	r2, [r1, #0]
 8007668:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800766a:	2a00      	cmp	r2, #0
 800766c:	f47f ad57 	bne.w	800711e <_dtoa_r+0x8e>
 8007670:	9804      	ldr	r0, [sp, #16]
 8007672:	b015      	add	sp, #84	; 0x54
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	465a      	mov	r2, fp
 800767a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800767e:	2839      	cmp	r0, #57	; 0x39
 8007680:	f103 31ff 	add.w	r1, r3, #4294967295
 8007684:	d106      	bne.n	8007694 <_dtoa_r+0x604>
 8007686:	9804      	ldr	r0, [sp, #16]
 8007688:	4288      	cmp	r0, r1
 800768a:	d107      	bne.n	800769c <_dtoa_r+0x60c>
 800768c:	2130      	movs	r1, #48	; 0x30
 800768e:	7001      	strb	r1, [r0, #0]
 8007690:	3201      	adds	r2, #1
 8007692:	4601      	mov	r1, r0
 8007694:	7808      	ldrb	r0, [r1, #0]
 8007696:	3001      	adds	r0, #1
 8007698:	7008      	strb	r0, [r1, #0]
 800769a:	e7a5      	b.n	80075e8 <_dtoa_r+0x558>
 800769c:	460b      	mov	r3, r1
 800769e:	e7ec      	b.n	800767a <_dtoa_r+0x5ea>
 80076a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	d1af      	bne.n	800760e <_dtoa_r+0x57e>
 80076ae:	e7cf      	b.n	8007650 <_dtoa_r+0x5c0>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	f000 8129 	beq.w	800790a <_dtoa_r+0x87a>
 80076b8:	9a07      	ldr	r2, [sp, #28]
 80076ba:	2a01      	cmp	r2, #1
 80076bc:	f300 810b 	bgt.w	80078d6 <_dtoa_r+0x846>
 80076c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	f000 8103 	beq.w	80078ce <_dtoa_r+0x83e>
 80076c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076cc:	4644      	mov	r4, r8
 80076ce:	f8cd a020 	str.w	sl, [sp, #32]
 80076d2:	2101      	movs	r1, #1
 80076d4:	4628      	mov	r0, r5
 80076d6:	449a      	add	sl, r3
 80076d8:	441f      	add	r7, r3
 80076da:	f000 fd55 	bl	8008188 <__i2b>
 80076de:	4606      	mov	r6, r0
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dd0a      	ble.n	80076fc <_dtoa_r+0x66c>
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	dd08      	ble.n	80076fc <_dtoa_r+0x66c>
 80076ea:	42bb      	cmp	r3, r7
 80076ec:	9a08      	ldr	r2, [sp, #32]
 80076ee:	bfa8      	it	ge
 80076f0:	463b      	movge	r3, r7
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	ebaa 0a03 	sub.w	sl, sl, r3
 80076f8:	9208      	str	r2, [sp, #32]
 80076fa:	1aff      	subs	r7, r7, r3
 80076fc:	f1b8 0f00 	cmp.w	r8, #0
 8007700:	d01f      	beq.n	8007742 <_dtoa_r+0x6b2>
 8007702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8105 	beq.w	8007914 <_dtoa_r+0x884>
 800770a:	2c00      	cmp	r4, #0
 800770c:	dd11      	ble.n	8007732 <_dtoa_r+0x6a2>
 800770e:	4631      	mov	r1, r6
 8007710:	4622      	mov	r2, r4
 8007712:	4628      	mov	r0, r5
 8007714:	f000 fdce 	bl	80082b4 <__pow5mult>
 8007718:	9a03      	ldr	r2, [sp, #12]
 800771a:	4601      	mov	r1, r0
 800771c:	4606      	mov	r6, r0
 800771e:	4628      	mov	r0, r5
 8007720:	f000 fd3b 	bl	800819a <__multiply>
 8007724:	9903      	ldr	r1, [sp, #12]
 8007726:	900e      	str	r0, [sp, #56]	; 0x38
 8007728:	4628      	mov	r0, r5
 800772a:	f000 fc8d 	bl	8008048 <_Bfree>
 800772e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007730:	9303      	str	r3, [sp, #12]
 8007732:	ebb8 0204 	subs.w	r2, r8, r4
 8007736:	d004      	beq.n	8007742 <_dtoa_r+0x6b2>
 8007738:	9903      	ldr	r1, [sp, #12]
 800773a:	4628      	mov	r0, r5
 800773c:	f000 fdba 	bl	80082b4 <__pow5mult>
 8007740:	9003      	str	r0, [sp, #12]
 8007742:	2101      	movs	r1, #1
 8007744:	4628      	mov	r0, r5
 8007746:	f000 fd1f 	bl	8008188 <__i2b>
 800774a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774c:	2b00      	cmp	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	f340 80e2 	ble.w	8007918 <_dtoa_r+0x888>
 8007754:	461a      	mov	r2, r3
 8007756:	4601      	mov	r1, r0
 8007758:	4628      	mov	r0, r5
 800775a:	f000 fdab 	bl	80082b4 <__pow5mult>
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	2b01      	cmp	r3, #1
 8007762:	4604      	mov	r4, r0
 8007764:	f340 80db 	ble.w	800791e <_dtoa_r+0x88e>
 8007768:	f04f 0800 	mov.w	r8, #0
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007772:	6918      	ldr	r0, [r3, #16]
 8007774:	f000 fcba 	bl	80080ec <__hi0bits>
 8007778:	f1c0 0020 	rsb	r0, r0, #32
 800777c:	4438      	add	r0, r7
 800777e:	f010 001f 	ands.w	r0, r0, #31
 8007782:	f000 80f1 	beq.w	8007968 <_dtoa_r+0x8d8>
 8007786:	f1c0 0320 	rsb	r3, r0, #32
 800778a:	2b04      	cmp	r3, #4
 800778c:	f340 80e3 	ble.w	8007956 <_dtoa_r+0x8c6>
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	f1c0 001c 	rsb	r0, r0, #28
 8007796:	4403      	add	r3, r0
 8007798:	4482      	add	sl, r0
 800779a:	9308      	str	r3, [sp, #32]
 800779c:	4407      	add	r7, r0
 800779e:	f1ba 0f00 	cmp.w	sl, #0
 80077a2:	dd05      	ble.n	80077b0 <_dtoa_r+0x720>
 80077a4:	4652      	mov	r2, sl
 80077a6:	9903      	ldr	r1, [sp, #12]
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 fdd1 	bl	8008350 <__lshift>
 80077ae:	9003      	str	r0, [sp, #12]
 80077b0:	2f00      	cmp	r7, #0
 80077b2:	dd05      	ble.n	80077c0 <_dtoa_r+0x730>
 80077b4:	4621      	mov	r1, r4
 80077b6:	463a      	mov	r2, r7
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 fdc9 	bl	8008350 <__lshift>
 80077be:	4604      	mov	r4, r0
 80077c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80d2 	beq.w	800796c <_dtoa_r+0x8dc>
 80077c8:	4621      	mov	r1, r4
 80077ca:	9803      	ldr	r0, [sp, #12]
 80077cc:	f000 fe11 	bl	80083f2 <__mcmp>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f280 80cb 	bge.w	800796c <_dtoa_r+0x8dc>
 80077d6:	2300      	movs	r3, #0
 80077d8:	220a      	movs	r2, #10
 80077da:	9903      	ldr	r1, [sp, #12]
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 fc4a 	bl	8008076 <__multadd>
 80077e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e4:	9003      	str	r0, [sp, #12]
 80077e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 81ae 	beq.w	8007b4c <_dtoa_r+0xabc>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4631      	mov	r1, r6
 80077f4:	220a      	movs	r2, #10
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 fc3d 	bl	8008076 <__multadd>
 80077fc:	9b06      	ldr	r3, [sp, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	4606      	mov	r6, r0
 8007802:	dc03      	bgt.n	800780c <_dtoa_r+0x77c>
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	2b02      	cmp	r3, #2
 8007808:	f300 80b8 	bgt.w	800797c <_dtoa_r+0x8ec>
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd05      	ble.n	800781e <_dtoa_r+0x78e>
 8007812:	4631      	mov	r1, r6
 8007814:	461a      	mov	r2, r3
 8007816:	4628      	mov	r0, r5
 8007818:	f000 fd9a 	bl	8008350 <__lshift>
 800781c:	4606      	mov	r6, r0
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	f000 8115 	beq.w	8007a50 <_dtoa_r+0x9c0>
 8007826:	6871      	ldr	r1, [r6, #4]
 8007828:	4628      	mov	r0, r5
 800782a:	f000 fbd9 	bl	8007fe0 <_Balloc>
 800782e:	6932      	ldr	r2, [r6, #16]
 8007830:	3202      	adds	r2, #2
 8007832:	4607      	mov	r7, r0
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	f106 010c 	add.w	r1, r6, #12
 800783a:	300c      	adds	r0, #12
 800783c:	f000 fbb8 	bl	8007fb0 <memcpy>
 8007840:	2201      	movs	r2, #1
 8007842:	4639      	mov	r1, r7
 8007844:	4628      	mov	r0, r5
 8007846:	f000 fd83 	bl	8008350 <__lshift>
 800784a:	9b00      	ldr	r3, [sp, #0]
 800784c:	9f04      	ldr	r7, [sp, #16]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	46b1      	mov	r9, r6
 8007854:	9308      	str	r3, [sp, #32]
 8007856:	4606      	mov	r6, r0
 8007858:	4621      	mov	r1, r4
 800785a:	9803      	ldr	r0, [sp, #12]
 800785c:	f7ff fb8c 	bl	8006f78 <quorem>
 8007860:	4649      	mov	r1, r9
 8007862:	4682      	mov	sl, r0
 8007864:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007868:	9803      	ldr	r0, [sp, #12]
 800786a:	f000 fdc2 	bl	80083f2 <__mcmp>
 800786e:	4632      	mov	r2, r6
 8007870:	9000      	str	r0, [sp, #0]
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f000 fdd6 	bl	8008426 <__mdiff>
 800787a:	68c3      	ldr	r3, [r0, #12]
 800787c:	4602      	mov	r2, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	f040 80e8 	bne.w	8007a54 <_dtoa_r+0x9c4>
 8007884:	4601      	mov	r1, r0
 8007886:	900a      	str	r0, [sp, #40]	; 0x28
 8007888:	9803      	ldr	r0, [sp, #12]
 800788a:	f000 fdb2 	bl	80083f2 <__mcmp>
 800788e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007890:	4603      	mov	r3, r0
 8007892:	4611      	mov	r1, r2
 8007894:	4628      	mov	r0, r5
 8007896:	930a      	str	r3, [sp, #40]	; 0x28
 8007898:	f000 fbd6 	bl	8008048 <_Bfree>
 800789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 80da 	bne.w	8007a58 <_dtoa_r+0x9c8>
 80078a4:	9a07      	ldr	r2, [sp, #28]
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	f040 80d6 	bne.w	8007a58 <_dtoa_r+0x9c8>
 80078ac:	9a08      	ldr	r2, [sp, #32]
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	f040 80d2 	bne.w	8007a58 <_dtoa_r+0x9c8>
 80078b4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078b8:	f000 80ee 	beq.w	8007a98 <_dtoa_r+0xa08>
 80078bc:	9b00      	ldr	r3, [sp, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd01      	ble.n	80078c6 <_dtoa_r+0x836>
 80078c2:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 80078c6:	1c7b      	adds	r3, r7, #1
 80078c8:	f887 8000 	strb.w	r8, [r7]
 80078cc:	e06b      	b.n	80079a6 <_dtoa_r+0x916>
 80078ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078d4:	e6fa      	b.n	80076cc <_dtoa_r+0x63c>
 80078d6:	f109 34ff 	add.w	r4, r9, #4294967295
 80078da:	45a0      	cmp	r8, r4
 80078dc:	bfbf      	itttt	lt
 80078de:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80078e0:	eba4 0808 	sublt.w	r8, r4, r8
 80078e4:	4443      	addlt	r3, r8
 80078e6:	930c      	strlt	r3, [sp, #48]	; 0x30
 80078e8:	bfb6      	itet	lt
 80078ea:	46a0      	movlt	r8, r4
 80078ec:	eba8 0404 	subge.w	r4, r8, r4
 80078f0:	2400      	movlt	r4, #0
 80078f2:	f1b9 0f00 	cmp.w	r9, #0
 80078f6:	bfbb      	ittet	lt
 80078f8:	ebaa 0309 	sublt.w	r3, sl, r9
 80078fc:	9308      	strlt	r3, [sp, #32]
 80078fe:	f8cd a020 	strge.w	sl, [sp, #32]
 8007902:	2300      	movlt	r3, #0
 8007904:	bfa8      	it	ge
 8007906:	464b      	movge	r3, r9
 8007908:	e6e3      	b.n	80076d2 <_dtoa_r+0x642>
 800790a:	4644      	mov	r4, r8
 800790c:	f8cd a020 	str.w	sl, [sp, #32]
 8007910:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007912:	e6e5      	b.n	80076e0 <_dtoa_r+0x650>
 8007914:	4642      	mov	r2, r8
 8007916:	e70f      	b.n	8007738 <_dtoa_r+0x6a8>
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	2b01      	cmp	r3, #1
 800791c:	dc16      	bgt.n	800794c <_dtoa_r+0x8bc>
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	b9a3      	cbnz	r3, 800794c <_dtoa_r+0x8bc>
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007928:	b983      	cbnz	r3, 800794c <_dtoa_r+0x8bc>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007930:	0d1b      	lsrs	r3, r3, #20
 8007932:	051b      	lsls	r3, r3, #20
 8007934:	b16b      	cbz	r3, 8007952 <_dtoa_r+0x8c2>
 8007936:	f10a 0a01 	add.w	sl, sl, #1
 800793a:	3701      	adds	r7, #1
 800793c:	f04f 0801 	mov.w	r8, #1
 8007940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	f47f af12 	bne.w	800776c <_dtoa_r+0x6dc>
 8007948:	2001      	movs	r0, #1
 800794a:	e717      	b.n	800777c <_dtoa_r+0x6ec>
 800794c:	f04f 0800 	mov.w	r8, #0
 8007950:	e7f6      	b.n	8007940 <_dtoa_r+0x8b0>
 8007952:	4698      	mov	r8, r3
 8007954:	e7f4      	b.n	8007940 <_dtoa_r+0x8b0>
 8007956:	f43f af22 	beq.w	800779e <_dtoa_r+0x70e>
 800795a:	9a08      	ldr	r2, [sp, #32]
 800795c:	331c      	adds	r3, #28
 800795e:	441a      	add	r2, r3
 8007960:	449a      	add	sl, r3
 8007962:	9208      	str	r2, [sp, #32]
 8007964:	441f      	add	r7, r3
 8007966:	e71a      	b.n	800779e <_dtoa_r+0x70e>
 8007968:	4603      	mov	r3, r0
 800796a:	e7f6      	b.n	800795a <_dtoa_r+0x8ca>
 800796c:	f1b9 0f00 	cmp.w	r9, #0
 8007970:	dc39      	bgt.n	80079e6 <_dtoa_r+0x956>
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	2b02      	cmp	r3, #2
 8007976:	dd36      	ble.n	80079e6 <_dtoa_r+0x956>
 8007978:	f8cd 9018 	str.w	r9, [sp, #24]
 800797c:	9b06      	ldr	r3, [sp, #24]
 800797e:	b963      	cbnz	r3, 800799a <_dtoa_r+0x90a>
 8007980:	4621      	mov	r1, r4
 8007982:	2205      	movs	r2, #5
 8007984:	4628      	mov	r0, r5
 8007986:	f000 fb76 	bl	8008076 <__multadd>
 800798a:	4601      	mov	r1, r0
 800798c:	4604      	mov	r4, r0
 800798e:	9803      	ldr	r0, [sp, #12]
 8007990:	f000 fd2f 	bl	80083f2 <__mcmp>
 8007994:	2800      	cmp	r0, #0
 8007996:	f73f ad54 	bgt.w	8007442 <_dtoa_r+0x3b2>
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	ea6f 0b03 	mvn.w	fp, r3
 80079a0:	9b04      	ldr	r3, [sp, #16]
 80079a2:	f04f 0900 	mov.w	r9, #0
 80079a6:	4621      	mov	r1, r4
 80079a8:	4628      	mov	r0, r5
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	f000 fb4c 	bl	8008048 <_Bfree>
 80079b0:	9b00      	ldr	r3, [sp, #0]
 80079b2:	2e00      	cmp	r6, #0
 80079b4:	f43f ae4c 	beq.w	8007650 <_dtoa_r+0x5c0>
 80079b8:	f1b9 0f00 	cmp.w	r9, #0
 80079bc:	d006      	beq.n	80079cc <_dtoa_r+0x93c>
 80079be:	45b1      	cmp	r9, r6
 80079c0:	d004      	beq.n	80079cc <_dtoa_r+0x93c>
 80079c2:	4649      	mov	r1, r9
 80079c4:	4628      	mov	r0, r5
 80079c6:	f000 fb3f 	bl	8008048 <_Bfree>
 80079ca:	9b00      	ldr	r3, [sp, #0]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fb39 	bl	8008048 <_Bfree>
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	e63a      	b.n	8007650 <_dtoa_r+0x5c0>
 80079da:	2400      	movs	r4, #0
 80079dc:	4626      	mov	r6, r4
 80079de:	e7dc      	b.n	800799a <_dtoa_r+0x90a>
 80079e0:	4693      	mov	fp, r2
 80079e2:	4626      	mov	r6, r4
 80079e4:	e52d      	b.n	8007442 <_dtoa_r+0x3b2>
 80079e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e8:	f8cd 9018 	str.w	r9, [sp, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f47f af0d 	bne.w	800780c <_dtoa_r+0x77c>
 80079f2:	9f04      	ldr	r7, [sp, #16]
 80079f4:	9803      	ldr	r0, [sp, #12]
 80079f6:	4621      	mov	r1, r4
 80079f8:	f7ff fabe 	bl	8006f78 <quorem>
 80079fc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a00:	f807 8b01 	strb.w	r8, [r7], #1
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	9a06      	ldr	r2, [sp, #24]
 8007a08:	1afb      	subs	r3, r7, r3
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	f300 8081 	bgt.w	8007b12 <_dtoa_r+0xa82>
 8007a10:	9b04      	ldr	r3, [sp, #16]
 8007a12:	2a01      	cmp	r2, #1
 8007a14:	bfac      	ite	ge
 8007a16:	189b      	addge	r3, r3, r2
 8007a18:	3301      	addlt	r3, #1
 8007a1a:	461f      	mov	r7, r3
 8007a1c:	f04f 0900 	mov.w	r9, #0
 8007a20:	2201      	movs	r2, #1
 8007a22:	9903      	ldr	r1, [sp, #12]
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 fc93 	bl	8008350 <__lshift>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	9003      	str	r0, [sp, #12]
 8007a2e:	f000 fce0 	bl	80083f2 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	dc33      	bgt.n	8007a9e <_dtoa_r+0xa0e>
 8007a36:	d102      	bne.n	8007a3e <_dtoa_r+0x9ae>
 8007a38:	f018 0f01 	tst.w	r8, #1
 8007a3c:	d12f      	bne.n	8007a9e <_dtoa_r+0xa0e>
 8007a3e:	463b      	mov	r3, r7
 8007a40:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8007a44:	2a30      	cmp	r2, #48	; 0x30
 8007a46:	f103 31ff 	add.w	r1, r3, #4294967295
 8007a4a:	d1ac      	bne.n	80079a6 <_dtoa_r+0x916>
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	e7f7      	b.n	8007a40 <_dtoa_r+0x9b0>
 8007a50:	4630      	mov	r0, r6
 8007a52:	e6fa      	b.n	800784a <_dtoa_r+0x7ba>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e71c      	b.n	8007892 <_dtoa_r+0x802>
 8007a58:	9a00      	ldr	r2, [sp, #0]
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	db04      	blt.n	8007a68 <_dtoa_r+0x9d8>
 8007a5e:	d127      	bne.n	8007ab0 <_dtoa_r+0xa20>
 8007a60:	9a07      	ldr	r2, [sp, #28]
 8007a62:	bb2a      	cbnz	r2, 8007ab0 <_dtoa_r+0xa20>
 8007a64:	9a08      	ldr	r2, [sp, #32]
 8007a66:	bb1a      	cbnz	r2, 8007ab0 <_dtoa_r+0xa20>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f77f af2c 	ble.w	80078c6 <_dtoa_r+0x836>
 8007a6e:	2201      	movs	r2, #1
 8007a70:	9903      	ldr	r1, [sp, #12]
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 fc6c 	bl	8008350 <__lshift>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	9003      	str	r0, [sp, #12]
 8007a7c:	f000 fcb9 	bl	80083f2 <__mcmp>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	dc05      	bgt.n	8007a90 <_dtoa_r+0xa00>
 8007a84:	f47f af1f 	bne.w	80078c6 <_dtoa_r+0x836>
 8007a88:	f018 0f01 	tst.w	r8, #1
 8007a8c:	f43f af1b 	beq.w	80078c6 <_dtoa_r+0x836>
 8007a90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a94:	f47f af15 	bne.w	80078c2 <_dtoa_r+0x832>
 8007a98:	2339      	movs	r3, #57	; 0x39
 8007a9a:	703b      	strb	r3, [r7, #0]
 8007a9c:	3701      	adds	r7, #1
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8007aa4:	2a39      	cmp	r2, #57	; 0x39
 8007aa6:	f103 31ff 	add.w	r1, r3, #4294967295
 8007aaa:	d03a      	beq.n	8007b22 <_dtoa_r+0xa92>
 8007aac:	3201      	adds	r2, #1
 8007aae:	e03f      	b.n	8007b30 <_dtoa_r+0xaa0>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f107 0301 	add.w	r3, r7, #1
 8007ab6:	dd05      	ble.n	8007ac4 <_dtoa_r+0xa34>
 8007ab8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007abc:	d0ec      	beq.n	8007a98 <_dtoa_r+0xa08>
 8007abe:	f108 0801 	add.w	r8, r8, #1
 8007ac2:	e701      	b.n	80078c8 <_dtoa_r+0x838>
 8007ac4:	461f      	mov	r7, r3
 8007ac6:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007aca:	9b04      	ldr	r3, [sp, #16]
 8007acc:	9a06      	ldr	r2, [sp, #24]
 8007ace:	1afb      	subs	r3, r7, r3
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d0a5      	beq.n	8007a20 <_dtoa_r+0x990>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	9903      	ldr	r1, [sp, #12]
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 facb 	bl	8008076 <__multadd>
 8007ae0:	45b1      	cmp	r9, r6
 8007ae2:	9003      	str	r0, [sp, #12]
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	f04f 020a 	mov.w	r2, #10
 8007aec:	4649      	mov	r1, r9
 8007aee:	4628      	mov	r0, r5
 8007af0:	d104      	bne.n	8007afc <_dtoa_r+0xa6c>
 8007af2:	f000 fac0 	bl	8008076 <__multadd>
 8007af6:	4681      	mov	r9, r0
 8007af8:	4606      	mov	r6, r0
 8007afa:	e6ad      	b.n	8007858 <_dtoa_r+0x7c8>
 8007afc:	f000 fabb 	bl	8008076 <__multadd>
 8007b00:	4631      	mov	r1, r6
 8007b02:	4681      	mov	r9, r0
 8007b04:	2300      	movs	r3, #0
 8007b06:	220a      	movs	r2, #10
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fab4 	bl	8008076 <__multadd>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	e6a2      	b.n	8007858 <_dtoa_r+0x7c8>
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	9903      	ldr	r1, [sp, #12]
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 faac 	bl	8008076 <__multadd>
 8007b1e:	9003      	str	r0, [sp, #12]
 8007b20:	e768      	b.n	80079f4 <_dtoa_r+0x964>
 8007b22:	9a04      	ldr	r2, [sp, #16]
 8007b24:	428a      	cmp	r2, r1
 8007b26:	d105      	bne.n	8007b34 <_dtoa_r+0xaa4>
 8007b28:	9904      	ldr	r1, [sp, #16]
 8007b2a:	f10b 0b01 	add.w	fp, fp, #1
 8007b2e:	2231      	movs	r2, #49	; 0x31
 8007b30:	700a      	strb	r2, [r1, #0]
 8007b32:	e738      	b.n	80079a6 <_dtoa_r+0x916>
 8007b34:	460b      	mov	r3, r1
 8007b36:	e7b3      	b.n	8007aa0 <_dtoa_r+0xa10>
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <_dtoa_r+0xad0>)
 8007b3a:	f7ff bb0a 	b.w	8007152 <_dtoa_r+0xc2>
 8007b3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f47f aae8 	bne.w	8007116 <_dtoa_r+0x86>
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <_dtoa_r+0xad4>)
 8007b48:	f7ff bb03 	b.w	8007152 <_dtoa_r+0xc2>
 8007b4c:	9b06      	ldr	r3, [sp, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f73f af4f 	bgt.w	80079f2 <_dtoa_r+0x962>
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	f77f af4b 	ble.w	80079f2 <_dtoa_r+0x962>
 8007b5c:	e70e      	b.n	800797c <_dtoa_r+0x8ec>
 8007b5e:	bf00      	nop
 8007b60:	0800b5eb 	.word	0x0800b5eb
 8007b64:	0800b60d 	.word	0x0800b60d

08007b68 <_localeconv_r>:
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <_localeconv_r+0x14>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6a18      	ldr	r0, [r3, #32]
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <_localeconv_r+0x18>)
 8007b70:	2800      	cmp	r0, #0
 8007b72:	bf08      	it	eq
 8007b74:	4618      	moveq	r0, r3
 8007b76:	30f0      	adds	r0, #240	; 0xf0
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20000050 	.word	0x20000050
 8007b80:	20000554 	.word	0x20000554

08007b84 <malloc>:
 8007b84:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <malloc+0xc>)
 8007b86:	4601      	mov	r1, r0
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	f000 b803 	b.w	8007b94 <_malloc_r>
 8007b8e:	bf00      	nop
 8007b90:	20000050 	.word	0x20000050

08007b94 <_malloc_r>:
 8007b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	f101 040b 	add.w	r4, r1, #11
 8007b9c:	2c16      	cmp	r4, #22
 8007b9e:	4681      	mov	r9, r0
 8007ba0:	d907      	bls.n	8007bb2 <_malloc_r+0x1e>
 8007ba2:	f034 0407 	bics.w	r4, r4, #7
 8007ba6:	d505      	bpl.n	8007bb4 <_malloc_r+0x20>
 8007ba8:	230c      	movs	r3, #12
 8007baa:	f8c9 3000 	str.w	r3, [r9]
 8007bae:	2600      	movs	r6, #0
 8007bb0:	e131      	b.n	8007e16 <_malloc_r+0x282>
 8007bb2:	2410      	movs	r4, #16
 8007bb4:	428c      	cmp	r4, r1
 8007bb6:	d3f7      	bcc.n	8007ba8 <_malloc_r+0x14>
 8007bb8:	4648      	mov	r0, r9
 8007bba:	f000 fa05 	bl	8007fc8 <__malloc_lock>
 8007bbe:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007bc2:	4d9c      	ldr	r5, [pc, #624]	; (8007e34 <_malloc_r+0x2a0>)
 8007bc4:	d236      	bcs.n	8007c34 <_malloc_r+0xa0>
 8007bc6:	f104 0208 	add.w	r2, r4, #8
 8007bca:	442a      	add	r2, r5
 8007bcc:	f1a2 0108 	sub.w	r1, r2, #8
 8007bd0:	6856      	ldr	r6, [r2, #4]
 8007bd2:	428e      	cmp	r6, r1
 8007bd4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007bd8:	d102      	bne.n	8007be0 <_malloc_r+0x4c>
 8007bda:	68d6      	ldr	r6, [r2, #12]
 8007bdc:	42b2      	cmp	r2, r6
 8007bde:	d010      	beq.n	8007c02 <_malloc_r+0x6e>
 8007be0:	6873      	ldr	r3, [r6, #4]
 8007be2:	68f2      	ldr	r2, [r6, #12]
 8007be4:	68b1      	ldr	r1, [r6, #8]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	60ca      	str	r2, [r1, #12]
 8007bec:	4433      	add	r3, r6
 8007bee:	6091      	str	r1, [r2, #8]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	4648      	mov	r0, r9
 8007bfa:	f000 f9eb 	bl	8007fd4 <__malloc_unlock>
 8007bfe:	3608      	adds	r6, #8
 8007c00:	e109      	b.n	8007e16 <_malloc_r+0x282>
 8007c02:	3302      	adds	r3, #2
 8007c04:	4a8c      	ldr	r2, [pc, #560]	; (8007e38 <_malloc_r+0x2a4>)
 8007c06:	692e      	ldr	r6, [r5, #16]
 8007c08:	4296      	cmp	r6, r2
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	d06d      	beq.n	8007cea <_malloc_r+0x156>
 8007c0e:	6870      	ldr	r0, [r6, #4]
 8007c10:	f020 0003 	bic.w	r0, r0, #3
 8007c14:	1b07      	subs	r7, r0, r4
 8007c16:	2f0f      	cmp	r7, #15
 8007c18:	dd47      	ble.n	8007caa <_malloc_r+0x116>
 8007c1a:	1933      	adds	r3, r6, r4
 8007c1c:	f044 0401 	orr.w	r4, r4, #1
 8007c20:	6074      	str	r4, [r6, #4]
 8007c22:	616b      	str	r3, [r5, #20]
 8007c24:	612b      	str	r3, [r5, #16]
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	609a      	str	r2, [r3, #8]
 8007c2a:	f047 0201 	orr.w	r2, r7, #1
 8007c2e:	605a      	str	r2, [r3, #4]
 8007c30:	5037      	str	r7, [r6, r0]
 8007c32:	e7e1      	b.n	8007bf8 <_malloc_r+0x64>
 8007c34:	0a63      	lsrs	r3, r4, #9
 8007c36:	d02a      	beq.n	8007c8e <_malloc_r+0xfa>
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d812      	bhi.n	8007c62 <_malloc_r+0xce>
 8007c3c:	09a3      	lsrs	r3, r4, #6
 8007c3e:	3338      	adds	r3, #56	; 0x38
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007c46:	f1a2 0008 	sub.w	r0, r2, #8
 8007c4a:	6856      	ldr	r6, [r2, #4]
 8007c4c:	4286      	cmp	r6, r0
 8007c4e:	d006      	beq.n	8007c5e <_malloc_r+0xca>
 8007c50:	6872      	ldr	r2, [r6, #4]
 8007c52:	f022 0203 	bic.w	r2, r2, #3
 8007c56:	1b11      	subs	r1, r2, r4
 8007c58:	290f      	cmp	r1, #15
 8007c5a:	dd1c      	ble.n	8007c96 <_malloc_r+0x102>
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	3301      	adds	r3, #1
 8007c60:	e7d0      	b.n	8007c04 <_malloc_r+0x70>
 8007c62:	2b14      	cmp	r3, #20
 8007c64:	d801      	bhi.n	8007c6a <_malloc_r+0xd6>
 8007c66:	335b      	adds	r3, #91	; 0x5b
 8007c68:	e7ea      	b.n	8007c40 <_malloc_r+0xac>
 8007c6a:	2b54      	cmp	r3, #84	; 0x54
 8007c6c:	d802      	bhi.n	8007c74 <_malloc_r+0xe0>
 8007c6e:	0b23      	lsrs	r3, r4, #12
 8007c70:	336e      	adds	r3, #110	; 0x6e
 8007c72:	e7e5      	b.n	8007c40 <_malloc_r+0xac>
 8007c74:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007c78:	d802      	bhi.n	8007c80 <_malloc_r+0xec>
 8007c7a:	0be3      	lsrs	r3, r4, #15
 8007c7c:	3377      	adds	r3, #119	; 0x77
 8007c7e:	e7df      	b.n	8007c40 <_malloc_r+0xac>
 8007c80:	f240 5254 	movw	r2, #1364	; 0x554
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d804      	bhi.n	8007c92 <_malloc_r+0xfe>
 8007c88:	0ca3      	lsrs	r3, r4, #18
 8007c8a:	337c      	adds	r3, #124	; 0x7c
 8007c8c:	e7d8      	b.n	8007c40 <_malloc_r+0xac>
 8007c8e:	233f      	movs	r3, #63	; 0x3f
 8007c90:	e7d6      	b.n	8007c40 <_malloc_r+0xac>
 8007c92:	237e      	movs	r3, #126	; 0x7e
 8007c94:	e7d4      	b.n	8007c40 <_malloc_r+0xac>
 8007c96:	2900      	cmp	r1, #0
 8007c98:	68f1      	ldr	r1, [r6, #12]
 8007c9a:	db04      	blt.n	8007ca6 <_malloc_r+0x112>
 8007c9c:	68b3      	ldr	r3, [r6, #8]
 8007c9e:	60d9      	str	r1, [r3, #12]
 8007ca0:	608b      	str	r3, [r1, #8]
 8007ca2:	18b3      	adds	r3, r6, r2
 8007ca4:	e7a4      	b.n	8007bf0 <_malloc_r+0x5c>
 8007ca6:	460e      	mov	r6, r1
 8007ca8:	e7d0      	b.n	8007c4c <_malloc_r+0xb8>
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	616a      	str	r2, [r5, #20]
 8007cae:	612a      	str	r2, [r5, #16]
 8007cb0:	db05      	blt.n	8007cbe <_malloc_r+0x12a>
 8007cb2:	4430      	add	r0, r6
 8007cb4:	6843      	ldr	r3, [r0, #4]
 8007cb6:	f043 0301 	orr.w	r3, r3, #1
 8007cba:	6043      	str	r3, [r0, #4]
 8007cbc:	e79c      	b.n	8007bf8 <_malloc_r+0x64>
 8007cbe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007cc2:	d244      	bcs.n	8007d4e <_malloc_r+0x1ba>
 8007cc4:	08c0      	lsrs	r0, r0, #3
 8007cc6:	1087      	asrs	r7, r0, #2
 8007cc8:	2201      	movs	r2, #1
 8007cca:	fa02 f707 	lsl.w	r7, r2, r7
 8007cce:	686a      	ldr	r2, [r5, #4]
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	433a      	orrs	r2, r7
 8007cd4:	606a      	str	r2, [r5, #4]
 8007cd6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007cda:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8007cde:	60b7      	str	r7, [r6, #8]
 8007ce0:	3a08      	subs	r2, #8
 8007ce2:	60f2      	str	r2, [r6, #12]
 8007ce4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007ce8:	60fe      	str	r6, [r7, #12]
 8007cea:	2001      	movs	r0, #1
 8007cec:	109a      	asrs	r2, r3, #2
 8007cee:	fa00 f202 	lsl.w	r2, r0, r2
 8007cf2:	6868      	ldr	r0, [r5, #4]
 8007cf4:	4282      	cmp	r2, r0
 8007cf6:	f200 80a1 	bhi.w	8007e3c <_malloc_r+0x2a8>
 8007cfa:	4202      	tst	r2, r0
 8007cfc:	d106      	bne.n	8007d0c <_malloc_r+0x178>
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	0052      	lsls	r2, r2, #1
 8007d04:	4202      	tst	r2, r0
 8007d06:	f103 0304 	add.w	r3, r3, #4
 8007d0a:	d0fa      	beq.n	8007d02 <_malloc_r+0x16e>
 8007d0c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007d10:	46e0      	mov	r8, ip
 8007d12:	469e      	mov	lr, r3
 8007d14:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007d18:	4546      	cmp	r6, r8
 8007d1a:	d153      	bne.n	8007dc4 <_malloc_r+0x230>
 8007d1c:	f10e 0e01 	add.w	lr, lr, #1
 8007d20:	f01e 0f03 	tst.w	lr, #3
 8007d24:	f108 0808 	add.w	r8, r8, #8
 8007d28:	d1f4      	bne.n	8007d14 <_malloc_r+0x180>
 8007d2a:	0798      	lsls	r0, r3, #30
 8007d2c:	d179      	bne.n	8007e22 <_malloc_r+0x28e>
 8007d2e:	686b      	ldr	r3, [r5, #4]
 8007d30:	ea23 0302 	bic.w	r3, r3, r2
 8007d34:	606b      	str	r3, [r5, #4]
 8007d36:	6868      	ldr	r0, [r5, #4]
 8007d38:	0052      	lsls	r2, r2, #1
 8007d3a:	4282      	cmp	r2, r0
 8007d3c:	d87e      	bhi.n	8007e3c <_malloc_r+0x2a8>
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	d07c      	beq.n	8007e3c <_malloc_r+0x2a8>
 8007d42:	4673      	mov	r3, lr
 8007d44:	4202      	tst	r2, r0
 8007d46:	d1e1      	bne.n	8007d0c <_malloc_r+0x178>
 8007d48:	3304      	adds	r3, #4
 8007d4a:	0052      	lsls	r2, r2, #1
 8007d4c:	e7fa      	b.n	8007d44 <_malloc_r+0x1b0>
 8007d4e:	0a42      	lsrs	r2, r0, #9
 8007d50:	2a04      	cmp	r2, #4
 8007d52:	d815      	bhi.n	8007d80 <_malloc_r+0x1ec>
 8007d54:	0982      	lsrs	r2, r0, #6
 8007d56:	3238      	adds	r2, #56	; 0x38
 8007d58:	1c57      	adds	r7, r2, #1
 8007d5a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007d5e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007d62:	45be      	cmp	lr, r7
 8007d64:	d126      	bne.n	8007db4 <_malloc_r+0x220>
 8007d66:	2001      	movs	r0, #1
 8007d68:	1092      	asrs	r2, r2, #2
 8007d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8007d6e:	6868      	ldr	r0, [r5, #4]
 8007d70:	4310      	orrs	r0, r2
 8007d72:	6068      	str	r0, [r5, #4]
 8007d74:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007d78:	60b7      	str	r7, [r6, #8]
 8007d7a:	f8ce 6008 	str.w	r6, [lr, #8]
 8007d7e:	e7b3      	b.n	8007ce8 <_malloc_r+0x154>
 8007d80:	2a14      	cmp	r2, #20
 8007d82:	d801      	bhi.n	8007d88 <_malloc_r+0x1f4>
 8007d84:	325b      	adds	r2, #91	; 0x5b
 8007d86:	e7e7      	b.n	8007d58 <_malloc_r+0x1c4>
 8007d88:	2a54      	cmp	r2, #84	; 0x54
 8007d8a:	d802      	bhi.n	8007d92 <_malloc_r+0x1fe>
 8007d8c:	0b02      	lsrs	r2, r0, #12
 8007d8e:	326e      	adds	r2, #110	; 0x6e
 8007d90:	e7e2      	b.n	8007d58 <_malloc_r+0x1c4>
 8007d92:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007d96:	d802      	bhi.n	8007d9e <_malloc_r+0x20a>
 8007d98:	0bc2      	lsrs	r2, r0, #15
 8007d9a:	3277      	adds	r2, #119	; 0x77
 8007d9c:	e7dc      	b.n	8007d58 <_malloc_r+0x1c4>
 8007d9e:	f240 5754 	movw	r7, #1364	; 0x554
 8007da2:	42ba      	cmp	r2, r7
 8007da4:	bf9a      	itte	ls
 8007da6:	0c82      	lsrls	r2, r0, #18
 8007da8:	327c      	addls	r2, #124	; 0x7c
 8007daa:	227e      	movhi	r2, #126	; 0x7e
 8007dac:	e7d4      	b.n	8007d58 <_malloc_r+0x1c4>
 8007dae:	68bf      	ldr	r7, [r7, #8]
 8007db0:	45be      	cmp	lr, r7
 8007db2:	d004      	beq.n	8007dbe <_malloc_r+0x22a>
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	f022 0203 	bic.w	r2, r2, #3
 8007dba:	4290      	cmp	r0, r2
 8007dbc:	d3f7      	bcc.n	8007dae <_malloc_r+0x21a>
 8007dbe:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007dc2:	e7d7      	b.n	8007d74 <_malloc_r+0x1e0>
 8007dc4:	6870      	ldr	r0, [r6, #4]
 8007dc6:	68f7      	ldr	r7, [r6, #12]
 8007dc8:	f020 0003 	bic.w	r0, r0, #3
 8007dcc:	eba0 0a04 	sub.w	sl, r0, r4
 8007dd0:	f1ba 0f0f 	cmp.w	sl, #15
 8007dd4:	dd10      	ble.n	8007df8 <_malloc_r+0x264>
 8007dd6:	68b2      	ldr	r2, [r6, #8]
 8007dd8:	1933      	adds	r3, r6, r4
 8007dda:	f044 0401 	orr.w	r4, r4, #1
 8007dde:	6074      	str	r4, [r6, #4]
 8007de0:	60d7      	str	r7, [r2, #12]
 8007de2:	60ba      	str	r2, [r7, #8]
 8007de4:	f04a 0201 	orr.w	r2, sl, #1
 8007de8:	616b      	str	r3, [r5, #20]
 8007dea:	612b      	str	r3, [r5, #16]
 8007dec:	60d9      	str	r1, [r3, #12]
 8007dee:	6099      	str	r1, [r3, #8]
 8007df0:	605a      	str	r2, [r3, #4]
 8007df2:	f846 a000 	str.w	sl, [r6, r0]
 8007df6:	e6ff      	b.n	8007bf8 <_malloc_r+0x64>
 8007df8:	f1ba 0f00 	cmp.w	sl, #0
 8007dfc:	db0f      	blt.n	8007e1e <_malloc_r+0x28a>
 8007dfe:	4430      	add	r0, r6
 8007e00:	6843      	ldr	r3, [r0, #4]
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6043      	str	r3, [r0, #4]
 8007e08:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007e0c:	4648      	mov	r0, r9
 8007e0e:	60df      	str	r7, [r3, #12]
 8007e10:	60bb      	str	r3, [r7, #8]
 8007e12:	f000 f8df 	bl	8007fd4 <__malloc_unlock>
 8007e16:	4630      	mov	r0, r6
 8007e18:	b003      	add	sp, #12
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1e:	463e      	mov	r6, r7
 8007e20:	e77a      	b.n	8007d18 <_malloc_r+0x184>
 8007e22:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007e26:	4584      	cmp	ip, r0
 8007e28:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e2c:	f43f af7d 	beq.w	8007d2a <_malloc_r+0x196>
 8007e30:	e781      	b.n	8007d36 <_malloc_r+0x1a2>
 8007e32:	bf00      	nop
 8007e34:	20000144 	.word	0x20000144
 8007e38:	2000014c 	.word	0x2000014c
 8007e3c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007e40:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007e44:	f026 0603 	bic.w	r6, r6, #3
 8007e48:	42b4      	cmp	r4, r6
 8007e4a:	d803      	bhi.n	8007e54 <_malloc_r+0x2c0>
 8007e4c:	1b33      	subs	r3, r6, r4
 8007e4e:	2b0f      	cmp	r3, #15
 8007e50:	f300 8096 	bgt.w	8007f80 <_malloc_r+0x3ec>
 8007e54:	4a4f      	ldr	r2, [pc, #316]	; (8007f94 <_malloc_r+0x400>)
 8007e56:	6817      	ldr	r7, [r2, #0]
 8007e58:	4a4f      	ldr	r2, [pc, #316]	; (8007f98 <_malloc_r+0x404>)
 8007e5a:	6811      	ldr	r1, [r2, #0]
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	3101      	adds	r1, #1
 8007e60:	eb0b 0306 	add.w	r3, fp, r6
 8007e64:	4427      	add	r7, r4
 8007e66:	d005      	beq.n	8007e74 <_malloc_r+0x2e0>
 8007e68:	494c      	ldr	r1, [pc, #304]	; (8007f9c <_malloc_r+0x408>)
 8007e6a:	3901      	subs	r1, #1
 8007e6c:	440f      	add	r7, r1
 8007e6e:	3101      	adds	r1, #1
 8007e70:	4249      	negs	r1, r1
 8007e72:	400f      	ands	r7, r1
 8007e74:	4639      	mov	r1, r7
 8007e76:	4648      	mov	r0, r9
 8007e78:	9201      	str	r2, [sp, #4]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	f000 fb80 	bl	8008580 <_sbrk_r>
 8007e80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e84:	4680      	mov	r8, r0
 8007e86:	d056      	beq.n	8007f36 <_malloc_r+0x3a2>
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	9a01      	ldr	r2, [sp, #4]
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	d901      	bls.n	8007e94 <_malloc_r+0x300>
 8007e90:	45ab      	cmp	fp, r5
 8007e92:	d150      	bne.n	8007f36 <_malloc_r+0x3a2>
 8007e94:	4842      	ldr	r0, [pc, #264]	; (8007fa0 <_malloc_r+0x40c>)
 8007e96:	6801      	ldr	r1, [r0, #0]
 8007e98:	4543      	cmp	r3, r8
 8007e9a:	eb07 0e01 	add.w	lr, r7, r1
 8007e9e:	f8c0 e000 	str.w	lr, [r0]
 8007ea2:	4940      	ldr	r1, [pc, #256]	; (8007fa4 <_malloc_r+0x410>)
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	d113      	bne.n	8007ed0 <_malloc_r+0x33c>
 8007ea8:	420b      	tst	r3, r1
 8007eaa:	d111      	bne.n	8007ed0 <_malloc_r+0x33c>
 8007eac:	68ab      	ldr	r3, [r5, #8]
 8007eae:	443e      	add	r6, r7
 8007eb0:	f046 0601 	orr.w	r6, r6, #1
 8007eb4:	605e      	str	r6, [r3, #4]
 8007eb6:	4a3c      	ldr	r2, [pc, #240]	; (8007fa8 <_malloc_r+0x414>)
 8007eb8:	f8da 3000 	ldr.w	r3, [sl]
 8007ebc:	6811      	ldr	r1, [r2, #0]
 8007ebe:	428b      	cmp	r3, r1
 8007ec0:	bf88      	it	hi
 8007ec2:	6013      	strhi	r3, [r2, #0]
 8007ec4:	4a39      	ldr	r2, [pc, #228]	; (8007fac <_malloc_r+0x418>)
 8007ec6:	6811      	ldr	r1, [r2, #0]
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf88      	it	hi
 8007ecc:	6013      	strhi	r3, [r2, #0]
 8007ece:	e032      	b.n	8007f36 <_malloc_r+0x3a2>
 8007ed0:	6810      	ldr	r0, [r2, #0]
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	bf1b      	ittet	ne
 8007ed6:	eba8 0303 	subne.w	r3, r8, r3
 8007eda:	4473      	addne	r3, lr
 8007edc:	f8c2 8000 	streq.w	r8, [r2]
 8007ee0:	f8ca 3000 	strne.w	r3, [sl]
 8007ee4:	f018 0007 	ands.w	r0, r8, #7
 8007ee8:	bf1c      	itt	ne
 8007eea:	f1c0 0008 	rsbne	r0, r0, #8
 8007eee:	4480      	addne	r8, r0
 8007ef0:	4b2a      	ldr	r3, [pc, #168]	; (8007f9c <_malloc_r+0x408>)
 8007ef2:	4447      	add	r7, r8
 8007ef4:	4418      	add	r0, r3
 8007ef6:	400f      	ands	r7, r1
 8007ef8:	1bc7      	subs	r7, r0, r7
 8007efa:	4639      	mov	r1, r7
 8007efc:	4648      	mov	r0, r9
 8007efe:	f000 fb3f 	bl	8008580 <_sbrk_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	bf08      	it	eq
 8007f06:	4640      	moveq	r0, r8
 8007f08:	f8da 3000 	ldr.w	r3, [sl]
 8007f0c:	f8c5 8008 	str.w	r8, [r5, #8]
 8007f10:	bf08      	it	eq
 8007f12:	2700      	moveq	r7, #0
 8007f14:	eba0 0008 	sub.w	r0, r0, r8
 8007f18:	443b      	add	r3, r7
 8007f1a:	4407      	add	r7, r0
 8007f1c:	f047 0701 	orr.w	r7, r7, #1
 8007f20:	45ab      	cmp	fp, r5
 8007f22:	f8ca 3000 	str.w	r3, [sl]
 8007f26:	f8c8 7004 	str.w	r7, [r8, #4]
 8007f2a:	d0c4      	beq.n	8007eb6 <_malloc_r+0x322>
 8007f2c:	2e0f      	cmp	r6, #15
 8007f2e:	d810      	bhi.n	8007f52 <_malloc_r+0x3be>
 8007f30:	2301      	movs	r3, #1
 8007f32:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f36:	68ab      	ldr	r3, [r5, #8]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	f022 0203 	bic.w	r2, r2, #3
 8007f3e:	4294      	cmp	r4, r2
 8007f40:	eba2 0304 	sub.w	r3, r2, r4
 8007f44:	d801      	bhi.n	8007f4a <_malloc_r+0x3b6>
 8007f46:	2b0f      	cmp	r3, #15
 8007f48:	dc1a      	bgt.n	8007f80 <_malloc_r+0x3ec>
 8007f4a:	4648      	mov	r0, r9
 8007f4c:	f000 f842 	bl	8007fd4 <__malloc_unlock>
 8007f50:	e62d      	b.n	8007bae <_malloc_r+0x1a>
 8007f52:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007f56:	3e0c      	subs	r6, #12
 8007f58:	f026 0607 	bic.w	r6, r6, #7
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	4333      	orrs	r3, r6
 8007f62:	f8cb 3004 	str.w	r3, [fp, #4]
 8007f66:	eb0b 0306 	add.w	r3, fp, r6
 8007f6a:	2205      	movs	r2, #5
 8007f6c:	2e0f      	cmp	r6, #15
 8007f6e:	605a      	str	r2, [r3, #4]
 8007f70:	609a      	str	r2, [r3, #8]
 8007f72:	d9a0      	bls.n	8007eb6 <_malloc_r+0x322>
 8007f74:	f10b 0108 	add.w	r1, fp, #8
 8007f78:	4648      	mov	r0, r9
 8007f7a:	f000 fc0f 	bl	800879c <_free_r>
 8007f7e:	e79a      	b.n	8007eb6 <_malloc_r+0x322>
 8007f80:	68ae      	ldr	r6, [r5, #8]
 8007f82:	f044 0201 	orr.w	r2, r4, #1
 8007f86:	4434      	add	r4, r6
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	6072      	str	r2, [r6, #4]
 8007f8e:	60ac      	str	r4, [r5, #8]
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	e631      	b.n	8007bf8 <_malloc_r+0x64>
 8007f94:	20000968 	.word	0x20000968
 8007f98:	2000054c 	.word	0x2000054c
 8007f9c:	00000080 	.word	0x00000080
 8007fa0:	20000938 	.word	0x20000938
 8007fa4:	0000007f 	.word	0x0000007f
 8007fa8:	20000960 	.word	0x20000960
 8007fac:	20000964 	.word	0x20000964

08007fb0 <memcpy>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	1e43      	subs	r3, r0, #1
 8007fb4:	440a      	add	r2, r1
 8007fb6:	4291      	cmp	r1, r2
 8007fb8:	d100      	bne.n	8007fbc <memcpy+0xc>
 8007fba:	bd10      	pop	{r4, pc}
 8007fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc4:	e7f7      	b.n	8007fb6 <memcpy+0x6>
	...

08007fc8 <__malloc_lock>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__malloc_lock+0x8>)
 8007fca:	f000 bca3 	b.w	8008914 <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	20000d50 	.word	0x20000d50

08007fd4 <__malloc_unlock>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__malloc_unlock+0x8>)
 8007fd6:	f000 bc9e 	b.w	8008916 <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20000d50 	.word	0x20000d50

08007fe0 <_Balloc>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	b93d      	cbnz	r5, 8007ffa <_Balloc+0x1a>
 8007fea:	2010      	movs	r0, #16
 8007fec:	f7ff fdca 	bl	8007b84 <malloc>
 8007ff0:	6260      	str	r0, [r4, #36]	; 0x24
 8007ff2:	6045      	str	r5, [r0, #4]
 8007ff4:	6085      	str	r5, [r0, #8]
 8007ff6:	6005      	str	r5, [r0, #0]
 8007ff8:	60c5      	str	r5, [r0, #12]
 8007ffa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ffc:	68eb      	ldr	r3, [r5, #12]
 8007ffe:	b183      	cbz	r3, 8008022 <_Balloc+0x42>
 8008000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008008:	b9b8      	cbnz	r0, 800803a <_Balloc+0x5a>
 800800a:	2101      	movs	r1, #1
 800800c:	fa01 f506 	lsl.w	r5, r1, r6
 8008010:	1d6a      	adds	r2, r5, #5
 8008012:	0092      	lsls	r2, r2, #2
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fb3d 	bl	8008694 <_calloc_r>
 800801a:	b160      	cbz	r0, 8008036 <_Balloc+0x56>
 800801c:	6046      	str	r6, [r0, #4]
 800801e:	6085      	str	r5, [r0, #8]
 8008020:	e00e      	b.n	8008040 <_Balloc+0x60>
 8008022:	2221      	movs	r2, #33	; 0x21
 8008024:	2104      	movs	r1, #4
 8008026:	4620      	mov	r0, r4
 8008028:	f000 fb34 	bl	8008694 <_calloc_r>
 800802c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800802e:	60e8      	str	r0, [r5, #12]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e4      	bne.n	8008000 <_Balloc+0x20>
 8008036:	2000      	movs	r0, #0
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	6802      	ldr	r2, [r0, #0]
 800803c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008040:	2300      	movs	r3, #0
 8008042:	6103      	str	r3, [r0, #16]
 8008044:	60c3      	str	r3, [r0, #12]
 8008046:	bd70      	pop	{r4, r5, r6, pc}

08008048 <_Bfree>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800804c:	4606      	mov	r6, r0
 800804e:	460d      	mov	r5, r1
 8008050:	b93c      	cbnz	r4, 8008062 <_Bfree+0x1a>
 8008052:	2010      	movs	r0, #16
 8008054:	f7ff fd96 	bl	8007b84 <malloc>
 8008058:	6270      	str	r0, [r6, #36]	; 0x24
 800805a:	6044      	str	r4, [r0, #4]
 800805c:	6084      	str	r4, [r0, #8]
 800805e:	6004      	str	r4, [r0, #0]
 8008060:	60c4      	str	r4, [r0, #12]
 8008062:	b13d      	cbz	r5, 8008074 <_Bfree+0x2c>
 8008064:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008066:	686a      	ldr	r2, [r5, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800806e:	6029      	str	r1, [r5, #0]
 8008070:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008074:	bd70      	pop	{r4, r5, r6, pc}

08008076 <__multadd>:
 8008076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	690d      	ldr	r5, [r1, #16]
 800807c:	461f      	mov	r7, r3
 800807e:	4606      	mov	r6, r0
 8008080:	460c      	mov	r4, r1
 8008082:	f101 0e14 	add.w	lr, r1, #20
 8008086:	2300      	movs	r3, #0
 8008088:	f8de 0000 	ldr.w	r0, [lr]
 800808c:	b281      	uxth	r1, r0
 800808e:	fb02 7101 	mla	r1, r2, r1, r7
 8008092:	0c0f      	lsrs	r7, r1, #16
 8008094:	0c00      	lsrs	r0, r0, #16
 8008096:	fb02 7000 	mla	r0, r2, r0, r7
 800809a:	b289      	uxth	r1, r1
 800809c:	3301      	adds	r3, #1
 800809e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80080a2:	429d      	cmp	r5, r3
 80080a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80080a8:	f84e 1b04 	str.w	r1, [lr], #4
 80080ac:	dcec      	bgt.n	8008088 <__multadd+0x12>
 80080ae:	b1d7      	cbz	r7, 80080e6 <__multadd+0x70>
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	429d      	cmp	r5, r3
 80080b4:	db12      	blt.n	80080dc <__multadd+0x66>
 80080b6:	6861      	ldr	r1, [r4, #4]
 80080b8:	4630      	mov	r0, r6
 80080ba:	3101      	adds	r1, #1
 80080bc:	f7ff ff90 	bl	8007fe0 <_Balloc>
 80080c0:	6922      	ldr	r2, [r4, #16]
 80080c2:	3202      	adds	r2, #2
 80080c4:	f104 010c 	add.w	r1, r4, #12
 80080c8:	4680      	mov	r8, r0
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	300c      	adds	r0, #12
 80080ce:	f7ff ff6f 	bl	8007fb0 <memcpy>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff ffb7 	bl	8008048 <_Bfree>
 80080da:	4644      	mov	r4, r8
 80080dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e0:	3501      	adds	r5, #1
 80080e2:	615f      	str	r7, [r3, #20]
 80080e4:	6125      	str	r5, [r4, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080080ec <__hi0bits>:
 80080ec:	0c02      	lsrs	r2, r0, #16
 80080ee:	0412      	lsls	r2, r2, #16
 80080f0:	4603      	mov	r3, r0
 80080f2:	b9b2      	cbnz	r2, 8008122 <__hi0bits+0x36>
 80080f4:	0403      	lsls	r3, r0, #16
 80080f6:	2010      	movs	r0, #16
 80080f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080fc:	bf04      	itt	eq
 80080fe:	021b      	lsleq	r3, r3, #8
 8008100:	3008      	addeq	r0, #8
 8008102:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008106:	bf04      	itt	eq
 8008108:	011b      	lsleq	r3, r3, #4
 800810a:	3004      	addeq	r0, #4
 800810c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008110:	bf04      	itt	eq
 8008112:	009b      	lsleq	r3, r3, #2
 8008114:	3002      	addeq	r0, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	db06      	blt.n	8008128 <__hi0bits+0x3c>
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	d503      	bpl.n	8008126 <__hi0bits+0x3a>
 800811e:	3001      	adds	r0, #1
 8008120:	4770      	bx	lr
 8008122:	2000      	movs	r0, #0
 8008124:	e7e8      	b.n	80080f8 <__hi0bits+0xc>
 8008126:	2020      	movs	r0, #32
 8008128:	4770      	bx	lr

0800812a <__lo0bits>:
 800812a:	6803      	ldr	r3, [r0, #0]
 800812c:	f013 0207 	ands.w	r2, r3, #7
 8008130:	4601      	mov	r1, r0
 8008132:	d00b      	beq.n	800814c <__lo0bits+0x22>
 8008134:	07da      	lsls	r2, r3, #31
 8008136:	d423      	bmi.n	8008180 <__lo0bits+0x56>
 8008138:	0798      	lsls	r0, r3, #30
 800813a:	bf49      	itett	mi
 800813c:	085b      	lsrmi	r3, r3, #1
 800813e:	089b      	lsrpl	r3, r3, #2
 8008140:	2001      	movmi	r0, #1
 8008142:	600b      	strmi	r3, [r1, #0]
 8008144:	bf5c      	itt	pl
 8008146:	600b      	strpl	r3, [r1, #0]
 8008148:	2002      	movpl	r0, #2
 800814a:	4770      	bx	lr
 800814c:	b298      	uxth	r0, r3
 800814e:	b9a8      	cbnz	r0, 800817c <__lo0bits+0x52>
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	2010      	movs	r0, #16
 8008154:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008158:	bf04      	itt	eq
 800815a:	0a1b      	lsreq	r3, r3, #8
 800815c:	3008      	addeq	r0, #8
 800815e:	071a      	lsls	r2, r3, #28
 8008160:	bf04      	itt	eq
 8008162:	091b      	lsreq	r3, r3, #4
 8008164:	3004      	addeq	r0, #4
 8008166:	079a      	lsls	r2, r3, #30
 8008168:	bf04      	itt	eq
 800816a:	089b      	lsreq	r3, r3, #2
 800816c:	3002      	addeq	r0, #2
 800816e:	07da      	lsls	r2, r3, #31
 8008170:	d402      	bmi.n	8008178 <__lo0bits+0x4e>
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	d006      	beq.n	8008184 <__lo0bits+0x5a>
 8008176:	3001      	adds	r0, #1
 8008178:	600b      	str	r3, [r1, #0]
 800817a:	4770      	bx	lr
 800817c:	4610      	mov	r0, r2
 800817e:	e7e9      	b.n	8008154 <__lo0bits+0x2a>
 8008180:	2000      	movs	r0, #0
 8008182:	4770      	bx	lr
 8008184:	2020      	movs	r0, #32
 8008186:	4770      	bx	lr

08008188 <__i2b>:
 8008188:	b510      	push	{r4, lr}
 800818a:	460c      	mov	r4, r1
 800818c:	2101      	movs	r1, #1
 800818e:	f7ff ff27 	bl	8007fe0 <_Balloc>
 8008192:	2201      	movs	r2, #1
 8008194:	6144      	str	r4, [r0, #20]
 8008196:	6102      	str	r2, [r0, #16]
 8008198:	bd10      	pop	{r4, pc}

0800819a <__multiply>:
 800819a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819e:	4614      	mov	r4, r2
 80081a0:	690a      	ldr	r2, [r1, #16]
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	bfb8      	it	lt
 80081a8:	460b      	movlt	r3, r1
 80081aa:	4689      	mov	r9, r1
 80081ac:	bfbc      	itt	lt
 80081ae:	46a1      	movlt	r9, r4
 80081b0:	461c      	movlt	r4, r3
 80081b2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80081be:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081c2:	eb07 060a 	add.w	r6, r7, sl
 80081c6:	429e      	cmp	r6, r3
 80081c8:	bfc8      	it	gt
 80081ca:	3101      	addgt	r1, #1
 80081cc:	f7ff ff08 	bl	8007fe0 <_Balloc>
 80081d0:	f100 0514 	add.w	r5, r0, #20
 80081d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081d8:	462b      	mov	r3, r5
 80081da:	2200      	movs	r2, #0
 80081dc:	4543      	cmp	r3, r8
 80081de:	d316      	bcc.n	800820e <__multiply+0x74>
 80081e0:	f104 0214 	add.w	r2, r4, #20
 80081e4:	f109 0114 	add.w	r1, r9, #20
 80081e8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80081ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	9c01      	ldr	r4, [sp, #4]
 80081f4:	4294      	cmp	r4, r2
 80081f6:	4613      	mov	r3, r2
 80081f8:	d80c      	bhi.n	8008214 <__multiply+0x7a>
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	dd03      	ble.n	8008206 <__multiply+0x6c>
 80081fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008202:	2b00      	cmp	r3, #0
 8008204:	d054      	beq.n	80082b0 <__multiply+0x116>
 8008206:	6106      	str	r6, [r0, #16]
 8008208:	b003      	add	sp, #12
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	f843 2b04 	str.w	r2, [r3], #4
 8008212:	e7e3      	b.n	80081dc <__multiply+0x42>
 8008214:	f8b3 a000 	ldrh.w	sl, [r3]
 8008218:	3204      	adds	r2, #4
 800821a:	f1ba 0f00 	cmp.w	sl, #0
 800821e:	d020      	beq.n	8008262 <__multiply+0xc8>
 8008220:	46ae      	mov	lr, r5
 8008222:	4689      	mov	r9, r1
 8008224:	f04f 0c00 	mov.w	ip, #0
 8008228:	f859 4b04 	ldr.w	r4, [r9], #4
 800822c:	f8be b000 	ldrh.w	fp, [lr]
 8008230:	b2a3      	uxth	r3, r4
 8008232:	fb0a b303 	mla	r3, sl, r3, fp
 8008236:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800823a:	f8de 4000 	ldr.w	r4, [lr]
 800823e:	4463      	add	r3, ip
 8008240:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008244:	fb0a c40b 	mla	r4, sl, fp, ip
 8008248:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800824c:	b29b      	uxth	r3, r3
 800824e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008252:	454f      	cmp	r7, r9
 8008254:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008258:	f84e 3b04 	str.w	r3, [lr], #4
 800825c:	d8e4      	bhi.n	8008228 <__multiply+0x8e>
 800825e:	f8ce c000 	str.w	ip, [lr]
 8008262:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	d01f      	beq.n	80082ac <__multiply+0x112>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	46ae      	mov	lr, r5
 8008270:	468c      	mov	ip, r1
 8008272:	f04f 0a00 	mov.w	sl, #0
 8008276:	f8bc 4000 	ldrh.w	r4, [ip]
 800827a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800827e:	fb09 b404 	mla	r4, r9, r4, fp
 8008282:	44a2      	add	sl, r4
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800828a:	f84e 3b04 	str.w	r3, [lr], #4
 800828e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008292:	f8be 4000 	ldrh.w	r4, [lr]
 8008296:	0c1b      	lsrs	r3, r3, #16
 8008298:	fb09 4303 	mla	r3, r9, r3, r4
 800829c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80082a0:	4567      	cmp	r7, ip
 80082a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082a6:	d8e6      	bhi.n	8008276 <__multiply+0xdc>
 80082a8:	f8ce 3000 	str.w	r3, [lr]
 80082ac:	3504      	adds	r5, #4
 80082ae:	e7a0      	b.n	80081f2 <__multiply+0x58>
 80082b0:	3e01      	subs	r6, #1
 80082b2:	e7a2      	b.n	80081fa <__multiply+0x60>

080082b4 <__pow5mult>:
 80082b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b8:	4615      	mov	r5, r2
 80082ba:	f012 0203 	ands.w	r2, r2, #3
 80082be:	4606      	mov	r6, r0
 80082c0:	460f      	mov	r7, r1
 80082c2:	d007      	beq.n	80082d4 <__pow5mult+0x20>
 80082c4:	3a01      	subs	r2, #1
 80082c6:	4c21      	ldr	r4, [pc, #132]	; (800834c <__pow5mult+0x98>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082ce:	f7ff fed2 	bl	8008076 <__multadd>
 80082d2:	4607      	mov	r7, r0
 80082d4:	10ad      	asrs	r5, r5, #2
 80082d6:	d035      	beq.n	8008344 <__pow5mult+0x90>
 80082d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082da:	b93c      	cbnz	r4, 80082ec <__pow5mult+0x38>
 80082dc:	2010      	movs	r0, #16
 80082de:	f7ff fc51 	bl	8007b84 <malloc>
 80082e2:	6270      	str	r0, [r6, #36]	; 0x24
 80082e4:	6044      	str	r4, [r0, #4]
 80082e6:	6084      	str	r4, [r0, #8]
 80082e8:	6004      	str	r4, [r0, #0]
 80082ea:	60c4      	str	r4, [r0, #12]
 80082ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f4:	b94c      	cbnz	r4, 800830a <__pow5mult+0x56>
 80082f6:	f240 2171 	movw	r1, #625	; 0x271
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff ff44 	bl	8008188 <__i2b>
 8008300:	2300      	movs	r3, #0
 8008302:	f8c8 0008 	str.w	r0, [r8, #8]
 8008306:	4604      	mov	r4, r0
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	f04f 0800 	mov.w	r8, #0
 800830e:	07eb      	lsls	r3, r5, #31
 8008310:	d50a      	bpl.n	8008328 <__pow5mult+0x74>
 8008312:	4639      	mov	r1, r7
 8008314:	4622      	mov	r2, r4
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff ff3f 	bl	800819a <__multiply>
 800831c:	4639      	mov	r1, r7
 800831e:	4681      	mov	r9, r0
 8008320:	4630      	mov	r0, r6
 8008322:	f7ff fe91 	bl	8008048 <_Bfree>
 8008326:	464f      	mov	r7, r9
 8008328:	106d      	asrs	r5, r5, #1
 800832a:	d00b      	beq.n	8008344 <__pow5mult+0x90>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	b938      	cbnz	r0, 8008340 <__pow5mult+0x8c>
 8008330:	4622      	mov	r2, r4
 8008332:	4621      	mov	r1, r4
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff ff30 	bl	800819a <__multiply>
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	f8c0 8000 	str.w	r8, [r0]
 8008340:	4604      	mov	r4, r0
 8008342:	e7e4      	b.n	800830e <__pow5mult+0x5a>
 8008344:	4638      	mov	r0, r7
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834a:	bf00      	nop
 800834c:	0800b710 	.word	0x0800b710

08008350 <__lshift>:
 8008350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	6849      	ldr	r1, [r1, #4]
 800835e:	eb0a 0903 	add.w	r9, sl, r3
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	4607      	mov	r7, r0
 8008366:	4616      	mov	r6, r2
 8008368:	f109 0501 	add.w	r5, r9, #1
 800836c:	42ab      	cmp	r3, r5
 800836e:	db31      	blt.n	80083d4 <__lshift+0x84>
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff fe35 	bl	8007fe0 <_Balloc>
 8008376:	2200      	movs	r2, #0
 8008378:	4680      	mov	r8, r0
 800837a:	f100 0314 	add.w	r3, r0, #20
 800837e:	4611      	mov	r1, r2
 8008380:	4552      	cmp	r2, sl
 8008382:	db2a      	blt.n	80083da <__lshift+0x8a>
 8008384:	6920      	ldr	r0, [r4, #16]
 8008386:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800838a:	f104 0114 	add.w	r1, r4, #20
 800838e:	f016 021f 	ands.w	r2, r6, #31
 8008392:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008396:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800839a:	d022      	beq.n	80083e2 <__lshift+0x92>
 800839c:	f1c2 0c20 	rsb	ip, r2, #32
 80083a0:	2000      	movs	r0, #0
 80083a2:	680e      	ldr	r6, [r1, #0]
 80083a4:	4096      	lsls	r6, r2
 80083a6:	4330      	orrs	r0, r6
 80083a8:	f843 0b04 	str.w	r0, [r3], #4
 80083ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80083b0:	458e      	cmp	lr, r1
 80083b2:	fa20 f00c 	lsr.w	r0, r0, ip
 80083b6:	d8f4      	bhi.n	80083a2 <__lshift+0x52>
 80083b8:	6018      	str	r0, [r3, #0]
 80083ba:	b108      	cbz	r0, 80083c0 <__lshift+0x70>
 80083bc:	f109 0502 	add.w	r5, r9, #2
 80083c0:	3d01      	subs	r5, #1
 80083c2:	4638      	mov	r0, r7
 80083c4:	f8c8 5010 	str.w	r5, [r8, #16]
 80083c8:	4621      	mov	r1, r4
 80083ca:	f7ff fe3d 	bl	8008048 <_Bfree>
 80083ce:	4640      	mov	r0, r8
 80083d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d4:	3101      	adds	r1, #1
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	e7c8      	b.n	800836c <__lshift+0x1c>
 80083da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083de:	3201      	adds	r2, #1
 80083e0:	e7ce      	b.n	8008380 <__lshift+0x30>
 80083e2:	3b04      	subs	r3, #4
 80083e4:	f851 2b04 	ldr.w	r2, [r1], #4
 80083e8:	f843 2f04 	str.w	r2, [r3, #4]!
 80083ec:	458e      	cmp	lr, r1
 80083ee:	d8f9      	bhi.n	80083e4 <__lshift+0x94>
 80083f0:	e7e6      	b.n	80083c0 <__lshift+0x70>

080083f2 <__mcmp>:
 80083f2:	6903      	ldr	r3, [r0, #16]
 80083f4:	690a      	ldr	r2, [r1, #16]
 80083f6:	1a9b      	subs	r3, r3, r2
 80083f8:	b530      	push	{r4, r5, lr}
 80083fa:	d10c      	bne.n	8008416 <__mcmp+0x24>
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	3014      	adds	r0, #20
 8008400:	3114      	adds	r1, #20
 8008402:	1884      	adds	r4, r0, r2
 8008404:	4411      	add	r1, r2
 8008406:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800840a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800840e:	4295      	cmp	r5, r2
 8008410:	d003      	beq.n	800841a <__mcmp+0x28>
 8008412:	d305      	bcc.n	8008420 <__mcmp+0x2e>
 8008414:	2301      	movs	r3, #1
 8008416:	4618      	mov	r0, r3
 8008418:	bd30      	pop	{r4, r5, pc}
 800841a:	42a0      	cmp	r0, r4
 800841c:	d3f3      	bcc.n	8008406 <__mcmp+0x14>
 800841e:	e7fa      	b.n	8008416 <__mcmp+0x24>
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	e7f7      	b.n	8008416 <__mcmp+0x24>

08008426 <__mdiff>:
 8008426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842a:	460d      	mov	r5, r1
 800842c:	4607      	mov	r7, r0
 800842e:	4611      	mov	r1, r2
 8008430:	4628      	mov	r0, r5
 8008432:	4614      	mov	r4, r2
 8008434:	f7ff ffdd 	bl	80083f2 <__mcmp>
 8008438:	1e06      	subs	r6, r0, #0
 800843a:	d108      	bne.n	800844e <__mdiff+0x28>
 800843c:	4631      	mov	r1, r6
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff fdce 	bl	8007fe0 <_Balloc>
 8008444:	2301      	movs	r3, #1
 8008446:	6103      	str	r3, [r0, #16]
 8008448:	6146      	str	r6, [r0, #20]
 800844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844e:	bfa4      	itt	ge
 8008450:	4623      	movge	r3, r4
 8008452:	462c      	movge	r4, r5
 8008454:	4638      	mov	r0, r7
 8008456:	6861      	ldr	r1, [r4, #4]
 8008458:	bfa6      	itte	ge
 800845a:	461d      	movge	r5, r3
 800845c:	2600      	movge	r6, #0
 800845e:	2601      	movlt	r6, #1
 8008460:	f7ff fdbe 	bl	8007fe0 <_Balloc>
 8008464:	692b      	ldr	r3, [r5, #16]
 8008466:	60c6      	str	r6, [r0, #12]
 8008468:	6926      	ldr	r6, [r4, #16]
 800846a:	f105 0914 	add.w	r9, r5, #20
 800846e:	f104 0214 	add.w	r2, r4, #20
 8008472:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008476:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800847a:	f100 0514 	add.w	r5, r0, #20
 800847e:	f04f 0c00 	mov.w	ip, #0
 8008482:	f852 ab04 	ldr.w	sl, [r2], #4
 8008486:	f859 4b04 	ldr.w	r4, [r9], #4
 800848a:	fa1c f18a 	uxtah	r1, ip, sl
 800848e:	b2a3      	uxth	r3, r4
 8008490:	1ac9      	subs	r1, r1, r3
 8008492:	0c23      	lsrs	r3, r4, #16
 8008494:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008498:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800849c:	b289      	uxth	r1, r1
 800849e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084a2:	45c8      	cmp	r8, r9
 80084a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80084a8:	4696      	mov	lr, r2
 80084aa:	f845 3b04 	str.w	r3, [r5], #4
 80084ae:	d8e8      	bhi.n	8008482 <__mdiff+0x5c>
 80084b0:	45be      	cmp	lr, r7
 80084b2:	d305      	bcc.n	80084c0 <__mdiff+0x9a>
 80084b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80084b8:	b18b      	cbz	r3, 80084de <__mdiff+0xb8>
 80084ba:	6106      	str	r6, [r0, #16]
 80084bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80084c4:	fa1c f381 	uxtah	r3, ip, r1
 80084c8:	141a      	asrs	r2, r3, #16
 80084ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084d8:	f845 3b04 	str.w	r3, [r5], #4
 80084dc:	e7e8      	b.n	80084b0 <__mdiff+0x8a>
 80084de:	3e01      	subs	r6, #1
 80084e0:	e7e8      	b.n	80084b4 <__mdiff+0x8e>

080084e2 <__d2b>:
 80084e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084e6:	460e      	mov	r6, r1
 80084e8:	2101      	movs	r1, #1
 80084ea:	ec59 8b10 	vmov	r8, r9, d0
 80084ee:	4615      	mov	r5, r2
 80084f0:	f7ff fd76 	bl	8007fe0 <_Balloc>
 80084f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084f8:	4607      	mov	r7, r0
 80084fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084fe:	bb34      	cbnz	r4, 800854e <__d2b+0x6c>
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	f1b8 0f00 	cmp.w	r8, #0
 8008506:	d027      	beq.n	8008558 <__d2b+0x76>
 8008508:	a802      	add	r0, sp, #8
 800850a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800850e:	f7ff fe0c 	bl	800812a <__lo0bits>
 8008512:	9900      	ldr	r1, [sp, #0]
 8008514:	b1f0      	cbz	r0, 8008554 <__d2b+0x72>
 8008516:	9a01      	ldr	r2, [sp, #4]
 8008518:	f1c0 0320 	rsb	r3, r0, #32
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	430b      	orrs	r3, r1
 8008522:	40c2      	lsrs	r2, r0
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	9201      	str	r2, [sp, #4]
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	bf14      	ite	ne
 8008530:	2102      	movne	r1, #2
 8008532:	2101      	moveq	r1, #1
 8008534:	6139      	str	r1, [r7, #16]
 8008536:	b1c4      	cbz	r4, 800856a <__d2b+0x88>
 8008538:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800853c:	4404      	add	r4, r0
 800853e:	6034      	str	r4, [r6, #0]
 8008540:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008544:	6028      	str	r0, [r5, #0]
 8008546:	4638      	mov	r0, r7
 8008548:	b003      	add	sp, #12
 800854a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800854e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008552:	e7d5      	b.n	8008500 <__d2b+0x1e>
 8008554:	6179      	str	r1, [r7, #20]
 8008556:	e7e7      	b.n	8008528 <__d2b+0x46>
 8008558:	a801      	add	r0, sp, #4
 800855a:	f7ff fde6 	bl	800812a <__lo0bits>
 800855e:	9b01      	ldr	r3, [sp, #4]
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	2101      	movs	r1, #1
 8008564:	6139      	str	r1, [r7, #16]
 8008566:	3020      	adds	r0, #32
 8008568:	e7e5      	b.n	8008536 <__d2b+0x54>
 800856a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800856e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008572:	6030      	str	r0, [r6, #0]
 8008574:	6918      	ldr	r0, [r3, #16]
 8008576:	f7ff fdb9 	bl	80080ec <__hi0bits>
 800857a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800857e:	e7e1      	b.n	8008544 <__d2b+0x62>

08008580 <_sbrk_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4c06      	ldr	r4, [pc, #24]	; (800859c <_sbrk_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4605      	mov	r5, r0
 8008588:	4608      	mov	r0, r1
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	f7fd fb20 	bl	8005bd0 <_sbrk>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_sbrk_r+0x1a>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	b103      	cbz	r3, 800859a <_sbrk_r+0x1a>
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000d58 	.word	0x20000d58

080085a0 <__ssprint_r>:
 80085a0:	6893      	ldr	r3, [r2, #8]
 80085a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a6:	4681      	mov	r9, r0
 80085a8:	460c      	mov	r4, r1
 80085aa:	4617      	mov	r7, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d060      	beq.n	8008672 <__ssprint_r+0xd2>
 80085b0:	f04f 0b00 	mov.w	fp, #0
 80085b4:	f8d2 a000 	ldr.w	sl, [r2]
 80085b8:	465e      	mov	r6, fp
 80085ba:	b356      	cbz	r6, 8008612 <__ssprint_r+0x72>
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	429e      	cmp	r6, r3
 80085c0:	d344      	bcc.n	800864c <__ssprint_r+0xac>
 80085c2:	89a2      	ldrh	r2, [r4, #12]
 80085c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c8:	d03e      	beq.n	8008648 <__ssprint_r+0xa8>
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	6921      	ldr	r1, [r4, #16]
 80085ce:	eba5 0801 	sub.w	r8, r5, r1
 80085d2:	6965      	ldr	r5, [r4, #20]
 80085d4:	2302      	movs	r3, #2
 80085d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085da:	fb95 f5f3 	sdiv	r5, r5, r3
 80085de:	f108 0301 	add.w	r3, r8, #1
 80085e2:	4433      	add	r3, r6
 80085e4:	429d      	cmp	r5, r3
 80085e6:	bf38      	it	cc
 80085e8:	461d      	movcc	r5, r3
 80085ea:	0553      	lsls	r3, r2, #21
 80085ec:	d546      	bpl.n	800867c <__ssprint_r+0xdc>
 80085ee:	4629      	mov	r1, r5
 80085f0:	4648      	mov	r0, r9
 80085f2:	f7ff facf 	bl	8007b94 <_malloc_r>
 80085f6:	b998      	cbnz	r0, 8008620 <__ssprint_r+0x80>
 80085f8:	230c      	movs	r3, #12
 80085fa:	f8c9 3000 	str.w	r3, [r9]
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	2300      	movs	r3, #0
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e031      	b.n	8008676 <__ssprint_r+0xd6>
 8008612:	f8da b000 	ldr.w	fp, [sl]
 8008616:	f8da 6004 	ldr.w	r6, [sl, #4]
 800861a:	f10a 0a08 	add.w	sl, sl, #8
 800861e:	e7cc      	b.n	80085ba <__ssprint_r+0x1a>
 8008620:	4642      	mov	r2, r8
 8008622:	6921      	ldr	r1, [r4, #16]
 8008624:	9001      	str	r0, [sp, #4]
 8008626:	f7ff fcc3 	bl	8007fb0 <memcpy>
 800862a:	89a2      	ldrh	r2, [r4, #12]
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008636:	81a2      	strh	r2, [r4, #12]
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	6165      	str	r5, [r4, #20]
 800863c:	4443      	add	r3, r8
 800863e:	eba5 0508 	sub.w	r5, r5, r8
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	60a5      	str	r5, [r4, #8]
 8008646:	4633      	mov	r3, r6
 8008648:	429e      	cmp	r6, r3
 800864a:	d200      	bcs.n	800864e <__ssprint_r+0xae>
 800864c:	4633      	mov	r3, r6
 800864e:	461a      	mov	r2, r3
 8008650:	4659      	mov	r1, fp
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	f000 f971 	bl	800893c <memmove>
 800865a:	68a2      	ldr	r2, [r4, #8]
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	60a2      	str	r2, [r4, #8]
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	4413      	add	r3, r2
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	1b9e      	subs	r6, r3, r6
 800866c:	60be      	str	r6, [r7, #8]
 800866e:	2e00      	cmp	r6, #0
 8008670:	d1cf      	bne.n	8008612 <__ssprint_r+0x72>
 8008672:	2000      	movs	r0, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	b003      	add	sp, #12
 8008678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	462a      	mov	r2, r5
 800867e:	4648      	mov	r0, r9
 8008680:	f000 f976 	bl	8008970 <_realloc_r>
 8008684:	4603      	mov	r3, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	d1d6      	bne.n	8008638 <__ssprint_r+0x98>
 800868a:	6921      	ldr	r1, [r4, #16]
 800868c:	4648      	mov	r0, r9
 800868e:	f000 f885 	bl	800879c <_free_r>
 8008692:	e7b1      	b.n	80085f8 <__ssprint_r+0x58>

08008694 <_calloc_r>:
 8008694:	b510      	push	{r4, lr}
 8008696:	4351      	muls	r1, r2
 8008698:	f7ff fa7c 	bl	8007b94 <_malloc_r>
 800869c:	4604      	mov	r4, r0
 800869e:	b198      	cbz	r0, 80086c8 <_calloc_r+0x34>
 80086a0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80086a4:	f022 0203 	bic.w	r2, r2, #3
 80086a8:	3a04      	subs	r2, #4
 80086aa:	2a24      	cmp	r2, #36	; 0x24
 80086ac:	d81b      	bhi.n	80086e6 <_calloc_r+0x52>
 80086ae:	2a13      	cmp	r2, #19
 80086b0:	d917      	bls.n	80086e2 <_calloc_r+0x4e>
 80086b2:	2100      	movs	r1, #0
 80086b4:	2a1b      	cmp	r2, #27
 80086b6:	6001      	str	r1, [r0, #0]
 80086b8:	6041      	str	r1, [r0, #4]
 80086ba:	d807      	bhi.n	80086cc <_calloc_r+0x38>
 80086bc:	f100 0308 	add.w	r3, r0, #8
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	4620      	mov	r0, r4
 80086ca:	bd10      	pop	{r4, pc}
 80086cc:	2a24      	cmp	r2, #36	; 0x24
 80086ce:	6081      	str	r1, [r0, #8]
 80086d0:	60c1      	str	r1, [r0, #12]
 80086d2:	bf11      	iteee	ne
 80086d4:	f100 0310 	addne.w	r3, r0, #16
 80086d8:	6101      	streq	r1, [r0, #16]
 80086da:	f100 0318 	addeq.w	r3, r0, #24
 80086de:	6141      	streq	r1, [r0, #20]
 80086e0:	e7ee      	b.n	80086c0 <_calloc_r+0x2c>
 80086e2:	4603      	mov	r3, r0
 80086e4:	e7ec      	b.n	80086c0 <_calloc_r+0x2c>
 80086e6:	2100      	movs	r1, #0
 80086e8:	f7fd fc5e 	bl	8005fa8 <memset>
 80086ec:	e7ec      	b.n	80086c8 <_calloc_r+0x34>
	...

080086f0 <_malloc_trim_r>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	4f25      	ldr	r7, [pc, #148]	; (800878c <_malloc_trim_r+0x9c>)
 80086f6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008798 <_malloc_trim_r+0xa8>
 80086fa:	4689      	mov	r9, r1
 80086fc:	4606      	mov	r6, r0
 80086fe:	f7ff fc63 	bl	8007fc8 <__malloc_lock>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	685d      	ldr	r5, [r3, #4]
 8008706:	f1a8 0411 	sub.w	r4, r8, #17
 800870a:	f025 0503 	bic.w	r5, r5, #3
 800870e:	eba4 0409 	sub.w	r4, r4, r9
 8008712:	442c      	add	r4, r5
 8008714:	fbb4 f4f8 	udiv	r4, r4, r8
 8008718:	3c01      	subs	r4, #1
 800871a:	fb08 f404 	mul.w	r4, r8, r4
 800871e:	4544      	cmp	r4, r8
 8008720:	da05      	bge.n	800872e <_malloc_trim_r+0x3e>
 8008722:	4630      	mov	r0, r6
 8008724:	f7ff fc56 	bl	8007fd4 <__malloc_unlock>
 8008728:	2000      	movs	r0, #0
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872e:	2100      	movs	r1, #0
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ff25 	bl	8008580 <_sbrk_r>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	442b      	add	r3, r5
 800873a:	4298      	cmp	r0, r3
 800873c:	d1f1      	bne.n	8008722 <_malloc_trim_r+0x32>
 800873e:	4261      	negs	r1, r4
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ff1d 	bl	8008580 <_sbrk_r>
 8008746:	3001      	adds	r0, #1
 8008748:	d110      	bne.n	800876c <_malloc_trim_r+0x7c>
 800874a:	2100      	movs	r1, #0
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff ff17 	bl	8008580 <_sbrk_r>
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	1a83      	subs	r3, r0, r2
 8008756:	2b0f      	cmp	r3, #15
 8008758:	dde3      	ble.n	8008722 <_malloc_trim_r+0x32>
 800875a:	490d      	ldr	r1, [pc, #52]	; (8008790 <_malloc_trim_r+0xa0>)
 800875c:	6809      	ldr	r1, [r1, #0]
 800875e:	1a40      	subs	r0, r0, r1
 8008760:	490c      	ldr	r1, [pc, #48]	; (8008794 <_malloc_trim_r+0xa4>)
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	6008      	str	r0, [r1, #0]
 8008768:	6053      	str	r3, [r2, #4]
 800876a:	e7da      	b.n	8008722 <_malloc_trim_r+0x32>
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	4a09      	ldr	r2, [pc, #36]	; (8008794 <_malloc_trim_r+0xa4>)
 8008770:	1b2d      	subs	r5, r5, r4
 8008772:	f045 0501 	orr.w	r5, r5, #1
 8008776:	605d      	str	r5, [r3, #4]
 8008778:	6813      	ldr	r3, [r2, #0]
 800877a:	4630      	mov	r0, r6
 800877c:	1b1c      	subs	r4, r3, r4
 800877e:	6014      	str	r4, [r2, #0]
 8008780:	f7ff fc28 	bl	8007fd4 <__malloc_unlock>
 8008784:	2001      	movs	r0, #1
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	bf00      	nop
 800878c:	20000144 	.word	0x20000144
 8008790:	2000054c 	.word	0x2000054c
 8008794:	20000938 	.word	0x20000938
 8008798:	00000080 	.word	0x00000080

0800879c <_free_r>:
 800879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a0:	4604      	mov	r4, r0
 80087a2:	4688      	mov	r8, r1
 80087a4:	2900      	cmp	r1, #0
 80087a6:	f000 80ab 	beq.w	8008900 <_free_r+0x164>
 80087aa:	f7ff fc0d 	bl	8007fc8 <__malloc_lock>
 80087ae:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80087b2:	4d54      	ldr	r5, [pc, #336]	; (8008904 <_free_r+0x168>)
 80087b4:	f022 0001 	bic.w	r0, r2, #1
 80087b8:	f1a8 0308 	sub.w	r3, r8, #8
 80087bc:	181f      	adds	r7, r3, r0
 80087be:	68a9      	ldr	r1, [r5, #8]
 80087c0:	687e      	ldr	r6, [r7, #4]
 80087c2:	428f      	cmp	r7, r1
 80087c4:	f026 0603 	bic.w	r6, r6, #3
 80087c8:	f002 0201 	and.w	r2, r2, #1
 80087cc:	d11b      	bne.n	8008806 <_free_r+0x6a>
 80087ce:	4430      	add	r0, r6
 80087d0:	b93a      	cbnz	r2, 80087e2 <_free_r+0x46>
 80087d2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	4410      	add	r0, r2
 80087da:	6899      	ldr	r1, [r3, #8]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	60ca      	str	r2, [r1, #12]
 80087e0:	6091      	str	r1, [r2, #8]
 80087e2:	f040 0201 	orr.w	r2, r0, #1
 80087e6:	605a      	str	r2, [r3, #4]
 80087e8:	60ab      	str	r3, [r5, #8]
 80087ea:	4b47      	ldr	r3, [pc, #284]	; (8008908 <_free_r+0x16c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4298      	cmp	r0, r3
 80087f0:	d304      	bcc.n	80087fc <_free_r+0x60>
 80087f2:	4b46      	ldr	r3, [pc, #280]	; (800890c <_free_r+0x170>)
 80087f4:	4620      	mov	r0, r4
 80087f6:	6819      	ldr	r1, [r3, #0]
 80087f8:	f7ff ff7a 	bl	80086f0 <_malloc_trim_r>
 80087fc:	4620      	mov	r0, r4
 80087fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008802:	f7ff bbe7 	b.w	8007fd4 <__malloc_unlock>
 8008806:	607e      	str	r6, [r7, #4]
 8008808:	2a00      	cmp	r2, #0
 800880a:	d139      	bne.n	8008880 <_free_r+0xe4>
 800880c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008810:	1a5b      	subs	r3, r3, r1
 8008812:	4408      	add	r0, r1
 8008814:	6899      	ldr	r1, [r3, #8]
 8008816:	f105 0e08 	add.w	lr, r5, #8
 800881a:	4571      	cmp	r1, lr
 800881c:	d032      	beq.n	8008884 <_free_r+0xe8>
 800881e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008822:	f8c1 e00c 	str.w	lr, [r1, #12]
 8008826:	f8ce 1008 	str.w	r1, [lr, #8]
 800882a:	19b9      	adds	r1, r7, r6
 800882c:	6849      	ldr	r1, [r1, #4]
 800882e:	07c9      	lsls	r1, r1, #31
 8008830:	d40a      	bmi.n	8008848 <_free_r+0xac>
 8008832:	4430      	add	r0, r6
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	bb3a      	cbnz	r2, 8008888 <_free_r+0xec>
 8008838:	4e35      	ldr	r6, [pc, #212]	; (8008910 <_free_r+0x174>)
 800883a:	42b1      	cmp	r1, r6
 800883c:	d124      	bne.n	8008888 <_free_r+0xec>
 800883e:	616b      	str	r3, [r5, #20]
 8008840:	612b      	str	r3, [r5, #16]
 8008842:	2201      	movs	r2, #1
 8008844:	60d9      	str	r1, [r3, #12]
 8008846:	6099      	str	r1, [r3, #8]
 8008848:	f040 0101 	orr.w	r1, r0, #1
 800884c:	6059      	str	r1, [r3, #4]
 800884e:	5018      	str	r0, [r3, r0]
 8008850:	2a00      	cmp	r2, #0
 8008852:	d1d3      	bne.n	80087fc <_free_r+0x60>
 8008854:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008858:	d21a      	bcs.n	8008890 <_free_r+0xf4>
 800885a:	08c0      	lsrs	r0, r0, #3
 800885c:	1081      	asrs	r1, r0, #2
 800885e:	2201      	movs	r2, #1
 8008860:	408a      	lsls	r2, r1
 8008862:	6869      	ldr	r1, [r5, #4]
 8008864:	3001      	adds	r0, #1
 8008866:	430a      	orrs	r2, r1
 8008868:	606a      	str	r2, [r5, #4]
 800886a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800886e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008872:	6099      	str	r1, [r3, #8]
 8008874:	3a08      	subs	r2, #8
 8008876:	60da      	str	r2, [r3, #12]
 8008878:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800887c:	60cb      	str	r3, [r1, #12]
 800887e:	e7bd      	b.n	80087fc <_free_r+0x60>
 8008880:	2200      	movs	r2, #0
 8008882:	e7d2      	b.n	800882a <_free_r+0x8e>
 8008884:	2201      	movs	r2, #1
 8008886:	e7d0      	b.n	800882a <_free_r+0x8e>
 8008888:	68fe      	ldr	r6, [r7, #12]
 800888a:	60ce      	str	r6, [r1, #12]
 800888c:	60b1      	str	r1, [r6, #8]
 800888e:	e7db      	b.n	8008848 <_free_r+0xac>
 8008890:	0a42      	lsrs	r2, r0, #9
 8008892:	2a04      	cmp	r2, #4
 8008894:	d813      	bhi.n	80088be <_free_r+0x122>
 8008896:	0982      	lsrs	r2, r0, #6
 8008898:	3238      	adds	r2, #56	; 0x38
 800889a:	1c51      	adds	r1, r2, #1
 800889c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80088a0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80088a4:	428e      	cmp	r6, r1
 80088a6:	d124      	bne.n	80088f2 <_free_r+0x156>
 80088a8:	2001      	movs	r0, #1
 80088aa:	1092      	asrs	r2, r2, #2
 80088ac:	fa00 f202 	lsl.w	r2, r0, r2
 80088b0:	6868      	ldr	r0, [r5, #4]
 80088b2:	4302      	orrs	r2, r0
 80088b4:	606a      	str	r2, [r5, #4]
 80088b6:	60de      	str	r6, [r3, #12]
 80088b8:	6099      	str	r1, [r3, #8]
 80088ba:	60b3      	str	r3, [r6, #8]
 80088bc:	e7de      	b.n	800887c <_free_r+0xe0>
 80088be:	2a14      	cmp	r2, #20
 80088c0:	d801      	bhi.n	80088c6 <_free_r+0x12a>
 80088c2:	325b      	adds	r2, #91	; 0x5b
 80088c4:	e7e9      	b.n	800889a <_free_r+0xfe>
 80088c6:	2a54      	cmp	r2, #84	; 0x54
 80088c8:	d802      	bhi.n	80088d0 <_free_r+0x134>
 80088ca:	0b02      	lsrs	r2, r0, #12
 80088cc:	326e      	adds	r2, #110	; 0x6e
 80088ce:	e7e4      	b.n	800889a <_free_r+0xfe>
 80088d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80088d4:	d802      	bhi.n	80088dc <_free_r+0x140>
 80088d6:	0bc2      	lsrs	r2, r0, #15
 80088d8:	3277      	adds	r2, #119	; 0x77
 80088da:	e7de      	b.n	800889a <_free_r+0xfe>
 80088dc:	f240 5154 	movw	r1, #1364	; 0x554
 80088e0:	428a      	cmp	r2, r1
 80088e2:	bf9a      	itte	ls
 80088e4:	0c82      	lsrls	r2, r0, #18
 80088e6:	327c      	addls	r2, #124	; 0x7c
 80088e8:	227e      	movhi	r2, #126	; 0x7e
 80088ea:	e7d6      	b.n	800889a <_free_r+0xfe>
 80088ec:	6889      	ldr	r1, [r1, #8]
 80088ee:	428e      	cmp	r6, r1
 80088f0:	d004      	beq.n	80088fc <_free_r+0x160>
 80088f2:	684a      	ldr	r2, [r1, #4]
 80088f4:	f022 0203 	bic.w	r2, r2, #3
 80088f8:	4290      	cmp	r0, r2
 80088fa:	d3f7      	bcc.n	80088ec <_free_r+0x150>
 80088fc:	68ce      	ldr	r6, [r1, #12]
 80088fe:	e7da      	b.n	80088b6 <_free_r+0x11a>
 8008900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008904:	20000144 	.word	0x20000144
 8008908:	20000550 	.word	0x20000550
 800890c:	20000968 	.word	0x20000968
 8008910:	2000014c 	.word	0x2000014c

08008914 <__retarget_lock_acquire_recursive>:
 8008914:	4770      	bx	lr

08008916 <__retarget_lock_release_recursive>:
 8008916:	4770      	bx	lr

08008918 <__ascii_mbtowc>:
 8008918:	b082      	sub	sp, #8
 800891a:	b901      	cbnz	r1, 800891e <__ascii_mbtowc+0x6>
 800891c:	a901      	add	r1, sp, #4
 800891e:	b142      	cbz	r2, 8008932 <__ascii_mbtowc+0x1a>
 8008920:	b14b      	cbz	r3, 8008936 <__ascii_mbtowc+0x1e>
 8008922:	7813      	ldrb	r3, [r2, #0]
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	1c10      	adds	r0, r2, #0
 800892a:	bf18      	it	ne
 800892c:	2001      	movne	r0, #1
 800892e:	b002      	add	sp, #8
 8008930:	4770      	bx	lr
 8008932:	4610      	mov	r0, r2
 8008934:	e7fb      	b.n	800892e <__ascii_mbtowc+0x16>
 8008936:	f06f 0001 	mvn.w	r0, #1
 800893a:	e7f8      	b.n	800892e <__ascii_mbtowc+0x16>

0800893c <memmove>:
 800893c:	4288      	cmp	r0, r1
 800893e:	b510      	push	{r4, lr}
 8008940:	eb01 0302 	add.w	r3, r1, r2
 8008944:	d803      	bhi.n	800894e <memmove+0x12>
 8008946:	1e42      	subs	r2, r0, #1
 8008948:	4299      	cmp	r1, r3
 800894a:	d10c      	bne.n	8008966 <memmove+0x2a>
 800894c:	bd10      	pop	{r4, pc}
 800894e:	4298      	cmp	r0, r3
 8008950:	d2f9      	bcs.n	8008946 <memmove+0xa>
 8008952:	1881      	adds	r1, r0, r2
 8008954:	1ad2      	subs	r2, r2, r3
 8008956:	42d3      	cmn	r3, r2
 8008958:	d100      	bne.n	800895c <memmove+0x20>
 800895a:	bd10      	pop	{r4, pc}
 800895c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008960:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008964:	e7f7      	b.n	8008956 <memmove+0x1a>
 8008966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800896e:	e7eb      	b.n	8008948 <memmove+0xc>

08008970 <_realloc_r>:
 8008970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4682      	mov	sl, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b929      	cbnz	r1, 8008986 <_realloc_r+0x16>
 800897a:	4611      	mov	r1, r2
 800897c:	b003      	add	sp, #12
 800897e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008982:	f7ff b907 	b.w	8007b94 <_malloc_r>
 8008986:	9201      	str	r2, [sp, #4]
 8008988:	f7ff fb1e 	bl	8007fc8 <__malloc_lock>
 800898c:	9a01      	ldr	r2, [sp, #4]
 800898e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008992:	f102 080b 	add.w	r8, r2, #11
 8008996:	f1b8 0f16 	cmp.w	r8, #22
 800899a:	f1a4 0908 	sub.w	r9, r4, #8
 800899e:	f025 0603 	bic.w	r6, r5, #3
 80089a2:	d90a      	bls.n	80089ba <_realloc_r+0x4a>
 80089a4:	f038 0807 	bics.w	r8, r8, #7
 80089a8:	d509      	bpl.n	80089be <_realloc_r+0x4e>
 80089aa:	230c      	movs	r3, #12
 80089ac:	f8ca 3000 	str.w	r3, [sl]
 80089b0:	2700      	movs	r7, #0
 80089b2:	4638      	mov	r0, r7
 80089b4:	b003      	add	sp, #12
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	f04f 0810 	mov.w	r8, #16
 80089be:	4590      	cmp	r8, r2
 80089c0:	d3f3      	bcc.n	80089aa <_realloc_r+0x3a>
 80089c2:	45b0      	cmp	r8, r6
 80089c4:	f340 8145 	ble.w	8008c52 <_realloc_r+0x2e2>
 80089c8:	4ba8      	ldr	r3, [pc, #672]	; (8008c6c <_realloc_r+0x2fc>)
 80089ca:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80089ce:	eb09 0106 	add.w	r1, r9, r6
 80089d2:	4571      	cmp	r1, lr
 80089d4:	469b      	mov	fp, r3
 80089d6:	684b      	ldr	r3, [r1, #4]
 80089d8:	d005      	beq.n	80089e6 <_realloc_r+0x76>
 80089da:	f023 0001 	bic.w	r0, r3, #1
 80089de:	4408      	add	r0, r1
 80089e0:	6840      	ldr	r0, [r0, #4]
 80089e2:	07c7      	lsls	r7, r0, #31
 80089e4:	d447      	bmi.n	8008a76 <_realloc_r+0x106>
 80089e6:	f023 0303 	bic.w	r3, r3, #3
 80089ea:	4571      	cmp	r1, lr
 80089ec:	eb06 0703 	add.w	r7, r6, r3
 80089f0:	d119      	bne.n	8008a26 <_realloc_r+0xb6>
 80089f2:	f108 0010 	add.w	r0, r8, #16
 80089f6:	4287      	cmp	r7, r0
 80089f8:	db3f      	blt.n	8008a7a <_realloc_r+0x10a>
 80089fa:	eb09 0308 	add.w	r3, r9, r8
 80089fe:	eba7 0708 	sub.w	r7, r7, r8
 8008a02:	f047 0701 	orr.w	r7, r7, #1
 8008a06:	f8cb 3008 	str.w	r3, [fp, #8]
 8008a0a:	605f      	str	r7, [r3, #4]
 8008a0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	ea43 0308 	orr.w	r3, r3, r8
 8008a18:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	f7ff fad9 	bl	8007fd4 <__malloc_unlock>
 8008a22:	4627      	mov	r7, r4
 8008a24:	e7c5      	b.n	80089b2 <_realloc_r+0x42>
 8008a26:	45b8      	cmp	r8, r7
 8008a28:	dc27      	bgt.n	8008a7a <_realloc_r+0x10a>
 8008a2a:	68cb      	ldr	r3, [r1, #12]
 8008a2c:	688a      	ldr	r2, [r1, #8]
 8008a2e:	60d3      	str	r3, [r2, #12]
 8008a30:	609a      	str	r2, [r3, #8]
 8008a32:	eba7 0008 	sub.w	r0, r7, r8
 8008a36:	280f      	cmp	r0, #15
 8008a38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008a3c:	eb09 0207 	add.w	r2, r9, r7
 8008a40:	f240 8109 	bls.w	8008c56 <_realloc_r+0x2e6>
 8008a44:	eb09 0108 	add.w	r1, r9, r8
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	ea43 0308 	orr.w	r3, r3, r8
 8008a50:	f040 0001 	orr.w	r0, r0, #1
 8008a54:	f8c9 3004 	str.w	r3, [r9, #4]
 8008a58:	6048      	str	r0, [r1, #4]
 8008a5a:	6853      	ldr	r3, [r2, #4]
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	6053      	str	r3, [r2, #4]
 8008a62:	3108      	adds	r1, #8
 8008a64:	4650      	mov	r0, sl
 8008a66:	f7ff fe99 	bl	800879c <_free_r>
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	f7ff fab2 	bl	8007fd4 <__malloc_unlock>
 8008a70:	f109 0708 	add.w	r7, r9, #8
 8008a74:	e79d      	b.n	80089b2 <_realloc_r+0x42>
 8008a76:	2300      	movs	r3, #0
 8008a78:	4619      	mov	r1, r3
 8008a7a:	07e8      	lsls	r0, r5, #31
 8008a7c:	f100 8084 	bmi.w	8008b88 <_realloc_r+0x218>
 8008a80:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008a84:	eba9 0505 	sub.w	r5, r9, r5
 8008a88:	6868      	ldr	r0, [r5, #4]
 8008a8a:	f020 0003 	bic.w	r0, r0, #3
 8008a8e:	4430      	add	r0, r6
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d076      	beq.n	8008b82 <_realloc_r+0x212>
 8008a94:	4571      	cmp	r1, lr
 8008a96:	d150      	bne.n	8008b3a <_realloc_r+0x1ca>
 8008a98:	4403      	add	r3, r0
 8008a9a:	f108 0110 	add.w	r1, r8, #16
 8008a9e:	428b      	cmp	r3, r1
 8008aa0:	db6f      	blt.n	8008b82 <_realloc_r+0x212>
 8008aa2:	462f      	mov	r7, r5
 8008aa4:	68ea      	ldr	r2, [r5, #12]
 8008aa6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008aaa:	60ca      	str	r2, [r1, #12]
 8008aac:	6091      	str	r1, [r2, #8]
 8008aae:	1f32      	subs	r2, r6, #4
 8008ab0:	2a24      	cmp	r2, #36	; 0x24
 8008ab2:	d83b      	bhi.n	8008b2c <_realloc_r+0x1bc>
 8008ab4:	2a13      	cmp	r2, #19
 8008ab6:	d936      	bls.n	8008b26 <_realloc_r+0x1b6>
 8008ab8:	6821      	ldr	r1, [r4, #0]
 8008aba:	60a9      	str	r1, [r5, #8]
 8008abc:	6861      	ldr	r1, [r4, #4]
 8008abe:	60e9      	str	r1, [r5, #12]
 8008ac0:	2a1b      	cmp	r2, #27
 8008ac2:	d81c      	bhi.n	8008afe <_realloc_r+0x18e>
 8008ac4:	f105 0210 	add.w	r2, r5, #16
 8008ac8:	f104 0108 	add.w	r1, r4, #8
 8008acc:	6808      	ldr	r0, [r1, #0]
 8008ace:	6010      	str	r0, [r2, #0]
 8008ad0:	6848      	ldr	r0, [r1, #4]
 8008ad2:	6050      	str	r0, [r2, #4]
 8008ad4:	6889      	ldr	r1, [r1, #8]
 8008ad6:	6091      	str	r1, [r2, #8]
 8008ad8:	eb05 0208 	add.w	r2, r5, r8
 8008adc:	eba3 0308 	sub.w	r3, r3, r8
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	f8cb 2008 	str.w	r2, [fp, #8]
 8008ae8:	6053      	str	r3, [r2, #4]
 8008aea:	686b      	ldr	r3, [r5, #4]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	ea43 0308 	orr.w	r3, r3, r8
 8008af4:	606b      	str	r3, [r5, #4]
 8008af6:	4650      	mov	r0, sl
 8008af8:	f7ff fa6c 	bl	8007fd4 <__malloc_unlock>
 8008afc:	e759      	b.n	80089b2 <_realloc_r+0x42>
 8008afe:	68a1      	ldr	r1, [r4, #8]
 8008b00:	6129      	str	r1, [r5, #16]
 8008b02:	68e1      	ldr	r1, [r4, #12]
 8008b04:	6169      	str	r1, [r5, #20]
 8008b06:	2a24      	cmp	r2, #36	; 0x24
 8008b08:	bf01      	itttt	eq
 8008b0a:	6922      	ldreq	r2, [r4, #16]
 8008b0c:	61aa      	streq	r2, [r5, #24]
 8008b0e:	6960      	ldreq	r0, [r4, #20]
 8008b10:	61e8      	streq	r0, [r5, #28]
 8008b12:	bf19      	ittee	ne
 8008b14:	f105 0218 	addne.w	r2, r5, #24
 8008b18:	f104 0110 	addne.w	r1, r4, #16
 8008b1c:	f105 0220 	addeq.w	r2, r5, #32
 8008b20:	f104 0118 	addeq.w	r1, r4, #24
 8008b24:	e7d2      	b.n	8008acc <_realloc_r+0x15c>
 8008b26:	463a      	mov	r2, r7
 8008b28:	4621      	mov	r1, r4
 8008b2a:	e7cf      	b.n	8008acc <_realloc_r+0x15c>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4638      	mov	r0, r7
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	f7ff ff03 	bl	800893c <memmove>
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	e7ce      	b.n	8008ad8 <_realloc_r+0x168>
 8008b3a:	18c7      	adds	r7, r0, r3
 8008b3c:	45b8      	cmp	r8, r7
 8008b3e:	dc20      	bgt.n	8008b82 <_realloc_r+0x212>
 8008b40:	68cb      	ldr	r3, [r1, #12]
 8008b42:	688a      	ldr	r2, [r1, #8]
 8008b44:	60d3      	str	r3, [r2, #12]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	4628      	mov	r0, r5
 8008b4a:	68eb      	ldr	r3, [r5, #12]
 8008b4c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008b50:	60d3      	str	r3, [r2, #12]
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	1f32      	subs	r2, r6, #4
 8008b56:	2a24      	cmp	r2, #36	; 0x24
 8008b58:	d842      	bhi.n	8008be0 <_realloc_r+0x270>
 8008b5a:	2a13      	cmp	r2, #19
 8008b5c:	d93e      	bls.n	8008bdc <_realloc_r+0x26c>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	60ab      	str	r3, [r5, #8]
 8008b62:	6863      	ldr	r3, [r4, #4]
 8008b64:	60eb      	str	r3, [r5, #12]
 8008b66:	2a1b      	cmp	r2, #27
 8008b68:	d824      	bhi.n	8008bb4 <_realloc_r+0x244>
 8008b6a:	f105 0010 	add.w	r0, r5, #16
 8008b6e:	f104 0308 	add.w	r3, r4, #8
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	6002      	str	r2, [r0, #0]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	6042      	str	r2, [r0, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	6083      	str	r3, [r0, #8]
 8008b7e:	46a9      	mov	r9, r5
 8008b80:	e757      	b.n	8008a32 <_realloc_r+0xc2>
 8008b82:	4580      	cmp	r8, r0
 8008b84:	4607      	mov	r7, r0
 8008b86:	dddf      	ble.n	8008b48 <_realloc_r+0x1d8>
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	f7ff f802 	bl	8007b94 <_malloc_r>
 8008b90:	4607      	mov	r7, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0af      	beq.n	8008af6 <_realloc_r+0x186>
 8008b96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	f1a0 0208 	sub.w	r2, r0, #8
 8008ba2:	444b      	add	r3, r9
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d11f      	bne.n	8008be8 <_realloc_r+0x278>
 8008ba8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008bac:	f027 0703 	bic.w	r7, r7, #3
 8008bb0:	4437      	add	r7, r6
 8008bb2:	e73e      	b.n	8008a32 <_realloc_r+0xc2>
 8008bb4:	68a3      	ldr	r3, [r4, #8]
 8008bb6:	612b      	str	r3, [r5, #16]
 8008bb8:	68e3      	ldr	r3, [r4, #12]
 8008bba:	616b      	str	r3, [r5, #20]
 8008bbc:	2a24      	cmp	r2, #36	; 0x24
 8008bbe:	bf01      	itttt	eq
 8008bc0:	6923      	ldreq	r3, [r4, #16]
 8008bc2:	61ab      	streq	r3, [r5, #24]
 8008bc4:	6962      	ldreq	r2, [r4, #20]
 8008bc6:	61ea      	streq	r2, [r5, #28]
 8008bc8:	bf19      	ittee	ne
 8008bca:	f105 0018 	addne.w	r0, r5, #24
 8008bce:	f104 0310 	addne.w	r3, r4, #16
 8008bd2:	f105 0020 	addeq.w	r0, r5, #32
 8008bd6:	f104 0318 	addeq.w	r3, r4, #24
 8008bda:	e7ca      	b.n	8008b72 <_realloc_r+0x202>
 8008bdc:	4623      	mov	r3, r4
 8008bde:	e7c8      	b.n	8008b72 <_realloc_r+0x202>
 8008be0:	4621      	mov	r1, r4
 8008be2:	f7ff feab 	bl	800893c <memmove>
 8008be6:	e7ca      	b.n	8008b7e <_realloc_r+0x20e>
 8008be8:	1f32      	subs	r2, r6, #4
 8008bea:	2a24      	cmp	r2, #36	; 0x24
 8008bec:	d82d      	bhi.n	8008c4a <_realloc_r+0x2da>
 8008bee:	2a13      	cmp	r2, #19
 8008bf0:	d928      	bls.n	8008c44 <_realloc_r+0x2d4>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	6043      	str	r3, [r0, #4]
 8008bfa:	2a1b      	cmp	r2, #27
 8008bfc:	d80e      	bhi.n	8008c1c <_realloc_r+0x2ac>
 8008bfe:	f100 0308 	add.w	r3, r0, #8
 8008c02:	f104 0208 	add.w	r2, r4, #8
 8008c06:	6811      	ldr	r1, [r2, #0]
 8008c08:	6019      	str	r1, [r3, #0]
 8008c0a:	6851      	ldr	r1, [r2, #4]
 8008c0c:	6059      	str	r1, [r3, #4]
 8008c0e:	6892      	ldr	r2, [r2, #8]
 8008c10:	609a      	str	r2, [r3, #8]
 8008c12:	4621      	mov	r1, r4
 8008c14:	4650      	mov	r0, sl
 8008c16:	f7ff fdc1 	bl	800879c <_free_r>
 8008c1a:	e76c      	b.n	8008af6 <_realloc_r+0x186>
 8008c1c:	68a3      	ldr	r3, [r4, #8]
 8008c1e:	6083      	str	r3, [r0, #8]
 8008c20:	68e3      	ldr	r3, [r4, #12]
 8008c22:	60c3      	str	r3, [r0, #12]
 8008c24:	2a24      	cmp	r2, #36	; 0x24
 8008c26:	bf01      	itttt	eq
 8008c28:	6923      	ldreq	r3, [r4, #16]
 8008c2a:	6103      	streq	r3, [r0, #16]
 8008c2c:	6961      	ldreq	r1, [r4, #20]
 8008c2e:	6141      	streq	r1, [r0, #20]
 8008c30:	bf19      	ittee	ne
 8008c32:	f100 0310 	addne.w	r3, r0, #16
 8008c36:	f104 0210 	addne.w	r2, r4, #16
 8008c3a:	f100 0318 	addeq.w	r3, r0, #24
 8008c3e:	f104 0218 	addeq.w	r2, r4, #24
 8008c42:	e7e0      	b.n	8008c06 <_realloc_r+0x296>
 8008c44:	4603      	mov	r3, r0
 8008c46:	4622      	mov	r2, r4
 8008c48:	e7dd      	b.n	8008c06 <_realloc_r+0x296>
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	f7ff fe76 	bl	800893c <memmove>
 8008c50:	e7df      	b.n	8008c12 <_realloc_r+0x2a2>
 8008c52:	4637      	mov	r7, r6
 8008c54:	e6ed      	b.n	8008a32 <_realloc_r+0xc2>
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	431f      	orrs	r7, r3
 8008c5c:	f8c9 7004 	str.w	r7, [r9, #4]
 8008c60:	6853      	ldr	r3, [r2, #4]
 8008c62:	f043 0301 	orr.w	r3, r3, #1
 8008c66:	6053      	str	r3, [r2, #4]
 8008c68:	e6ff      	b.n	8008a6a <_realloc_r+0xfa>
 8008c6a:	bf00      	nop
 8008c6c:	20000144 	.word	0x20000144

08008c70 <__ascii_wctomb>:
 8008c70:	b149      	cbz	r1, 8008c86 <__ascii_wctomb+0x16>
 8008c72:	2aff      	cmp	r2, #255	; 0xff
 8008c74:	bf85      	ittet	hi
 8008c76:	238a      	movhi	r3, #138	; 0x8a
 8008c78:	6003      	strhi	r3, [r0, #0]
 8008c7a:	700a      	strbls	r2, [r1, #0]
 8008c7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c80:	bf98      	it	ls
 8008c82:	2001      	movls	r0, #1
 8008c84:	4770      	bx	lr
 8008c86:	4608      	mov	r0, r1
 8008c88:	4770      	bx	lr
	...

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr
